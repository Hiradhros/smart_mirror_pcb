
final_demo_pcb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c9c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000072c  08003e2c  08003e2c  00013e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004558  08004558  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004558  08004558  00014558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004560  08004560  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004560  08004560  00014560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004564  08004564  00014564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004568  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  20000074  080045dc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000384  080045dc  00020384  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e46d  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000205c  00000000  00000000  0002e511  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a8  00000000  00000000  00030570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008f0  00000000  00000000  00030f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000215bc  00000000  00000000  00031808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b9f4  00000000  00000000  00052dc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4d63  00000000  00000000  0005e7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012351b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b18  00000000  00000000  00123570  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003e14 	.word	0x08003e14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08003e14 	.word	0x08003e14

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <bufclr>:
#include "string.h"
#include "MY_ILI9341.h"


void bufclr (char *buf)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	int len = strlen (buf);
 8000580:	6878      	ldr	r0, [r7, #4]
 8000582:	f7ff fe25 	bl	80001d0 <strlen>
 8000586:	4603      	mov	r3, r0
 8000588:	60bb      	str	r3, [r7, #8]
	for (int i=0; i<len; i++) buf[i] = '\0';
 800058a:	2300      	movs	r3, #0
 800058c:	60fb      	str	r3, [r7, #12]
 800058e:	e007      	b.n	80005a0 <bufclr+0x28>
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	687a      	ldr	r2, [r7, #4]
 8000594:	4413      	add	r3, r2
 8000596:	2200      	movs	r2, #0
 8000598:	701a      	strb	r2, [r3, #0]
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	3301      	adds	r3, #1
 800059e:	60fb      	str	r3, [r7, #12]
 80005a0:	68fa      	ldr	r2, [r7, #12]
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	429a      	cmp	r2, r3
 80005a6:	dbf3      	blt.n	8000590 <bufclr+0x18>
}
 80005a8:	bf00      	nop
 80005aa:	bf00      	nop
 80005ac:	3710      	adds	r7, #16
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
	...

080005b4 <ESP_Init>:


/*****************************************************************************************************************************************/

void ESP_Init (char *SSID, char *PASSWD)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b096      	sub	sp, #88	; 0x58
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	6039      	str	r1, [r7, #0]
	char data[80];

	Ringbuf_init();
 80005be:	f000 fddf 	bl	8001180 <Ringbuf_init>

	Uart_sendstring("AT+RST\r\n");
 80005c2:	481e      	ldr	r0, [pc, #120]	; (800063c <ESP_Init+0x88>)
 80005c4:	f000 fe98 	bl	80012f8 <Uart_sendstring>
	HAL_Delay(5000);
 80005c8:	f241 3088 	movw	r0, #5000	; 0x1388
 80005cc:	f001 fbb4 	bl	8001d38 <HAL_Delay>

	/********* AT **********/
	//AT –> to check if the ESP is responding
	Uart_sendstring("AT\r\n");
 80005d0:	481b      	ldr	r0, [pc, #108]	; (8000640 <ESP_Init+0x8c>)
 80005d2:	f000 fe91 	bl	80012f8 <Uart_sendstring>
	while(!(Wait_for("AT\r\r\n\r\nOK\r\n")));
 80005d6:	bf00      	nop
 80005d8:	481a      	ldr	r0, [pc, #104]	; (8000644 <ESP_Init+0x90>)
 80005da:	f000 ff31 	bl	8001440 <Wait_for>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d0f9      	beq.n	80005d8 <ESP_Init+0x24>


	/********* AT+CWMODE=1 **********/
	//AT+CWMODE=1 –> to set the ESP into the station mode
	Uart_sendstring("AT+CWMODE=1\r\n");
 80005e4:	4818      	ldr	r0, [pc, #96]	; (8000648 <ESP_Init+0x94>)
 80005e6:	f000 fe87 	bl	80012f8 <Uart_sendstring>
	while (!(Wait_for("AT+CWMODE=1\r\r\n\r\nOK\r\n")));
 80005ea:	bf00      	nop
 80005ec:	4817      	ldr	r0, [pc, #92]	; (800064c <ESP_Init+0x98>)
 80005ee:	f000 ff27 	bl	8001440 <Wait_for>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d0f9      	beq.n	80005ec <ESP_Init+0x38>


	/********* AT+CWJAP="SSID","PASSWD" **********/
	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 80005f8:	f107 0008 	add.w	r0, r7, #8
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	687a      	ldr	r2, [r7, #4]
 8000600:	4913      	ldr	r1, [pc, #76]	; (8000650 <ESP_Init+0x9c>)
 8000602:	f002 ffe7 	bl	80035d4 <siprintf>
	Uart_sendstring(data);
 8000606:	f107 0308 	add.w	r3, r7, #8
 800060a:	4618      	mov	r0, r3
 800060c:	f000 fe74 	bl	80012f8 <Uart_sendstring>
	while (!(Wait_for("WIFI GOT IP\r\n\r\nOK\r\n")));
 8000610:	bf00      	nop
 8000612:	4810      	ldr	r0, [pc, #64]	; (8000654 <ESP_Init+0xa0>)
 8000614:	f000 ff14 	bl	8001440 <Wait_for>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d0f9      	beq.n	8000612 <ESP_Init+0x5e>

	/********* AT+CIPMUX=0 **********/
	Uart_sendstring("AT+CIPMUX=0\r\n");
 800061e:	480e      	ldr	r0, [pc, #56]	; (8000658 <ESP_Init+0xa4>)
 8000620:	f000 fe6a 	bl	80012f8 <Uart_sendstring>
	while (!(Wait_for("AT+CIPMUX=0\r\r\n\r\nOK\r\n")));
 8000624:	bf00      	nop
 8000626:	480d      	ldr	r0, [pc, #52]	; (800065c <ESP_Init+0xa8>)
 8000628:	f000 ff0a 	bl	8001440 <Wait_for>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d0f9      	beq.n	8000626 <ESP_Init+0x72>

}
 8000632:	bf00      	nop
 8000634:	bf00      	nop
 8000636:	3758      	adds	r7, #88	; 0x58
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	08003e2c 	.word	0x08003e2c
 8000640:	08003e38 	.word	0x08003e38
 8000644:	08003e40 	.word	0x08003e40
 8000648:	08003e4c 	.word	0x08003e4c
 800064c:	08003e5c 	.word	0x08003e5c
 8000650:	08003e74 	.word	0x08003e74
 8000654:	08003e8c 	.word	0x08003e8c
 8000658:	08003ea0 	.word	0x08003ea0
 800065c:	08003eb0 	.word	0x08003eb0

08000660 <ESP_GetData_1>:
	snprintf (Total, len,local_buf2);
}
*/

void ESP_GetData_1 (char *api_key, char *Total)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b0a4      	sub	sp, #144	; 0x90
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	6039      	str	r1, [r7, #0]
	char local_buf[100] = {0};
 800066a:	2300      	movs	r3, #0
 800066c:	62bb      	str	r3, [r7, #40]	; 0x28
 800066e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000672:	2260      	movs	r2, #96	; 0x60
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f002 ff70 	bl	800355c <memset>
	char local_buf2[30] = {0};
 800067c:	2300      	movs	r3, #0
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]
 8000690:	615a      	str	r2, [r3, #20]
 8000692:	831a      	strh	r2, [r3, #24]
	//char local_buf3[30] = {0};

	Uart_sendstring("AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80\r\n");
 8000694:	4831      	ldr	r0, [pc, #196]	; (800075c <ESP_GetData_1+0xfc>)
 8000696:	f000 fe2f 	bl	80012f8 <Uart_sendstring>
	while (!(Wait_for("CONNECT\r\n\r\nOK\r\n")));
 800069a:	bf00      	nop
 800069c:	4830      	ldr	r0, [pc, #192]	; (8000760 <ESP_GetData_1+0x100>)
 800069e:	f000 fecf 	bl	8001440 <Wait_for>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d0f9      	beq.n	800069c <ESP_GetData_1+0x3c>
	
	sprintf (local_buf, "GET /apps/thinghttp/send_request?api_key=%s\r\n", api_key);
 80006a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006ac:	687a      	ldr	r2, [r7, #4]
 80006ae:	492d      	ldr	r1, [pc, #180]	; (8000764 <ESP_GetData_1+0x104>)
 80006b0:	4618      	mov	r0, r3
 80006b2:	f002 ff8f 	bl	80035d4 <siprintf>
	int len = strlen (local_buf);
 80006b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff fd88 	bl	80001d0 <strlen>
 80006c0:	4603      	mov	r3, r0
 80006c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	
	sprintf (local_buf2, "AT+CIPSEND=%d\r\n", len);
 80006c6:	f107 0308 	add.w	r3, r7, #8
 80006ca:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80006ce:	4926      	ldr	r1, [pc, #152]	; (8000768 <ESP_GetData_1+0x108>)
 80006d0:	4618      	mov	r0, r3
 80006d2:	f002 ff7f 	bl	80035d4 <siprintf>
	Uart_sendstring(local_buf2);
 80006d6:	f107 0308 	add.w	r3, r7, #8
 80006da:	4618      	mov	r0, r3
 80006dc:	f000 fe0c 	bl	80012f8 <Uart_sendstring>
	while (!(Wait_for(">")));
 80006e0:	bf00      	nop
 80006e2:	4822      	ldr	r0, [pc, #136]	; (800076c <ESP_GetData_1+0x10c>)
 80006e4:	f000 feac 	bl	8001440 <Wait_for>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d0f9      	beq.n	80006e2 <ESP_GetData_1+0x82>
	
	bufclr(local_buf2);
 80006ee:	f107 0308 	add.w	r3, r7, #8
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff ff40 	bl	8000578 <bufclr>

	Uart_sendstring (local_buf);
 80006f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006fc:	4618      	mov	r0, r3
 80006fe:	f000 fdfb 	bl	80012f8 <Uart_sendstring>
	while (!(Wait_for("SEND OK\r\n")));
 8000702:	bf00      	nop
 8000704:	481a      	ldr	r0, [pc, #104]	; (8000770 <ESP_GetData_1+0x110>)
 8000706:	f000 fe9b 	bl	8001440 <Wait_for>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d0f9      	beq.n	8000704 <ESP_GetData_1+0xa4>
	
	while (!(Wait_for (">")));
 8000710:	bf00      	nop
 8000712:	4816      	ldr	r0, [pc, #88]	; (800076c <ESP_GetData_1+0x10c>)
 8000714:	f000 fe94 	bl	8001440 <Wait_for>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d0f9      	beq.n	8000712 <ESP_GetData_1+0xb2>
	while (!(Copy_upto ("°", local_buf2)));
 800071e:	bf00      	nop
 8000720:	f107 0308 	add.w	r3, r7, #8
 8000724:	4619      	mov	r1, r3
 8000726:	4813      	ldr	r0, [pc, #76]	; (8000774 <ESP_GetData_1+0x114>)
 8000728:	f000 fe16 	bl	8001358 <Copy_upto>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d0f6      	beq.n	8000720 <ESP_GetData_1+0xc0>

	len = strlen (local_buf2);
 8000732:	f107 0308 	add.w	r3, r7, #8
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff fd4a 	bl	80001d0 <strlen>
 800073c:	4603      	mov	r3, r0
 800073e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	snprintf (Total, len,local_buf2);
 8000742:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000746:	f107 0208 	add.w	r2, r7, #8
 800074a:	4619      	mov	r1, r3
 800074c:	6838      	ldr	r0, [r7, #0]
 800074e:	f002 ff0d 	bl	800356c <sniprintf>
}
 8000752:	bf00      	nop
 8000754:	3790      	adds	r7, #144	; 0x90
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	08003ec8 	.word	0x08003ec8
 8000760:	08003ef4 	.word	0x08003ef4
 8000764:	08003f04 	.word	0x08003f04
 8000768:	08003f34 	.word	0x08003f34
 800076c:	08003f44 	.word	0x08003f44
 8000770:	08003f48 	.word	0x08003f48
 8000774:	08003f54 	.word	0x08003f54

08000778 <ESP_GetData_2>:

void ESP_GetData_2 (char *api_key, char *Total) /*, char *Deaths, char *Recovered)*/
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b0a4      	sub	sp, #144	; 0x90
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	6039      	str	r1, [r7, #0]
	char local_buf[100] = {0};
 8000782:	2300      	movs	r3, #0
 8000784:	62bb      	str	r3, [r7, #40]	; 0x28
 8000786:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800078a:	2260      	movs	r2, #96	; 0x60
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f002 fee4 	bl	800355c <memset>
	char local_buf2[30] = {0};
 8000794:	2300      	movs	r3, #0
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	f107 030c 	add.w	r3, r7, #12
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]
 80007a8:	615a      	str	r2, [r3, #20]
 80007aa:	831a      	strh	r2, [r3, #24]
	//char local_buf3[30] = {0};

	Uart_sendstring("AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80\r\n");
 80007ac:	4831      	ldr	r0, [pc, #196]	; (8000874 <ESP_GetData_2+0xfc>)
 80007ae:	f000 fda3 	bl	80012f8 <Uart_sendstring>
	while (!(Wait_for("CONNECT\r\n\r\nOK\r\n")));
 80007b2:	bf00      	nop
 80007b4:	4830      	ldr	r0, [pc, #192]	; (8000878 <ESP_GetData_2+0x100>)
 80007b6:	f000 fe43 	bl	8001440 <Wait_for>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d0f9      	beq.n	80007b4 <ESP_GetData_2+0x3c>

	sprintf (local_buf, "GET /apps/thinghttp/send_request?api_key=%s\r\n", api_key);
 80007c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007c4:	687a      	ldr	r2, [r7, #4]
 80007c6:	492d      	ldr	r1, [pc, #180]	; (800087c <ESP_GetData_2+0x104>)
 80007c8:	4618      	mov	r0, r3
 80007ca:	f002 ff03 	bl	80035d4 <siprintf>
	int len = strlen (local_buf);
 80007ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff fcfc 	bl	80001d0 <strlen>
 80007d8:	4603      	mov	r3, r0
 80007da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	sprintf (local_buf2, "AT+CIPSEND=%d\r\n", len);
 80007de:	f107 0308 	add.w	r3, r7, #8
 80007e2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80007e6:	4926      	ldr	r1, [pc, #152]	; (8000880 <ESP_GetData_2+0x108>)
 80007e8:	4618      	mov	r0, r3
 80007ea:	f002 fef3 	bl	80035d4 <siprintf>
	Uart_sendstring(local_buf2);
 80007ee:	f107 0308 	add.w	r3, r7, #8
 80007f2:	4618      	mov	r0, r3
 80007f4:	f000 fd80 	bl	80012f8 <Uart_sendstring>
	while (!(Wait_for(">")));
 80007f8:	bf00      	nop
 80007fa:	4822      	ldr	r0, [pc, #136]	; (8000884 <ESP_GetData_2+0x10c>)
 80007fc:	f000 fe20 	bl	8001440 <Wait_for>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d0f9      	beq.n	80007fa <ESP_GetData_2+0x82>

	bufclr(local_buf2);
 8000806:	f107 0308 	add.w	r3, r7, #8
 800080a:	4618      	mov	r0, r3
 800080c:	f7ff feb4 	bl	8000578 <bufclr>

	Uart_sendstring (local_buf);
 8000810:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000814:	4618      	mov	r0, r3
 8000816:	f000 fd6f 	bl	80012f8 <Uart_sendstring>
	while (!(Wait_for("SEND OK\r\n")));
 800081a:	bf00      	nop
 800081c:	481a      	ldr	r0, [pc, #104]	; (8000888 <ESP_GetData_2+0x110>)
 800081e:	f000 fe0f 	bl	8001440 <Wait_for>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d0f9      	beq.n	800081c <ESP_GetData_2+0xa4>

	//while (!(Wait_for (":")));
	while (!(Wait_for ("is")));
 8000828:	bf00      	nop
 800082a:	4818      	ldr	r0, [pc, #96]	; (800088c <ESP_GetData_2+0x114>)
 800082c:	f000 fe08 	bl	8001440 <Wait_for>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d0f9      	beq.n	800082a <ESP_GetData_2+0xb2>
	while (!(Copy_upto ("C", local_buf2)));
 8000836:	bf00      	nop
 8000838:	f107 0308 	add.w	r3, r7, #8
 800083c:	4619      	mov	r1, r3
 800083e:	4814      	ldr	r0, [pc, #80]	; (8000890 <ESP_GetData_2+0x118>)
 8000840:	f000 fd8a 	bl	8001358 <Copy_upto>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d0f6      	beq.n	8000838 <ESP_GetData_2+0xc0>

	len = strlen (local_buf2);
 800084a:	f107 0308 	add.w	r3, r7, #8
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff fcbe 	bl	80001d0 <strlen>
 8000854:	4603      	mov	r3, r0
 8000856:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	snprintf (Total, len,local_buf2);
 800085a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800085e:	f107 0208 	add.w	r2, r7, #8
 8000862:	4619      	mov	r1, r3
 8000864:	6838      	ldr	r0, [r7, #0]
 8000866:	f002 fe81 	bl	800356c <sniprintf>
}
 800086a:	bf00      	nop
 800086c:	3790      	adds	r7, #144	; 0x90
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	08003ec8 	.word	0x08003ec8
 8000878:	08003ef4 	.word	0x08003ef4
 800087c:	08003f04 	.word	0x08003f04
 8000880:	08003f34 	.word	0x08003f34
 8000884:	08003f44 	.word	0x08003f44
 8000888:	08003f48 	.word	0x08003f48
 800088c:	08003f58 	.word	0x08003f58
 8000890:	08003f5c 	.word	0x08003f5c

08000894 <ESP_GetData_3>:

void ESP_GetData_3 (char *api_key, char *Total) /*, char *Deaths, char *Recovered)*/
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b0a4      	sub	sp, #144	; 0x90
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]
	char local_buf[100] = {0};
 800089e:	2300      	movs	r3, #0
 80008a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80008a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008a6:	2260      	movs	r2, #96	; 0x60
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f002 fe56 	bl	800355c <memset>
	char local_buf2[30] = {0};
 80008b0:	2300      	movs	r3, #0
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	f107 030c 	add.w	r3, r7, #12
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
 80008c4:	615a      	str	r2, [r3, #20]
 80008c6:	831a      	strh	r2, [r3, #24]
	//char local_buf3[30] = {0};

	Uart_sendstring("AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80\r\n");
 80008c8:	4831      	ldr	r0, [pc, #196]	; (8000990 <ESP_GetData_3+0xfc>)
 80008ca:	f000 fd15 	bl	80012f8 <Uart_sendstring>
	while (!(Wait_for("CONNECT\r\n\r\nOK\r\n")));
 80008ce:	bf00      	nop
 80008d0:	4830      	ldr	r0, [pc, #192]	; (8000994 <ESP_GetData_3+0x100>)
 80008d2:	f000 fdb5 	bl	8001440 <Wait_for>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d0f9      	beq.n	80008d0 <ESP_GetData_3+0x3c>

	sprintf (local_buf, "GET /apps/thinghttp/send_request?api_key=%s\r\n", api_key);
 80008dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008e0:	687a      	ldr	r2, [r7, #4]
 80008e2:	492d      	ldr	r1, [pc, #180]	; (8000998 <ESP_GetData_3+0x104>)
 80008e4:	4618      	mov	r0, r3
 80008e6:	f002 fe75 	bl	80035d4 <siprintf>
	int len = strlen (local_buf);
 80008ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff fc6e 	bl	80001d0 <strlen>
 80008f4:	4603      	mov	r3, r0
 80008f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	sprintf (local_buf2, "AT+CIPSEND=%d\r\n", len);
 80008fa:	f107 0308 	add.w	r3, r7, #8
 80008fe:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000902:	4926      	ldr	r1, [pc, #152]	; (800099c <ESP_GetData_3+0x108>)
 8000904:	4618      	mov	r0, r3
 8000906:	f002 fe65 	bl	80035d4 <siprintf>
	Uart_sendstring(local_buf2);
 800090a:	f107 0308 	add.w	r3, r7, #8
 800090e:	4618      	mov	r0, r3
 8000910:	f000 fcf2 	bl	80012f8 <Uart_sendstring>
	while (!(Wait_for(">")));
 8000914:	bf00      	nop
 8000916:	4822      	ldr	r0, [pc, #136]	; (80009a0 <ESP_GetData_3+0x10c>)
 8000918:	f000 fd92 	bl	8001440 <Wait_for>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d0f9      	beq.n	8000916 <ESP_GetData_3+0x82>

	bufclr(local_buf2);
 8000922:	f107 0308 	add.w	r3, r7, #8
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff fe26 	bl	8000578 <bufclr>

	Uart_sendstring (local_buf);
 800092c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000930:	4618      	mov	r0, r3
 8000932:	f000 fce1 	bl	80012f8 <Uart_sendstring>
	while (!(Wait_for("SEND OK\r\n")));
 8000936:	bf00      	nop
 8000938:	481a      	ldr	r0, [pc, #104]	; (80009a4 <ESP_GetData_3+0x110>)
 800093a:	f000 fd81 	bl	8001440 <Wait_for>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d0f9      	beq.n	8000938 <ESP_GetData_3+0xa4>

	while (!(Wait_for (":")));
 8000944:	bf00      	nop
 8000946:	4818      	ldr	r0, [pc, #96]	; (80009a8 <ESP_GetData_3+0x114>)
 8000948:	f000 fd7a 	bl	8001440 <Wait_for>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d0f9      	beq.n	8000946 <ESP_GetData_3+0xb2>
	//while (!(Wait_for (" ")));
	//while (!(Copy_upto ("o", local_buf2)));
	while (!(Copy_upto ("C", local_buf2)));
 8000952:	bf00      	nop
 8000954:	f107 0308 	add.w	r3, r7, #8
 8000958:	4619      	mov	r1, r3
 800095a:	4814      	ldr	r0, [pc, #80]	; (80009ac <ESP_GetData_3+0x118>)
 800095c:	f000 fcfc 	bl	8001358 <Copy_upto>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d0f6      	beq.n	8000954 <ESP_GetData_3+0xc0>

	len = strlen (local_buf2);
 8000966:	f107 0308 	add.w	r3, r7, #8
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff fc30 	bl	80001d0 <strlen>
 8000970:	4603      	mov	r3, r0
 8000972:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	snprintf (Total, len,local_buf2);
 8000976:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800097a:	f107 0208 	add.w	r2, r7, #8
 800097e:	4619      	mov	r1, r3
 8000980:	6838      	ldr	r0, [r7, #0]
 8000982:	f002 fdf3 	bl	800356c <sniprintf>
}
 8000986:	bf00      	nop
 8000988:	3790      	adds	r7, #144	; 0x90
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	08003ec8 	.word	0x08003ec8
 8000994:	08003ef4 	.word	0x08003ef4
 8000998:	08003f04 	.word	0x08003f04
 800099c:	08003f34 	.word	0x08003f34
 80009a0:	08003f44 	.word	0x08003f44
 80009a4:	08003f48 	.word	0x08003f48
 80009a8:	08003f60 	.word	0x08003f60
 80009ac:	08003f5c 	.word	0x08003f5c

080009b0 <ILI9341_SendCommand>:
};

//***** Functions prototypes *****//
//1. Write Command to LCD
void ILI9341_SendCommand(uint8_t com)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60000000) = com;
	uint8_t tmpCmd = com;
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	73fb      	strb	r3, [r7, #15]
	//Set DC HIGH for COMMAND mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_RESET);
 80009be:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <ILI9341_SendCommand+0x54>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a11      	ldr	r2, [pc, #68]	; (8000a08 <ILI9341_SendCommand+0x58>)
 80009c4:	8811      	ldrh	r1, [r2, #0]
 80009c6:	2200      	movs	r2, #0
 80009c8:	4618      	mov	r0, r3
 80009ca:	f001 fc87 	bl	80022dc <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 80009ce:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <ILI9341_SendCommand+0x5c>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a0f      	ldr	r2, [pc, #60]	; (8000a10 <ILI9341_SendCommand+0x60>)
 80009d4:	8811      	ldrh	r1, [r2, #0]
 80009d6:	2200      	movs	r2, #0
 80009d8:	4618      	mov	r0, r3
 80009da:	f001 fc7f 	bl	80022dc <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 5);
 80009de:	f107 010f 	add.w	r1, r7, #15
 80009e2:	2305      	movs	r3, #5
 80009e4:	2201      	movs	r2, #1
 80009e6:	480b      	ldr	r0, [pc, #44]	; (8000a14 <ILI9341_SendCommand+0x64>)
 80009e8:	f002 f963 	bl	8002cb2 <HAL_SPI_Transmit>
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 80009ec:	4b07      	ldr	r3, [pc, #28]	; (8000a0c <ILI9341_SendCommand+0x5c>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a07      	ldr	r2, [pc, #28]	; (8000a10 <ILI9341_SendCommand+0x60>)
 80009f2:	8811      	ldrh	r1, [r2, #0]
 80009f4:	2201      	movs	r2, #1
 80009f6:	4618      	mov	r0, r3
 80009f8:	f001 fc70 	bl	80022dc <HAL_GPIO_WritePin>
}
 80009fc:	bf00      	nop
 80009fe:	3710      	adds	r7, #16
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	200000f4 	.word	0x200000f4
 8000a08:	200000f8 	.word	0x200000f8
 8000a0c:	200000ec 	.word	0x200000ec
 8000a10:	200000f0 	.word	0x200000f0
 8000a14:	20000094 	.word	0x20000094

08000a18 <ILI9341_SendData>:

//2. Write data to LCD
void ILI9341_SendData(uint8_t data)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60040000) = data;
	uint8_t tmpCmd = data;
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	73fb      	strb	r3, [r7, #15]
	//Set DC LOW for DATA mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
 8000a26:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <ILI9341_SendData+0x54>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a11      	ldr	r2, [pc, #68]	; (8000a70 <ILI9341_SendData+0x58>)
 8000a2c:	8811      	ldrh	r1, [r2, #0]
 8000a2e:	2201      	movs	r2, #1
 8000a30:	4618      	mov	r0, r3
 8000a32:	f001 fc53 	bl	80022dc <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 8000a36:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <ILI9341_SendData+0x5c>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a0f      	ldr	r2, [pc, #60]	; (8000a78 <ILI9341_SendData+0x60>)
 8000a3c:	8811      	ldrh	r1, [r2, #0]
 8000a3e:	2200      	movs	r2, #0
 8000a40:	4618      	mov	r0, r3
 8000a42:	f001 fc4b 	bl	80022dc <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 5);
 8000a46:	f107 010f 	add.w	r1, r7, #15
 8000a4a:	2305      	movs	r3, #5
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	480b      	ldr	r0, [pc, #44]	; (8000a7c <ILI9341_SendData+0x64>)
 8000a50:	f002 f92f 	bl	8002cb2 <HAL_SPI_Transmit>
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 8000a54:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <ILI9341_SendData+0x5c>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a07      	ldr	r2, [pc, #28]	; (8000a78 <ILI9341_SendData+0x60>)
 8000a5a:	8811      	ldrh	r1, [r2, #0]
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f001 fc3c 	bl	80022dc <HAL_GPIO_WritePin>
}
 8000a64:	bf00      	nop
 8000a66:	3710      	adds	r7, #16
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	200000f4 	.word	0x200000f4
 8000a70:	200000f8 	.word	0x200000f8
 8000a74:	200000ec 	.word	0x200000ec
 8000a78:	200000f0 	.word	0x200000f0
 8000a7c:	20000094 	.word	0x20000094

08000a80 <ILI9341_SetCursorPosition>:
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}

//3. Set cursor position
void ILI9341_SetCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8000a80:	b590      	push	{r4, r7, lr}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4604      	mov	r4, r0
 8000a88:	4608      	mov	r0, r1
 8000a8a:	4611      	mov	r1, r2
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	4623      	mov	r3, r4
 8000a90:	80fb      	strh	r3, [r7, #6]
 8000a92:	4603      	mov	r3, r0
 8000a94:	80bb      	strh	r3, [r7, #4]
 8000a96:	460b      	mov	r3, r1
 8000a98:	807b      	strh	r3, [r7, #2]
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	803b      	strh	r3, [r7, #0]

  ILI9341_SendCommand (ILI9341_COLUMN_ADDR);
 8000a9e:	202a      	movs	r0, #42	; 0x2a
 8000aa0:	f7ff ff86 	bl	80009b0 <ILI9341_SendCommand>
  ILI9341_SendData(x1>>8);
 8000aa4:	88fb      	ldrh	r3, [r7, #6]
 8000aa6:	0a1b      	lsrs	r3, r3, #8
 8000aa8:	b29b      	uxth	r3, r3
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff ffb3 	bl	8000a18 <ILI9341_SendData>
  ILI9341_SendData(x1 & 0xFF);
 8000ab2:	88fb      	ldrh	r3, [r7, #6]
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff ffae 	bl	8000a18 <ILI9341_SendData>
  ILI9341_SendData(x2>>8);
 8000abc:	887b      	ldrh	r3, [r7, #2]
 8000abe:	0a1b      	lsrs	r3, r3, #8
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff ffa7 	bl	8000a18 <ILI9341_SendData>
  ILI9341_SendData(x2 & 0xFF);
 8000aca:	887b      	ldrh	r3, [r7, #2]
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff ffa2 	bl	8000a18 <ILI9341_SendData>

  ILI9341_SendCommand (ILI9341_PAGE_ADDR);
 8000ad4:	202b      	movs	r0, #43	; 0x2b
 8000ad6:	f7ff ff6b 	bl	80009b0 <ILI9341_SendCommand>
  ILI9341_SendData(y1>>8);
 8000ada:	88bb      	ldrh	r3, [r7, #4]
 8000adc:	0a1b      	lsrs	r3, r3, #8
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f7ff ff98 	bl	8000a18 <ILI9341_SendData>
  ILI9341_SendData(y1 & 0xFF);
 8000ae8:	88bb      	ldrh	r3, [r7, #4]
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff ff93 	bl	8000a18 <ILI9341_SendData>
  ILI9341_SendData(y2>>8);
 8000af2:	883b      	ldrh	r3, [r7, #0]
 8000af4:	0a1b      	lsrs	r3, r3, #8
 8000af6:	b29b      	uxth	r3, r3
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	4618      	mov	r0, r3
 8000afc:	f7ff ff8c 	bl	8000a18 <ILI9341_SendData>
  ILI9341_SendData(y2 & 0xFF);
 8000b00:	883b      	ldrh	r3, [r7, #0]
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff ff87 	bl	8000a18 <ILI9341_SendData>
  ILI9341_SendCommand (ILI9341_GRAM);
 8000b0a:	202c      	movs	r0, #44	; 0x2c
 8000b0c:	f7ff ff50 	bl	80009b0 <ILI9341_SendCommand>
}
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd90      	pop	{r4, r7, pc}

08000b18 <ILI9341_Init>:
//4. Initialise function
void ILI9341_Init(SPI_HandleTypeDef *spiLcdHandle, GPIO_TypeDef *csPORT, uint16_t csPIN, GPIO_TypeDef *dcPORT, uint16_t dcPIN, GPIO_TypeDef *resetPORT, uint16_t resetPIN)
 {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	60f8      	str	r0, [r7, #12]
 8000b20:	60b9      	str	r1, [r7, #8]
 8000b22:	603b      	str	r3, [r7, #0]
 8000b24:	4613      	mov	r3, r2
 8000b26:	80fb      	strh	r3, [r7, #6]
	 //Copy SPI settings
	 memcpy(&lcdSPIhandle, spiLcdHandle, sizeof(*spiLcdHandle));
 8000b28:	2258      	movs	r2, #88	; 0x58
 8000b2a:	68f9      	ldr	r1, [r7, #12]
 8000b2c:	4853      	ldr	r0, [pc, #332]	; (8000c7c <ILI9341_Init+0x164>)
 8000b2e:	f002 fd07 	bl	8003540 <memcpy>
	 //CS pin
	 tftCS_GPIO = csPORT;
 8000b32:	4a53      	ldr	r2, [pc, #332]	; (8000c80 <ILI9341_Init+0x168>)
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	6013      	str	r3, [r2, #0]
	 tftCS_PIN = csPIN;
 8000b38:	4a52      	ldr	r2, [pc, #328]	; (8000c84 <ILI9341_Init+0x16c>)
 8000b3a:	88fb      	ldrh	r3, [r7, #6]
 8000b3c:	8013      	strh	r3, [r2, #0]
	 //DC pin
	 tftDC_GPIO = dcPORT;
 8000b3e:	4a52      	ldr	r2, [pc, #328]	; (8000c88 <ILI9341_Init+0x170>)
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	6013      	str	r3, [r2, #0]
	 tftDC_PIN = dcPIN;
 8000b44:	4a51      	ldr	r2, [pc, #324]	; (8000c8c <ILI9341_Init+0x174>)
 8000b46:	8b3b      	ldrh	r3, [r7, #24]
 8000b48:	8013      	strh	r3, [r2, #0]
	 HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 8000b4a:	4b4d      	ldr	r3, [pc, #308]	; (8000c80 <ILI9341_Init+0x168>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a4d      	ldr	r2, [pc, #308]	; (8000c84 <ILI9341_Init+0x16c>)
 8000b50:	8811      	ldrh	r1, [r2, #0]
 8000b52:	2201      	movs	r2, #1
 8000b54:	4618      	mov	r0, r3
 8000b56:	f001 fbc1 	bl	80022dc <HAL_GPIO_WritePin>
	 //RESET pin
	 tftRESET_GPIO = resetPORT;
 8000b5a:	4a4d      	ldr	r2, [pc, #308]	; (8000c90 <ILI9341_Init+0x178>)
 8000b5c:	69fb      	ldr	r3, [r7, #28]
 8000b5e:	6013      	str	r3, [r2, #0]
	 tftRESET_PIN = resetPIN;
 8000b60:	4a4c      	ldr	r2, [pc, #304]	; (8000c94 <ILI9341_Init+0x17c>)
 8000b62:	8c3b      	ldrh	r3, [r7, #32]
 8000b64:	8013      	strh	r3, [r2, #0]
	 HAL_GPIO_WritePin(resetPORT, resetPIN, GPIO_PIN_SET);  //Turn LCD ON
 8000b66:	8c3b      	ldrh	r3, [r7, #32]
 8000b68:	2201      	movs	r2, #1
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	69f8      	ldr	r0, [r7, #28]
 8000b6e:	f001 fbb5 	bl	80022dc <HAL_GPIO_WritePin>

   ILI9341_SendCommand (ILI9341_RESET); // software reset comand
 8000b72:	2001      	movs	r0, #1
 8000b74:	f7ff ff1c 	bl	80009b0 <ILI9341_SendCommand>
   HAL_Delay(100);
 8000b78:	2064      	movs	r0, #100	; 0x64
 8000b7a:	f001 f8dd 	bl	8001d38 <HAL_Delay>
   ILI9341_SendCommand (ILI9341_DISPLAY_OFF); // display off
 8000b7e:	2028      	movs	r0, #40	; 0x28
 8000b80:	f7ff ff16 	bl	80009b0 <ILI9341_SendCommand>
   //------------power control------------------------------
   ILI9341_SendCommand (ILI9341_POWER1); // power control
 8000b84:	20c0      	movs	r0, #192	; 0xc0
 8000b86:	f7ff ff13 	bl	80009b0 <ILI9341_SendCommand>
   ILI9341_SendData   (0x26); // GVDD = 4.75v
 8000b8a:	2026      	movs	r0, #38	; 0x26
 8000b8c:	f7ff ff44 	bl	8000a18 <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_POWER2); // power control
 8000b90:	20c1      	movs	r0, #193	; 0xc1
 8000b92:	f7ff ff0d 	bl	80009b0 <ILI9341_SendCommand>
   ILI9341_SendData   (0x11); // AVDD=VCIx2, VGH=VCIx7, VGL=-VCIx3
 8000b96:	2011      	movs	r0, #17
 8000b98:	f7ff ff3e 	bl	8000a18 <ILI9341_SendData>
   //--------------VCOM-------------------------------------
   ILI9341_SendCommand (ILI9341_VCOM1); // vcom control
 8000b9c:	20c5      	movs	r0, #197	; 0xc5
 8000b9e:	f7ff ff07 	bl	80009b0 <ILI9341_SendCommand>
   ILI9341_SendData   (0x35); // Set the VCOMH voltage (0x35 = 4.025v)
 8000ba2:	2035      	movs	r0, #53	; 0x35
 8000ba4:	f7ff ff38 	bl	8000a18 <ILI9341_SendData>
   ILI9341_SendData   (0x3e); // Set the VCOML voltage (0x3E = -0.950v)
 8000ba8:	203e      	movs	r0, #62	; 0x3e
 8000baa:	f7ff ff35 	bl	8000a18 <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_VCOM2); // vcom control
 8000bae:	20c7      	movs	r0, #199	; 0xc7
 8000bb0:	f7ff fefe 	bl	80009b0 <ILI9341_SendCommand>
   ILI9341_SendData   (0xbe);
 8000bb4:	20be      	movs	r0, #190	; 0xbe
 8000bb6:	f7ff ff2f 	bl	8000a18 <ILI9341_SendData>

   //------------memory access control------------------------
   ILI9341_SendCommand (ILI9341_MAC); // memory access control
 8000bba:	2036      	movs	r0, #54	; 0x36
 8000bbc:	f7ff fef8 	bl	80009b0 <ILI9341_SendCommand>
   ILI9341_SendData(0x48);
 8000bc0:	2048      	movs	r0, #72	; 0x48
 8000bc2:	f7ff ff29 	bl	8000a18 <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_PIXEL_FORMAT); // pixel format set
 8000bc6:	203a      	movs	r0, #58	; 0x3a
 8000bc8:	f7ff fef2 	bl	80009b0 <ILI9341_SendCommand>
   ILI9341_SendData   (0x55); // 16bit /pixel
 8000bcc:	2055      	movs	r0, #85	; 0x55
 8000bce:	f7ff ff23 	bl	8000a18 <ILI9341_SendData>

	 ILI9341_SendCommand(ILI9341_FRC);
 8000bd2:	20b1      	movs	r0, #177	; 0xb1
 8000bd4:	f7ff feec 	bl	80009b0 <ILI9341_SendCommand>
   ILI9341_SendData(0);
 8000bd8:	2000      	movs	r0, #0
 8000bda:	f7ff ff1d 	bl	8000a18 <ILI9341_SendData>
   ILI9341_SendData(0x1F);
 8000bde:	201f      	movs	r0, #31
 8000be0:	f7ff ff1a 	bl	8000a18 <ILI9341_SendData>
   //-------------ddram ----------------------------
   ILI9341_SendCommand (ILI9341_COLUMN_ADDR); // column set
 8000be4:	202a      	movs	r0, #42	; 0x2a
 8000be6:	f7ff fee3 	bl	80009b0 <ILI9341_SendCommand>
   ILI9341_SendData   (0x00); // x0_HIGH---0
 8000bea:	2000      	movs	r0, #0
 8000bec:	f7ff ff14 	bl	8000a18 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // x0_LOW----0
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	f7ff ff11 	bl	8000a18 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // x1_HIGH---240
 8000bf6:	2000      	movs	r0, #0
 8000bf8:	f7ff ff0e 	bl	8000a18 <ILI9341_SendData>
   ILI9341_SendData   (0xEF); // x1_LOW----240
 8000bfc:	20ef      	movs	r0, #239	; 0xef
 8000bfe:	f7ff ff0b 	bl	8000a18 <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_PAGE_ADDR); // page address set
 8000c02:	202b      	movs	r0, #43	; 0x2b
 8000c04:	f7ff fed4 	bl	80009b0 <ILI9341_SendCommand>
   ILI9341_SendData   (0x00); // y0_HIGH---0
 8000c08:	2000      	movs	r0, #0
 8000c0a:	f7ff ff05 	bl	8000a18 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // y0_LOW----0
 8000c0e:	2000      	movs	r0, #0
 8000c10:	f7ff ff02 	bl	8000a18 <ILI9341_SendData>
   ILI9341_SendData   (0x01); // y1_HIGH---320
 8000c14:	2001      	movs	r0, #1
 8000c16:	f7ff feff 	bl	8000a18 <ILI9341_SendData>
   ILI9341_SendData   (0x3F); // y1_LOW----320
 8000c1a:	203f      	movs	r0, #63	; 0x3f
 8000c1c:	f7ff fefc 	bl	8000a18 <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_TEARING_OFF); // tearing effect off
 8000c20:	2034      	movs	r0, #52	; 0x34
 8000c22:	f7ff fec5 	bl	80009b0 <ILI9341_SendCommand>
   //LCD_write_cmd(ILI9341_TEARING_ON); // tearing effect on
   //LCD_write_cmd(ILI9341_DISPLAY_INVERSION); // display inversion
   ILI9341_SendCommand (ILI9341_Entry_Mode_Set); // entry mode set
 8000c26:	20b7      	movs	r0, #183	; 0xb7
 8000c28:	f7ff fec2 	bl	80009b0 <ILI9341_SendCommand>
   // Deep Standby Mode: OFF
   // Set the output level of gate driver G1-G320: Normal display
   // Low voltage detection: Disable
   ILI9341_SendData   (0x07);
 8000c2c:	2007      	movs	r0, #7
 8000c2e:	f7ff fef3 	bl	8000a18 <ILI9341_SendData>
   //-----------------display------------------------
   ILI9341_SendCommand (ILI9341_DFC); // display function control
 8000c32:	20b6      	movs	r0, #182	; 0xb6
 8000c34:	f7ff febc 	bl	80009b0 <ILI9341_SendCommand>
   //Set the scan mode in non-display area
   //Determine source/VCOM output in a non-display area in the partial display mode
   ILI9341_SendData   (0x0a);
 8000c38:	200a      	movs	r0, #10
 8000c3a:	f7ff feed 	bl	8000a18 <ILI9341_SendData>
   //Select whether the liquid crystal type is normally white type or normally black type
   //Sets the direction of scan by the gate driver in the range determined by SCN and NL
   //Select the shift direction of outputs from the source driver
   //Sets the gate driver pin arrangement in combination with the GS bit to select the optimal scan mode for the module
   //Specify the scan cycle interval of gate driver in non-display area when PTG to select interval scan
   ILI9341_SendData   (0x82);
 8000c3e:	2082      	movs	r0, #130	; 0x82
 8000c40:	f7ff feea 	bl	8000a18 <ILI9341_SendData>
   // Sets the number of lines to drive the LCD at an interval of 8 lines
   ILI9341_SendData   (0x27);
 8000c44:	2027      	movs	r0, #39	; 0x27
 8000c46:	f7ff fee7 	bl	8000a18 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // clock divisor
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	f7ff fee4 	bl	8000a18 <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_SLEEP_OUT); // sleep out
 8000c50:	2011      	movs	r0, #17
 8000c52:	f7ff fead 	bl	80009b0 <ILI9341_SendCommand>
   HAL_Delay(100);
 8000c56:	2064      	movs	r0, #100	; 0x64
 8000c58:	f001 f86e 	bl	8001d38 <HAL_Delay>
   ILI9341_SendCommand (ILI9341_DISPLAY_ON); // display on
 8000c5c:	2029      	movs	r0, #41	; 0x29
 8000c5e:	f7ff fea7 	bl	80009b0 <ILI9341_SendCommand>
   HAL_Delay(100);
 8000c62:	2064      	movs	r0, #100	; 0x64
 8000c64:	f001 f868 	bl	8001d38 <HAL_Delay>
   ILI9341_SendCommand (ILI9341_GRAM); // memory write
 8000c68:	202c      	movs	r0, #44	; 0x2c
 8000c6a:	f7ff fea1 	bl	80009b0 <ILI9341_SendCommand>
   HAL_Delay(5);
 8000c6e:	2005      	movs	r0, #5
 8000c70:	f001 f862 	bl	8001d38 <HAL_Delay>
 }
 8000c74:	bf00      	nop
 8000c76:	3710      	adds	r7, #16
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000094 	.word	0x20000094
 8000c80:	200000ec 	.word	0x200000ec
 8000c84:	200000f0 	.word	0x200000f0
 8000c88:	200000f4 	.word	0x200000f4
 8000c8c:	200000f8 	.word	0x200000f8
 8000c90:	200000fc 	.word	0x200000fc
 8000c94:	20000100 	.word	0x20000100

08000c98 <ILI9341_DrawPixel>:

//5. Write data to a single pixel
void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	80fb      	strh	r3, [r7, #6]
 8000ca2:	460b      	mov	r3, r1
 8000ca4:	80bb      	strh	r3, [r7, #4]
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	807b      	strh	r3, [r7, #2]
  ILI9341_SetCursorPosition(x, y, x, y);
 8000caa:	88bb      	ldrh	r3, [r7, #4]
 8000cac:	88fa      	ldrh	r2, [r7, #6]
 8000cae:	88b9      	ldrh	r1, [r7, #4]
 8000cb0:	88f8      	ldrh	r0, [r7, #6]
 8000cb2:	f7ff fee5 	bl	8000a80 <ILI9341_SetCursorPosition>
	ILI9341_SendData(color>>8);
 8000cb6:	887b      	ldrh	r3, [r7, #2]
 8000cb8:	0a1b      	lsrs	r3, r3, #8
 8000cba:	b29b      	uxth	r3, r3
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff feaa 	bl	8000a18 <ILI9341_SendData>
	ILI9341_SendData(color&0xFF);
 8000cc4:	887b      	ldrh	r3, [r7, #2]
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff fea5 	bl	8000a18 <ILI9341_SendData>
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
	...

08000cd8 <ILI9341_Fill>:
//6. Fill the entire screen with a background color
void ILI9341_Fill(uint16_t color) {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	80fb      	strh	r3, [r7, #6]
	uint32_t n = ILI9341_PIXEL_COUNT;
 8000ce2:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8000ce6:	60fb      	str	r3, [r7, #12]
	uint16_t myColor = 0xFF;
 8000ce8:	23ff      	movs	r3, #255	; 0xff
 8000cea:	817b      	strh	r3, [r7, #10]

	if(rotationNum==1 || rotationNum==3)
 8000cec:	4b1b      	ldr	r3, [pc, #108]	; (8000d5c <ILI9341_Fill+0x84>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d003      	beq.n	8000cfc <ILI9341_Fill+0x24>
 8000cf4:	4b19      	ldr	r3, [pc, #100]	; (8000d5c <ILI9341_Fill+0x84>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d107      	bne.n	8000d0c <ILI9341_Fill+0x34>
	{
		ILI9341_SetCursorPosition(0, 0,   ILI9341_WIDTH -1, ILI9341_HEIGHT -1);
 8000cfc:	f240 133f 	movw	r3, #319	; 0x13f
 8000d00:	22ef      	movs	r2, #239	; 0xef
 8000d02:	2100      	movs	r1, #0
 8000d04:	2000      	movs	r0, #0
 8000d06:	f7ff febb 	bl	8000a80 <ILI9341_SetCursorPosition>
 8000d0a:	e00e      	b.n	8000d2a <ILI9341_Fill+0x52>
	}
	else if(rotationNum==2 || rotationNum==4)
 8000d0c:	4b13      	ldr	r3, [pc, #76]	; (8000d5c <ILI9341_Fill+0x84>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b02      	cmp	r3, #2
 8000d12:	d003      	beq.n	8000d1c <ILI9341_Fill+0x44>
 8000d14:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <ILI9341_Fill+0x84>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2b04      	cmp	r3, #4
 8000d1a:	d116      	bne.n	8000d4a <ILI9341_Fill+0x72>
	{
		ILI9341_SetCursorPosition(0, 0, ILI9341_HEIGHT -1, ILI9341_WIDTH -1);
 8000d1c:	23ef      	movs	r3, #239	; 0xef
 8000d1e:	f240 123f 	movw	r2, #319	; 0x13f
 8000d22:	2100      	movs	r1, #0
 8000d24:	2000      	movs	r0, #0
 8000d26:	f7ff feab 	bl	8000a80 <ILI9341_SetCursorPosition>
	}


	while (n) {
 8000d2a:	e00e      	b.n	8000d4a <ILI9341_Fill+0x72>
			n--;
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	60fb      	str	r3, [r7, #12]
       ILI9341_SendData(color>>8);
 8000d32:	88fb      	ldrh	r3, [r7, #6]
 8000d34:	0a1b      	lsrs	r3, r3, #8
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff fe6c 	bl	8000a18 <ILI9341_SendData>
				ILI9341_SendData(color&0xff);
 8000d40:	88fb      	ldrh	r3, [r7, #6]
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff fe67 	bl	8000a18 <ILI9341_SendData>
	while (n) {
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d1ed      	bne.n	8000d2c <ILI9341_Fill+0x54>
	}
}
 8000d50:	bf00      	nop
 8000d52:	bf00      	nop
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000000 	.word	0x20000000

08000d60 <ILI9341_Fill_Rect>:
//7. Rectangle drawing functions
void ILI9341_Fill_Rect(unsigned int x0,unsigned int y0, unsigned int x1,unsigned int y1, uint16_t color) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	607a      	str	r2, [r7, #4]
 8000d6c:	603b      	str	r3, [r7, #0]
	uint32_t n = ((x1+1)-x0)*((y1+1)-y0);
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	1ad3      	subs	r3, r2, r3
 8000d74:	3301      	adds	r3, #1
 8000d76:	6839      	ldr	r1, [r7, #0]
 8000d78:	68ba      	ldr	r2, [r7, #8]
 8000d7a:	1a8a      	subs	r2, r1, r2
 8000d7c:	3201      	adds	r2, #1
 8000d7e:	fb02 f303 	mul.w	r3, r2, r3
 8000d82:	617b      	str	r3, [r7, #20]
	if (n>ILI9341_PIXEL_COUNT) n=ILI9341_PIXEL_COUNT;
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 8000d8a:	d902      	bls.n	8000d92 <ILI9341_Fill_Rect+0x32>
 8000d8c:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8000d90:	617b      	str	r3, [r7, #20]
	ILI9341_SetCursorPosition(x0, y0, x1, y1);
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	b298      	uxth	r0, r3
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	b299      	uxth	r1, r3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	b29a      	uxth	r2, r3
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	b29b      	uxth	r3, r3
 8000da2:	f7ff fe6d 	bl	8000a80 <ILI9341_SetCursorPosition>
	while (n) {
 8000da6:	e00e      	b.n	8000dc6 <ILI9341_Fill_Rect+0x66>
			n--;
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	3b01      	subs	r3, #1
 8000dac:	617b      	str	r3, [r7, #20]
      ILI9341_SendData(color>>8);
 8000dae:	8c3b      	ldrh	r3, [r7, #32]
 8000db0:	0a1b      	lsrs	r3, r3, #8
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff fe2e 	bl	8000a18 <ILI9341_SendData>
				ILI9341_SendData(color&0xff);
 8000dbc:	8c3b      	ldrh	r3, [r7, #32]
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff fe29 	bl	8000a18 <ILI9341_SendData>
	while (n) {
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d1ed      	bne.n	8000da8 <ILI9341_Fill_Rect+0x48>
	}
}
 8000dcc:	bf00      	nop
 8000dce:	bf00      	nop
 8000dd0:	3718      	adds	r7, #24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
	...

08000dd8 <ILI9341_drawChar>:
	}
}

//11. Text printing functions
void ILI9341_drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 8000dd8:	b5b0      	push	{r4, r5, r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af02      	add	r7, sp, #8
 8000dde:	4604      	mov	r4, r0
 8000de0:	4608      	mov	r0, r1
 8000de2:	4611      	mov	r1, r2
 8000de4:	461a      	mov	r2, r3
 8000de6:	4623      	mov	r3, r4
 8000de8:	80fb      	strh	r3, [r7, #6]
 8000dea:	4603      	mov	r3, r0
 8000dec:	80bb      	strh	r3, [r7, #4]
 8000dee:	460b      	mov	r3, r1
 8000df0:	70fb      	strb	r3, [r7, #3]
 8000df2:	4613      	mov	r3, r2
 8000df4:	803b      	strh	r3, [r7, #0]
	if(rotationNum == 1 || rotationNum ==3)
 8000df6:	4b98      	ldr	r3, [pc, #608]	; (8001058 <ILI9341_drawChar+0x280>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d003      	beq.n	8000e06 <ILI9341_drawChar+0x2e>
 8000dfe:	4b96      	ldr	r3, [pc, #600]	; (8001058 <ILI9341_drawChar+0x280>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	2b03      	cmp	r3, #3
 8000e04:	d11f      	bne.n	8000e46 <ILI9341_drawChar+0x6e>
	{
		if((x >= ILI9341_WIDTH)            || // Clip right
 8000e06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e0a:	2bef      	cmp	r3, #239	; 0xef
 8000e0c:	f300 811d 	bgt.w	800104a <ILI9341_drawChar+0x272>
 8000e10:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e14:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000e18:	f280 8117 	bge.w	800104a <ILI9341_drawChar+0x272>
     (y >= ILI9341_HEIGHT)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
 8000e1c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000e20:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000e24:	4613      	mov	r3, r2
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	4413      	add	r3, r2
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	440b      	add	r3, r1
     (y >= ILI9341_HEIGHT)           || // Clip bottom
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f340 810b 	ble.w	800104a <ILI9341_drawChar+0x272>
     ((y + 8 * size - 1) < 0))   // Clip top
 8000e34:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000e38:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000e3c:	00db      	lsls	r3, r3, #3
 8000e3e:	4413      	add	r3, r2
     ((x + 6 * size - 1) < 0) || // Clip left
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	dc21      	bgt.n	8000e88 <ILI9341_drawChar+0xb0>
    return;
 8000e44:	e101      	b.n	800104a <ILI9341_drawChar+0x272>
	}
	else
	{
		if((y >= ILI9341_WIDTH)            || // Clip right
 8000e46:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e4a:	2bef      	cmp	r3, #239	; 0xef
 8000e4c:	f300 80ff 	bgt.w	800104e <ILI9341_drawChar+0x276>
 8000e50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e54:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000e58:	f280 80f9 	bge.w	800104e <ILI9341_drawChar+0x276>
     (x >= ILI9341_HEIGHT)           || // Clip bottom
     ((y + 6 * size - 1) < 0) || // Clip left
 8000e5c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000e60:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000e64:	4613      	mov	r3, r2
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	4413      	add	r3, r2
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	440b      	add	r3, r1
     (x >= ILI9341_HEIGHT)           || // Clip bottom
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	f340 80ed 	ble.w	800104e <ILI9341_drawChar+0x276>
     ((x + 8 * size - 1) < 0))   // Clip top
 8000e74:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000e78:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000e7c:	00db      	lsls	r3, r3, #3
 8000e7e:	4413      	add	r3, r2
     ((y + 6 * size - 1) < 0) || // Clip left
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	f340 80e4 	ble.w	800104e <ILI9341_drawChar+0x276>
 8000e86:	e000      	b.n	8000e8a <ILI9341_drawChar+0xb2>
		if((x >= ILI9341_WIDTH)            || // Clip right
 8000e88:	bf00      	nop
    return;
	}


  if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 8000e8a:	4b74      	ldr	r3, [pc, #464]	; (800105c <ILI9341_drawChar+0x284>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	f083 0301 	eor.w	r3, r3, #1
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d005      	beq.n	8000ea4 <ILI9341_drawChar+0xcc>
 8000e98:	78fb      	ldrb	r3, [r7, #3]
 8000e9a:	2baf      	cmp	r3, #175	; 0xaf
 8000e9c:	d902      	bls.n	8000ea4 <ILI9341_drawChar+0xcc>
 8000e9e:	78fb      	ldrb	r3, [r7, #3]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	70fb      	strb	r3, [r7, #3]

  for (int8_t i=0; i<6; i++ ) {
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	73fb      	strb	r3, [r7, #15]
 8000ea8:	e0c9      	b.n	800103e <ILI9341_drawChar+0x266>
    uint8_t line;
    if (i == 5)
 8000eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eae:	2b05      	cmp	r3, #5
 8000eb0:	d102      	bne.n	8000eb8 <ILI9341_drawChar+0xe0>
      line = 0x0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	73bb      	strb	r3, [r7, #14]
 8000eb6:	e00b      	b.n	8000ed0 <ILI9341_drawChar+0xf8>
    else
      line = pgm_read_byte(font1+(c*5)+i);
 8000eb8:	78fa      	ldrb	r2, [r7, #3]
 8000eba:	4613      	mov	r3, r2
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	4413      	add	r3, r2
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	4a65      	ldr	r2, [pc, #404]	; (8001060 <ILI9341_drawChar+0x288>)
 8000eca:	4413      	add	r3, r2
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	737b      	strb	r3, [r7, #13]
 8000ed4:	e0a8      	b.n	8001028 <ILI9341_drawChar+0x250>
      if (line & 0x1) {
 8000ed6:	7bbb      	ldrb	r3, [r7, #14]
 8000ed8:	f003 0301 	and.w	r3, r3, #1
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d04b      	beq.n	8000f78 <ILI9341_drawChar+0x1a0>
        if (size == 1) // default size
 8000ee0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d110      	bne.n	8000f0a <ILI9341_drawChar+0x132>
          ILI9341_DrawPixel(x+i, y+j, color);
 8000ee8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eec:	b29a      	uxth	r2, r3
 8000eee:	88fb      	ldrh	r3, [r7, #6]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	b298      	uxth	r0, r3
 8000ef4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000ef8:	b29a      	uxth	r2, r3
 8000efa:	88bb      	ldrh	r3, [r7, #4]
 8000efc:	4413      	add	r3, r2
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	883a      	ldrh	r2, [r7, #0]
 8000f02:	4619      	mov	r1, r3
 8000f04:	f7ff fec8 	bl	8000c98 <ILI9341_DrawPixel>
 8000f08:	e085      	b.n	8001016 <ILI9341_drawChar+0x23e>
        else {  // big size
          ILI9341_Fill_Rect(x+(i*size), y+(j*size), size + x+(i*size), size+1 + y+(j*size), color);
 8000f0a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f12:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000f16:	fb01 f303 	mul.w	r3, r1, r3
 8000f1a:	4413      	add	r3, r2
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000f22:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000f26:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000f2a:	fb01 f303 	mul.w	r3, r1, r3
 8000f2e:	4413      	add	r3, r2
 8000f30:	461c      	mov	r4, r3
 8000f32:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000f36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f3a:	441a      	add	r2, r3
 8000f3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f40:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000f44:	fb01 f303 	mul.w	r3, r1, r3
 8000f48:	4413      	add	r3, r2
 8000f4a:	461d      	mov	r5, r3
 8000f4c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000f50:	1c5a      	adds	r2, r3, #1
 8000f52:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f56:	441a      	add	r2, r3
 8000f58:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000f5c:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000f60:	fb01 f303 	mul.w	r3, r1, r3
 8000f64:	4413      	add	r3, r2
 8000f66:	461a      	mov	r2, r3
 8000f68:	883b      	ldrh	r3, [r7, #0]
 8000f6a:	9300      	str	r3, [sp, #0]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	462a      	mov	r2, r5
 8000f70:	4621      	mov	r1, r4
 8000f72:	f7ff fef5 	bl	8000d60 <ILI9341_Fill_Rect>
 8000f76:	e04e      	b.n	8001016 <ILI9341_drawChar+0x23e>
        }
      } else if (bg != color) {
 8000f78:	8c3a      	ldrh	r2, [r7, #32]
 8000f7a:	883b      	ldrh	r3, [r7, #0]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d04a      	beq.n	8001016 <ILI9341_drawChar+0x23e>
        if (size == 1) // default size
 8000f80:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d110      	bne.n	8000faa <ILI9341_drawChar+0x1d2>
          ILI9341_DrawPixel(x+i, y+j, bg);
 8000f88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f8c:	b29a      	uxth	r2, r3
 8000f8e:	88fb      	ldrh	r3, [r7, #6]
 8000f90:	4413      	add	r3, r2
 8000f92:	b298      	uxth	r0, r3
 8000f94:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	88bb      	ldrh	r3, [r7, #4]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	8c3a      	ldrh	r2, [r7, #32]
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	f7ff fe78 	bl	8000c98 <ILI9341_DrawPixel>
 8000fa8:	e035      	b.n	8001016 <ILI9341_drawChar+0x23e>
        else {  // big size
          ILI9341_Fill_Rect(x+i*size, y+j*size, size + x+i*size, size+1 + y+j*size, bg);
 8000faa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb2:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000fb6:	fb01 f303 	mul.w	r3, r1, r3
 8000fba:	4413      	add	r3, r2
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000fc2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000fc6:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000fca:	fb01 f303 	mul.w	r3, r1, r3
 8000fce:	4413      	add	r3, r2
 8000fd0:	461c      	mov	r4, r3
 8000fd2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000fd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fda:	441a      	add	r2, r3
 8000fdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe0:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000fe4:	fb01 f303 	mul.w	r3, r1, r3
 8000fe8:	4413      	add	r3, r2
 8000fea:	461d      	mov	r5, r3
 8000fec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000ff0:	1c5a      	adds	r2, r3, #1
 8000ff2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ff6:	441a      	add	r2, r3
 8000ff8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000ffc:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8001000:	fb01 f303 	mul.w	r3, r1, r3
 8001004:	4413      	add	r3, r2
 8001006:	461a      	mov	r2, r3
 8001008:	8c3b      	ldrh	r3, [r7, #32]
 800100a:	9300      	str	r3, [sp, #0]
 800100c:	4613      	mov	r3, r2
 800100e:	462a      	mov	r2, r5
 8001010:	4621      	mov	r1, r4
 8001012:	f7ff fea5 	bl	8000d60 <ILI9341_Fill_Rect>
        }
      }
      line >>= 1;
 8001016:	7bbb      	ldrb	r3, [r7, #14]
 8001018:	085b      	lsrs	r3, r3, #1
 800101a:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 800101c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001020:	b2db      	uxtb	r3, r3
 8001022:	3301      	adds	r3, #1
 8001024:	b2db      	uxtb	r3, r3
 8001026:	737b      	strb	r3, [r7, #13]
 8001028:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800102c:	2b07      	cmp	r3, #7
 800102e:	f77f af52 	ble.w	8000ed6 <ILI9341_drawChar+0xfe>
  for (int8_t i=0; i<6; i++ ) {
 8001032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001036:	b2db      	uxtb	r3, r3
 8001038:	3301      	adds	r3, #1
 800103a:	b2db      	uxtb	r3, r3
 800103c:	73fb      	strb	r3, [r7, #15]
 800103e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001042:	2b05      	cmp	r3, #5
 8001044:	f77f af31 	ble.w	8000eaa <ILI9341_drawChar+0xd2>
 8001048:	e002      	b.n	8001050 <ILI9341_drawChar+0x278>
    return;
 800104a:	bf00      	nop
 800104c:	e000      	b.n	8001050 <ILI9341_drawChar+0x278>
    return;
 800104e:	bf00      	nop
    }
  }
}
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bdb0      	pop	{r4, r5, r7, pc}
 8001056:	bf00      	nop
 8001058:	20000000 	.word	0x20000000
 800105c:	20000090 	.word	0x20000090
 8001060:	0800400c 	.word	0x0800400c

08001064 <ILI9341_printText>:
void ILI9341_printText(char text[], int16_t x, int16_t y, uint16_t color, uint16_t bg, uint8_t size)
{
 8001064:	b590      	push	{r4, r7, lr}
 8001066:	b089      	sub	sp, #36	; 0x24
 8001068:	af02      	add	r7, sp, #8
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	4608      	mov	r0, r1
 800106e:	4611      	mov	r1, r2
 8001070:	461a      	mov	r2, r3
 8001072:	4603      	mov	r3, r0
 8001074:	817b      	strh	r3, [r7, #10]
 8001076:	460b      	mov	r3, r1
 8001078:	813b      	strh	r3, [r7, #8]
 800107a:	4613      	mov	r3, r2
 800107c:	80fb      	strh	r3, [r7, #6]
	int16_t offset;
	offset = size*6; //6
 800107e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001082:	b29b      	uxth	r3, r3
 8001084:	461a      	mov	r2, r3
 8001086:	0052      	lsls	r2, r2, #1
 8001088:	4413      	add	r3, r2
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	b29b      	uxth	r3, r3
 800108e:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i=0; i<60 && text[i]!=NULL; i++) //40
 8001090:	2300      	movs	r3, #0
 8001092:	82fb      	strh	r3, [r7, #22]
 8001094:	e01a      	b.n	80010cc <ILI9341_printText+0x68>
	{
		ILI9341_drawChar(x+(offset*i), y, text[i],color,bg,size);
 8001096:	8abb      	ldrh	r3, [r7, #20]
 8001098:	8afa      	ldrh	r2, [r7, #22]
 800109a:	fb12 f303 	smulbb	r3, r2, r3
 800109e:	b29a      	uxth	r2, r3
 80010a0:	897b      	ldrh	r3, [r7, #10]
 80010a2:	4413      	add	r3, r2
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	b218      	sxth	r0, r3
 80010a8:	8afb      	ldrh	r3, [r7, #22]
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	4413      	add	r3, r2
 80010ae:	781a      	ldrb	r2, [r3, #0]
 80010b0:	88fc      	ldrh	r4, [r7, #6]
 80010b2:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 80010b6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80010ba:	9301      	str	r3, [sp, #4]
 80010bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	4623      	mov	r3, r4
 80010c2:	f7ff fe89 	bl	8000dd8 <ILI9341_drawChar>
	for(uint16_t i=0; i<60 && text[i]!=NULL; i++) //40
 80010c6:	8afb      	ldrh	r3, [r7, #22]
 80010c8:	3301      	adds	r3, #1
 80010ca:	82fb      	strh	r3, [r7, #22]
 80010cc:	8afb      	ldrh	r3, [r7, #22]
 80010ce:	2b3b      	cmp	r3, #59	; 0x3b
 80010d0:	d805      	bhi.n	80010de <ILI9341_printText+0x7a>
 80010d2:	8afb      	ldrh	r3, [r7, #22]
 80010d4:	68fa      	ldr	r2, [r7, #12]
 80010d6:	4413      	add	r3, r2
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d1db      	bne.n	8001096 <ILI9341_printText+0x32>
	}
}
 80010de:	bf00      	nop
 80010e0:	371c      	adds	r7, #28
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd90      	pop	{r4, r7, pc}
	...

080010e8 <ILI9341_setRotation>:
	}
}

//13. Set screen rotation
void ILI9341_setRotation(uint8_t rotate)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	71fb      	strb	r3, [r7, #7]
	switch(rotate)
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	3b01      	subs	r3, #1
 80010f6:	2b03      	cmp	r3, #3
 80010f8:	d832      	bhi.n	8001160 <ILI9341_setRotation+0x78>
 80010fa:	a201      	add	r2, pc, #4	; (adr r2, 8001100 <ILI9341_setRotation+0x18>)
 80010fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001100:	08001111 	.word	0x08001111
 8001104:	08001125 	.word	0x08001125
 8001108:	08001139 	.word	0x08001139
 800110c:	0800114d 	.word	0x0800114d
	{
		case 1:
			rotationNum = 1;
 8001110:	4b1a      	ldr	r3, [pc, #104]	; (800117c <ILI9341_setRotation+0x94>)
 8001112:	2201      	movs	r2, #1
 8001114:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8001116:	2036      	movs	r0, #54	; 0x36
 8001118:	f7ff fc4a 	bl	80009b0 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 800111c:	2088      	movs	r0, #136	; 0x88
 800111e:	f7ff fc7b 	bl	8000a18 <ILI9341_SendData>
			break;
 8001122:	e027      	b.n	8001174 <ILI9341_setRotation+0x8c>
		case 2:
			rotationNum = 2;
 8001124:	4b15      	ldr	r3, [pc, #84]	; (800117c <ILI9341_setRotation+0x94>)
 8001126:	2202      	movs	r2, #2
 8001128:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 800112a:	2036      	movs	r0, #54	; 0x36
 800112c:	f7ff fc40 	bl	80009b0 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 8001130:	2028      	movs	r0, #40	; 0x28
 8001132:	f7ff fc71 	bl	8000a18 <ILI9341_SendData>
			break;
 8001136:	e01d      	b.n	8001174 <ILI9341_setRotation+0x8c>
		case 3:
			rotationNum = 3;
 8001138:	4b10      	ldr	r3, [pc, #64]	; (800117c <ILI9341_setRotation+0x94>)
 800113a:	2203      	movs	r2, #3
 800113c:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 800113e:	2036      	movs	r0, #54	; 0x36
 8001140:	f7ff fc36 	bl	80009b0 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
 8001144:	2048      	movs	r0, #72	; 0x48
 8001146:	f7ff fc67 	bl	8000a18 <ILI9341_SendData>
			break;
 800114a:	e013      	b.n	8001174 <ILI9341_setRotation+0x8c>
		case 4:
			rotationNum = 4;
 800114c:	4b0b      	ldr	r3, [pc, #44]	; (800117c <ILI9341_setRotation+0x94>)
 800114e:	2204      	movs	r2, #4
 8001150:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8001152:	2036      	movs	r0, #54	; 0x36
 8001154:	f7ff fc2c 	bl	80009b0 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 8001158:	20e8      	movs	r0, #232	; 0xe8
 800115a:	f7ff fc5d 	bl	8000a18 <ILI9341_SendData>
			break;
 800115e:	e009      	b.n	8001174 <ILI9341_setRotation+0x8c>
		default:
			rotationNum = 1;
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <ILI9341_setRotation+0x94>)
 8001162:	2201      	movs	r2, #1
 8001164:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8001166:	2036      	movs	r0, #54	; 0x36
 8001168:	f7ff fc22 	bl	80009b0 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 800116c:	2088      	movs	r0, #136	; 0x88
 800116e:	f7ff fc53 	bl	8000a18 <ILI9341_SendData>
			break;
 8001172:	bf00      	nop
	}
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20000000 	.word	0x20000000

08001180 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8001184:	4b0d      	ldr	r3, [pc, #52]	; (80011bc <Ringbuf_init+0x3c>)
 8001186:	4a0e      	ldr	r2, [pc, #56]	; (80011c0 <Ringbuf_init+0x40>)
 8001188:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 800118a:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <Ringbuf_init+0x44>)
 800118c:	4a0e      	ldr	r2, [pc, #56]	; (80011c8 <Ringbuf_init+0x48>)
 800118e:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8001190:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <Ringbuf_init+0x4c>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	695a      	ldr	r2, [r3, #20]
 8001196:	4b0d      	ldr	r3, [pc, #52]	; (80011cc <Ringbuf_init+0x4c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f042 0201 	orr.w	r2, r2, #1
 800119e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 80011a0:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <Ringbuf_init+0x4c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	68da      	ldr	r2, [r3, #12]
 80011a6:	4b09      	ldr	r3, [pc, #36]	; (80011cc <Ringbuf_init+0x4c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f042 0220 	orr.w	r2, r2, #32
 80011ae:	60da      	str	r2, [r3, #12]
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	200001a4 	.word	0x200001a4
 80011c0:	20000104 	.word	0x20000104
 80011c4:	200001a0 	.word	0x200001a0
 80011c8:	2000014c 	.word	0x2000014c
 80011cc:	200001a8 	.word	0x200001a8

080011d0 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	6039      	str	r1, [r7, #0]
 80011da:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e0:	3301      	adds	r3, #1
 80011e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011e6:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d007      	beq.n	8001202 <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	683a      	ldr	r2, [r7, #0]
 80011f8:	79f9      	ldrb	r1, [r7, #7]
 80011fa:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 80011fc:	68fa      	ldr	r2, [r7, #12]
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 8001202:	bf00      	nop
 8001204:	3714      	adds	r7, #20
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
	...

08001210 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8001216:	4b11      	ldr	r3, [pc, #68]	; (800125c <Uart_read+0x4c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800121c:	4b0f      	ldr	r3, [pc, #60]	; (800125c <Uart_read+0x4c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001222:	429a      	cmp	r2, r3
 8001224:	d102      	bne.n	800122c <Uart_read+0x1c>
  {
    return -1;
 8001226:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800122a:	e010      	b.n	800124e <Uart_read+0x3e>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 800122c:	4b0b      	ldr	r3, [pc, #44]	; (800125c <Uart_read+0x4c>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	4b0a      	ldr	r3, [pc, #40]	; (800125c <Uart_read+0x4c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001236:	5cd3      	ldrb	r3, [r2, r3]
 8001238:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 800123a:	4b08      	ldr	r3, [pc, #32]	; (800125c <Uart_read+0x4c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001240:	1c5a      	adds	r2, r3, #1
 8001242:	4b06      	ldr	r3, [pc, #24]	; (800125c <Uart_read+0x4c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800124a:	645a      	str	r2, [r3, #68]	; 0x44
    return c;
 800124c:	79fb      	ldrb	r3, [r7, #7]
  }
}
 800124e:	4618      	mov	r0, r3
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	200001a4 	.word	0x200001a4

08001260 <Uart_write>:

void Uart_write(int c)
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
	if (c>=0)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	db21      	blt.n	80012b2 <Uart_write+0x52>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 800126e:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <Uart_write+0x60>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001274:	3301      	adds	r3, #1
 8001276:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800127a:	60fb      	str	r3, [r7, #12]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer->tail);
 800127c:	bf00      	nop
 800127e:	4b10      	ldr	r3, [pc, #64]	; (80012c0 <Uart_write+0x60>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	429a      	cmp	r2, r3
 8001288:	d0f9      	beq.n	800127e <Uart_write+0x1e>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 800128a:	4b0d      	ldr	r3, [pc, #52]	; (80012c0 <Uart_write+0x60>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <Uart_write+0x60>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001294:	6879      	ldr	r1, [r7, #4]
 8001296:	b2c9      	uxtb	r1, r1
 8001298:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 800129a:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <Uart_write+0x60>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	68fa      	ldr	r2, [r7, #12]
 80012a0:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_UART_ENABLE_IT(uart, UART_IT_TXE); // Enable UART transmission interrupt
 80012a2:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <Uart_write+0x64>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	68da      	ldr	r2, [r3, #12]
 80012a8:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <Uart_write+0x64>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80012b0:	60da      	str	r2, [r3, #12]
	}
}
 80012b2:	bf00      	nop
 80012b4:	3714      	adds	r7, #20
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	200001a0 	.word	0x200001a0
 80012c4:	200001a8 	.word	0x200001a8

080012c8 <IsDataAvailable>:

int IsDataAvailable(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 80012cc:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <IsDataAvailable+0x2c>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <IsDataAvailable+0x2c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012da:	b29b      	uxth	r3, r3
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	b29b      	uxth	r3, r3
 80012e0:	3340      	adds	r3, #64	; 0x40
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	200001a4 	.word	0x200001a4

080012f8 <Uart_sendstring>:

void Uart_sendstring (const char *s)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
	while(*s) Uart_write(*s++);
 8001300:	e006      	b.n	8001310 <Uart_sendstring+0x18>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	1c5a      	adds	r2, r3, #1
 8001306:	607a      	str	r2, [r7, #4]
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff ffa8 	bl	8001260 <Uart_write>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d1f4      	bne.n	8001302 <Uart_sendstring+0xa>
}
 8001318:	bf00      	nop
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
	...

08001324 <Uart_peek>:

  while(*s) Uart_write(*s++);
}

int Uart_peek()
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 8001328:	4b0a      	ldr	r3, [pc, #40]	; (8001354 <Uart_peek+0x30>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800132e:	4b09      	ldr	r3, [pc, #36]	; (8001354 <Uart_peek+0x30>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001334:	429a      	cmp	r2, r3
 8001336:	d102      	bne.n	800133e <Uart_peek+0x1a>
  {
    return -1;
 8001338:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800133c:	e005      	b.n	800134a <Uart_peek+0x26>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 800133e:	4b05      	ldr	r3, [pc, #20]	; (8001354 <Uart_peek+0x30>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	4b04      	ldr	r3, [pc, #16]	; (8001354 <Uart_peek+0x30>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001348:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 800134a:	4618      	mov	r0, r3
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	200001a4 	.word	0x200001a4

08001358 <Copy_upto>:

char local_buf[100] = {0};

int Copy_upto (char *string, char *buffertocopyinto)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8001362:	2300      	movs	r3, #0
 8001364:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f7fe ff32 	bl	80001d0 <strlen>
 800136c:	4603      	mov	r3, r0
 800136e:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	613b      	str	r3, [r7, #16]

again:
	while (!IsDataAvailable());
 8001374:	bf00      	nop
 8001376:	f7ff ffa7 	bl	80012c8 <IsDataAvailable>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d0fa      	beq.n	8001376 <Copy_upto+0x1e>
	while (Uart_peek() != string[so_far])
 8001380:	e01b      	b.n	80013ba <Copy_upto+0x62>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 8001382:	4b2e      	ldr	r3, [pc, #184]	; (800143c <Copy_upto+0xe4>)
 8001384:	6819      	ldr	r1, [r3, #0]
 8001386:	4b2d      	ldr	r3, [pc, #180]	; (800143c <Copy_upto+0xe4>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	6838      	ldr	r0, [r7, #0]
 8001390:	4403      	add	r3, r0
 8001392:	5c8a      	ldrb	r2, [r1, r2]
 8001394:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8001396:	4b29      	ldr	r3, [pc, #164]	; (800143c <Copy_upto+0xe4>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139c:	1c5a      	adds	r2, r3, #1
 800139e:	4b27      	ldr	r3, [pc, #156]	; (800143c <Copy_upto+0xe4>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80013a6:	645a      	str	r2, [r3, #68]	; 0x44
			indx++;
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	3301      	adds	r3, #1
 80013ac:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 80013ae:	bf00      	nop
 80013b0:	f7ff ff8a 	bl	80012c8 <IsDataAvailable>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d0fa      	beq.n	80013b0 <Copy_upto+0x58>
	while (Uart_peek() != string[so_far])
 80013ba:	f7ff ffb3 	bl	8001324 <Uart_peek>
 80013be:	4601      	mov	r1, r0
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	4413      	add	r3, r2
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	4299      	cmp	r1, r3
 80013ca:	d1da      	bne.n	8001382 <Copy_upto+0x2a>

		}
	while (Uart_peek() == string [so_far])
 80013cc:	e019      	b.n	8001402 <Copy_upto+0xaa>
	{
		so_far++;
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	3301      	adds	r3, #1
 80013d2:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 80013d4:	f7ff ff1c 	bl	8001210 <Uart_read>
 80013d8:	4601      	mov	r1, r0
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	1c5a      	adds	r2, r3, #1
 80013de:	613a      	str	r2, [r7, #16]
 80013e0:	461a      	mov	r2, r3
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	4413      	add	r3, r2
 80013e6:	b2ca      	uxtb	r2, r1
 80013e8:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 80013ea:	697a      	ldr	r2, [r7, #20]
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d101      	bne.n	80013f6 <Copy_upto+0x9e>
 80013f2:	2301      	movs	r3, #1
 80013f4:	e01d      	b.n	8001432 <Copy_upto+0xda>
		while (!IsDataAvailable());
 80013f6:	bf00      	nop
 80013f8:	f7ff ff66 	bl	80012c8 <IsDataAvailable>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d0fa      	beq.n	80013f8 <Copy_upto+0xa0>
	while (Uart_peek() == string [so_far])
 8001402:	f7ff ff8f 	bl	8001324 <Uart_peek>
 8001406:	4601      	mov	r1, r0
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	4413      	add	r3, r2
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	4299      	cmp	r1, r3
 8001412:	d0dc      	beq.n	80013ce <Copy_upto+0x76>
	}

	if (so_far != len)
 8001414:	697a      	ldr	r2, [r7, #20]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	429a      	cmp	r2, r3
 800141a:	d002      	beq.n	8001422 <Copy_upto+0xca>
	{
		so_far = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]
		goto again;
 8001420:	e7a8      	b.n	8001374 <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 8001422:	697a      	ldr	r2, [r7, #20]
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	429a      	cmp	r2, r3
 8001428:	d101      	bne.n	800142e <Copy_upto+0xd6>
 800142a:	2301      	movs	r3, #1
 800142c:	e001      	b.n	8001432 <Copy_upto+0xda>
	else return -1;
 800142e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001432:	4618      	mov	r0, r3
 8001434:	3718      	adds	r7, #24
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	200001a4 	.word	0x200001a4

08001440 <Wait_for>:
	return 1;
}


int Wait_for (char *string)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
	int so_far =0;
 8001448:	2300      	movs	r3, #0
 800144a:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f7fe febf 	bl	80001d0 <strlen>
 8001452:	4603      	mov	r3, r0
 8001454:	60bb      	str	r3, [r7, #8]

again:
	while (!IsDataAvailable());
 8001456:	bf00      	nop
 8001458:	f7ff ff36 	bl	80012c8 <IsDataAvailable>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d0fa      	beq.n	8001458 <Wait_for+0x18>
	if (Uart_peek() != string[so_far])
 8001462:	f7ff ff5f 	bl	8001324 <Uart_peek>
 8001466:	4601      	mov	r1, r0
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	4413      	add	r3, r2
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	4299      	cmp	r1, r3
 8001472:	d01a      	beq.n	80014aa <Wait_for+0x6a>
	{
		 _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE ;
 8001474:	4b1b      	ldr	r3, [pc, #108]	; (80014e4 <Wait_for+0xa4>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147a:	1c5a      	adds	r2, r3, #1
 800147c:	4b19      	ldr	r3, [pc, #100]	; (80014e4 <Wait_for+0xa4>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001484:	645a      	str	r2, [r3, #68]	; 0x44
		goto again;
 8001486:	e7e6      	b.n	8001456 <Wait_for+0x16>

	}
	while (Uart_peek() == string [so_far])
	{
		so_far++;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	3301      	adds	r3, #1
 800148c:	60fb      	str	r3, [r7, #12]
		Uart_read();
 800148e:	f7ff febf 	bl	8001210 <Uart_read>
		if (so_far == len) return 1;
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	429a      	cmp	r2, r3
 8001498:	d101      	bne.n	800149e <Wait_for+0x5e>
 800149a:	2301      	movs	r3, #1
 800149c:	e01d      	b.n	80014da <Wait_for+0x9a>
		while (!IsDataAvailable());
 800149e:	bf00      	nop
 80014a0:	f7ff ff12 	bl	80012c8 <IsDataAvailable>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d0fa      	beq.n	80014a0 <Wait_for+0x60>
	while (Uart_peek() == string [so_far])
 80014aa:	f7ff ff3b 	bl	8001324 <Uart_peek>
 80014ae:	4601      	mov	r1, r0
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	4413      	add	r3, r2
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	4299      	cmp	r1, r3
 80014ba:	d0e5      	beq.n	8001488 <Wait_for+0x48>
	}

	if (so_far != len)
 80014bc:	68fa      	ldr	r2, [r7, #12]
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d002      	beq.n	80014ca <Wait_for+0x8a>
	{
		so_far = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	60fb      	str	r3, [r7, #12]
		goto again;
 80014c8:	e7c5      	b.n	8001456 <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 80014ca:	68fa      	ldr	r2, [r7, #12]
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d101      	bne.n	80014d6 <Wait_for+0x96>
 80014d2:	2301      	movs	r3, #1
 80014d4:	e001      	b.n	80014da <Wait_for+0x9a>
	else return -1;
 80014d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	200001a4 	.word	0x200001a4

080014e8 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	f003 0320 	and.w	r3, r3, #32
 8001506:	2b00      	cmp	r3, #0
 8001508:	d013      	beq.n	8001532 <Uart_isr+0x4a>
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	f003 0320 	and.w	r3, r3, #32
 8001510:	2b00      	cmp	r3, #0
 8001512:	d00e      	beq.n	8001532 <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8001522:	4b1c      	ldr	r3, [pc, #112]	; (8001594 <Uart_isr+0xac>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	7bfb      	ldrb	r3, [r7, #15]
 8001528:	4611      	mov	r1, r2
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff fe50 	bl	80011d0 <store_char>
        return;
 8001530:	e02c      	b.n	800158c <Uart_isr+0xa4>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001538:	2b00      	cmp	r3, #0
 800153a:	d027      	beq.n	800158c <Uart_isr+0xa4>
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001542:	2b00      	cmp	r3, #0
 8001544:	d022      	beq.n	800158c <Uart_isr+0xa4>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8001546:	4b14      	ldr	r3, [pc, #80]	; (8001598 <Uart_isr+0xb0>)
 8001548:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800154a:	4b13      	ldr	r3, [pc, #76]	; (8001598 <Uart_isr+0xb0>)
 800154c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154e:	429a      	cmp	r2, r3
 8001550:	d108      	bne.n	8001564 <Uart_isr+0x7c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	68da      	ldr	r2, [r3, #12]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001560:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8001562:	e012      	b.n	800158a <Uart_isr+0xa2>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8001564:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <Uart_isr+0xb0>)
 8001566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001568:	4a0b      	ldr	r2, [pc, #44]	; (8001598 <Uart_isr+0xb0>)
 800156a:	5cd3      	ldrb	r3, [r2, r3]
 800156c:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 800156e:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <Uart_isr+0xb0>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001572:	3301      	adds	r3, #1
 8001574:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001578:	4a07      	ldr	r2, [pc, #28]	; (8001598 <Uart_isr+0xb0>)
 800157a:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->SR;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	7bba      	ldrb	r2, [r7, #14]
 8001588:	605a      	str	r2, [r3, #4]
    	return;
 800158a:	bf00      	nop
    }
}
 800158c:	3718      	adds	r7, #24
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	200001a4 	.word	0x200001a4
 8001598:	2000014c 	.word	0x2000014c

0800159c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015a2:	f000 fb57 	bl	8001c54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015a6:	f000 f8c5 	bl	8001734 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015aa:	f000 f981 	bl	80018b0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80015ae:	f000 f91f 	bl	80017f0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80015b2:	f000 f953 	bl	800185c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init(&hspi1, LCD_CS_GPIO_Port, LCD_CS_Pin, LCD_DC_GPIO_Port, LCD_DC_Pin,
 80015b6:	2320      	movs	r3, #32
 80015b8:	9302      	str	r3, [sp, #8]
 80015ba:	4b4c      	ldr	r3, [pc, #304]	; (80016ec <main+0x150>)
 80015bc:	9301      	str	r3, [sp, #4]
 80015be:	2310      	movs	r3, #16
 80015c0:	9300      	str	r3, [sp, #0]
 80015c2:	4b4a      	ldr	r3, [pc, #296]	; (80016ec <main+0x150>)
 80015c4:	2210      	movs	r2, #16
 80015c6:	494a      	ldr	r1, [pc, #296]	; (80016f0 <main+0x154>)
 80015c8:	484a      	ldr	r0, [pc, #296]	; (80016f4 <main+0x158>)
 80015ca:	f7ff faa5 	bl	8000b18 <ILI9341_Init>
  		  LCD_RST_GPIO_Port, LCD_RST_Pin);
    ILI9341_setRotation(2);
 80015ce:	2002      	movs	r0, #2
 80015d0:	f7ff fd8a 	bl	80010e8 <ILI9341_setRotation>
    ILI9341_printText("Connecting....", 20, 30, COLOR_WHITE, COLOR_WHITE, 1);
 80015d4:	2301      	movs	r3, #1
 80015d6:	9301      	str	r3, [sp, #4]
 80015d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015e2:	221e      	movs	r2, #30
 80015e4:	2114      	movs	r1, #20
 80015e6:	4844      	ldr	r0, [pc, #272]	; (80016f8 <main+0x15c>)
 80015e8:	f7ff fd3c 	bl	8001064 <ILI9341_printText>
    ESP_Init("neyse", "12345678");
 80015ec:	4943      	ldr	r1, [pc, #268]	; (80016fc <main+0x160>)
 80015ee:	4844      	ldr	r0, [pc, #272]	; (8001700 <main+0x164>)
 80015f0:	f7fe ffe0 	bl	80005b4 <ESP_Init>
    ILI9341_Fill(COLOR_BLACK);
 80015f4:	2000      	movs	r0, #0
 80015f6:	f7ff fb6f 	bl	8000cd8 <ILI9341_Fill>
    ILI9341_printText("WELCOME!", 20, 30, COLOR_WHITE, COLOR_BLACK, 3);
 80015fa:	2303      	movs	r3, #3
 80015fc:	9301      	str	r3, [sp, #4]
 80015fe:	2300      	movs	r3, #0
 8001600:	9300      	str	r3, [sp, #0]
 8001602:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001606:	221e      	movs	r2, #30
 8001608:	2114      	movs	r1, #20
 800160a:	483e      	ldr	r0, [pc, #248]	; (8001704 <main+0x168>)
 800160c:	f7ff fd2a 	bl	8001064 <ILI9341_printText>
    ILI9341_printText("LOADING WEATHER", 20, 90, COLOR_WHITE, COLOR_BLACK, 3);
 8001610:	2303      	movs	r3, #3
 8001612:	9301      	str	r3, [sp, #4]
 8001614:	2300      	movs	r3, #0
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800161c:	225a      	movs	r2, #90	; 0x5a
 800161e:	2114      	movs	r1, #20
 8001620:	4839      	ldr	r0, [pc, #228]	; (8001708 <main+0x16c>)
 8001622:	f7ff fd1f 	bl	8001064 <ILI9341_printText>
    ILI9341_printText(",TIME AND DATE", 20, 120, COLOR_WHITE, COLOR_BLACK, 3);
 8001626:	2303      	movs	r3, #3
 8001628:	9301      	str	r3, [sp, #4]
 800162a:	2300      	movs	r3, #0
 800162c:	9300      	str	r3, [sp, #0]
 800162e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001632:	2278      	movs	r2, #120	; 0x78
 8001634:	2114      	movs	r1, #20
 8001636:	4835      	ldr	r0, [pc, #212]	; (800170c <main+0x170>)
 8001638:	f7ff fd14 	bl	8001064 <ILI9341_printText>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  ESP_GetData_1("64POEVJJ473SUR0V", Total);
 800163c:	4934      	ldr	r1, [pc, #208]	; (8001710 <main+0x174>)
 800163e:	4835      	ldr	r0, [pc, #212]	; (8001714 <main+0x178>)
 8001640:	f7ff f80e 	bl	8000660 <ESP_GetData_1>
	  	  HAL_Delay(20000);
 8001644:	f644 6020 	movw	r0, #20000	; 0x4e20
 8001648:	f000 fb76 	bl	8001d38 <HAL_Delay>
	  	  ILI9341_Fill(COLOR_NAVY);
 800164c:	200f      	movs	r0, #15
 800164e:	f7ff fb43 	bl	8000cd8 <ILI9341_Fill>
	  	  ILI9341_printText("Weather:", 0, 30, COLOR_WHITE, COLOR_NAVY, 3);
 8001652:	2303      	movs	r3, #3
 8001654:	9301      	str	r3, [sp, #4]
 8001656:	230f      	movs	r3, #15
 8001658:	9300      	str	r3, [sp, #0]
 800165a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800165e:	221e      	movs	r2, #30
 8001660:	2100      	movs	r1, #0
 8001662:	482d      	ldr	r0, [pc, #180]	; (8001718 <main+0x17c>)
 8001664:	f7ff fcfe 	bl	8001064 <ILI9341_printText>
	  	  ILI9341_printText(Total, 0, 60, COLOR_WHITE, COLOR_NAVY, 2);
 8001668:	2302      	movs	r3, #2
 800166a:	9301      	str	r3, [sp, #4]
 800166c:	230f      	movs	r3, #15
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001674:	223c      	movs	r2, #60	; 0x3c
 8001676:	2100      	movs	r1, #0
 8001678:	4825      	ldr	r0, [pc, #148]	; (8001710 <main+0x174>)
 800167a:	f7ff fcf3 	bl	8001064 <ILI9341_printText>
	  	  ILI9341_printText("Date:", 0, 90, COLOR_WHITE, COLOR_NAVY, 3);
 800167e:	2303      	movs	r3, #3
 8001680:	9301      	str	r3, [sp, #4]
 8001682:	230f      	movs	r3, #15
 8001684:	9300      	str	r3, [sp, #0]
 8001686:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800168a:	225a      	movs	r2, #90	; 0x5a
 800168c:	2100      	movs	r1, #0
 800168e:	4823      	ldr	r0, [pc, #140]	; (800171c <main+0x180>)
 8001690:	f7ff fce8 	bl	8001064 <ILI9341_printText>
	  	  ESP_GetData_2("RPGNBG4MTVD5HSAA", string);
 8001694:	4922      	ldr	r1, [pc, #136]	; (8001720 <main+0x184>)
 8001696:	4823      	ldr	r0, [pc, #140]	; (8001724 <main+0x188>)
 8001698:	f7ff f86e 	bl	8000778 <ESP_GetData_2>
	  	  ILI9341_printText(string, -10, 120, COLOR_WHITE, COLOR_NAVY, 2);
 800169c:	2302      	movs	r3, #2
 800169e:	9301      	str	r3, [sp, #4]
 80016a0:	230f      	movs	r3, #15
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016a8:	2278      	movs	r2, #120	; 0x78
 80016aa:	f06f 0109 	mvn.w	r1, #9
 80016ae:	481c      	ldr	r0, [pc, #112]	; (8001720 <main+0x184>)
 80016b0:	f7ff fcd8 	bl	8001064 <ILI9341_printText>
	  	  ILI9341_printText("Time:",0, 150, COLOR_WHITE, COLOR_NAVY, 3);
 80016b4:	2303      	movs	r3, #3
 80016b6:	9301      	str	r3, [sp, #4]
 80016b8:	230f      	movs	r3, #15
 80016ba:	9300      	str	r3, [sp, #0]
 80016bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016c0:	2296      	movs	r2, #150	; 0x96
 80016c2:	2100      	movs	r1, #0
 80016c4:	4818      	ldr	r0, [pc, #96]	; (8001728 <main+0x18c>)
 80016c6:	f7ff fccd 	bl	8001064 <ILI9341_printText>
	  	  ESP_GetData_3("BGFP08OIRF21Y2YG", string2);
 80016ca:	4918      	ldr	r1, [pc, #96]	; (800172c <main+0x190>)
 80016cc:	4818      	ldr	r0, [pc, #96]	; (8001730 <main+0x194>)
 80016ce:	f7ff f8e1 	bl	8000894 <ESP_GetData_3>
	  	  ILI9341_printText(string2, 0, 180, COLOR_WHITE, COLOR_NAVY, 2);
 80016d2:	2302      	movs	r3, #2
 80016d4:	9301      	str	r3, [sp, #4]
 80016d6:	230f      	movs	r3, #15
 80016d8:	9300      	str	r3, [sp, #0]
 80016da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016de:	22b4      	movs	r2, #180	; 0xb4
 80016e0:	2100      	movs	r1, #0
 80016e2:	4812      	ldr	r0, [pc, #72]	; (800172c <main+0x190>)
 80016e4:	f7ff fcbe 	bl	8001064 <ILI9341_printText>
  {
 80016e8:	e7a8      	b.n	800163c <main+0xa0>
 80016ea:	bf00      	nop
 80016ec:	40020800 	.word	0x40020800
 80016f0:	40020000 	.word	0x40020000
 80016f4:	20000318 	.word	0x20000318
 80016f8:	08003f64 	.word	0x08003f64
 80016fc:	08003f74 	.word	0x08003f74
 8001700:	08003f80 	.word	0x08003f80
 8001704:	08003f88 	.word	0x08003f88
 8001708:	08003f94 	.word	0x08003f94
 800170c:	08003fa4 	.word	0x08003fa4
 8001710:	200002b4 	.word	0x200002b4
 8001714:	08003fb4 	.word	0x08003fb4
 8001718:	08003fc8 	.word	0x08003fc8
 800171c:	08003fd4 	.word	0x08003fd4
 8001720:	20000250 	.word	0x20000250
 8001724:	08003fdc 	.word	0x08003fdc
 8001728:	08003ff0 	.word	0x08003ff0
 800172c:	200001ec 	.word	0x200001ec
 8001730:	08003ff8 	.word	0x08003ff8

08001734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b094      	sub	sp, #80	; 0x50
 8001738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800173a:	f107 0320 	add.w	r3, r7, #32
 800173e:	2230      	movs	r2, #48	; 0x30
 8001740:	2100      	movs	r1, #0
 8001742:	4618      	mov	r0, r3
 8001744:	f001 ff0a 	bl	800355c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001748:	f107 030c 	add.w	r3, r7, #12
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	60da      	str	r2, [r3, #12]
 8001756:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001758:	2300      	movs	r3, #0
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	4b22      	ldr	r3, [pc, #136]	; (80017e8 <SystemClock_Config+0xb4>)
 800175e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001760:	4a21      	ldr	r2, [pc, #132]	; (80017e8 <SystemClock_Config+0xb4>)
 8001762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001766:	6413      	str	r3, [r2, #64]	; 0x40
 8001768:	4b1f      	ldr	r3, [pc, #124]	; (80017e8 <SystemClock_Config+0xb4>)
 800176a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001770:	60bb      	str	r3, [r7, #8]
 8001772:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001774:	2300      	movs	r3, #0
 8001776:	607b      	str	r3, [r7, #4]
 8001778:	4b1c      	ldr	r3, [pc, #112]	; (80017ec <SystemClock_Config+0xb8>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a1b      	ldr	r2, [pc, #108]	; (80017ec <SystemClock_Config+0xb8>)
 800177e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001782:	6013      	str	r3, [r2, #0]
 8001784:	4b19      	ldr	r3, [pc, #100]	; (80017ec <SystemClock_Config+0xb8>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800178c:	607b      	str	r3, [r7, #4]
 800178e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001790:	2302      	movs	r3, #2
 8001792:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001794:	2301      	movs	r3, #1
 8001796:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001798:	2310      	movs	r3, #16
 800179a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800179c:	2300      	movs	r3, #0
 800179e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017a0:	f107 0320 	add.w	r3, r7, #32
 80017a4:	4618      	mov	r0, r3
 80017a6:	f000 fdb3 	bl	8002310 <HAL_RCC_OscConfig>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80017b0:	f000 f8e4 	bl	800197c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017b4:	230f      	movs	r3, #15
 80017b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80017b8:	2300      	movs	r3, #0
 80017ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017bc:	2300      	movs	r3, #0
 80017be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017c0:	2300      	movs	r3, #0
 80017c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017c4:	2300      	movs	r3, #0
 80017c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017c8:	f107 030c 	add.w	r3, r7, #12
 80017cc:	2100      	movs	r1, #0
 80017ce:	4618      	mov	r0, r3
 80017d0:	f001 f816 	bl	8002800 <HAL_RCC_ClockConfig>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80017da:	f000 f8cf 	bl	800197c <Error_Handler>
  }
}
 80017de:	bf00      	nop
 80017e0:	3750      	adds	r7, #80	; 0x50
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40023800 	.word	0x40023800
 80017ec:	40007000 	.word	0x40007000

080017f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017f4:	4b17      	ldr	r3, [pc, #92]	; (8001854 <MX_SPI1_Init+0x64>)
 80017f6:	4a18      	ldr	r2, [pc, #96]	; (8001858 <MX_SPI1_Init+0x68>)
 80017f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017fa:	4b16      	ldr	r3, [pc, #88]	; (8001854 <MX_SPI1_Init+0x64>)
 80017fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001800:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001802:	4b14      	ldr	r3, [pc, #80]	; (8001854 <MX_SPI1_Init+0x64>)
 8001804:	2200      	movs	r2, #0
 8001806:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001808:	4b12      	ldr	r3, [pc, #72]	; (8001854 <MX_SPI1_Init+0x64>)
 800180a:	2200      	movs	r2, #0
 800180c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800180e:	4b11      	ldr	r3, [pc, #68]	; (8001854 <MX_SPI1_Init+0x64>)
 8001810:	2200      	movs	r2, #0
 8001812:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001814:	4b0f      	ldr	r3, [pc, #60]	; (8001854 <MX_SPI1_Init+0x64>)
 8001816:	2200      	movs	r2, #0
 8001818:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800181a:	4b0e      	ldr	r3, [pc, #56]	; (8001854 <MX_SPI1_Init+0x64>)
 800181c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001820:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001822:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <MX_SPI1_Init+0x64>)
 8001824:	2200      	movs	r2, #0
 8001826:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001828:	4b0a      	ldr	r3, [pc, #40]	; (8001854 <MX_SPI1_Init+0x64>)
 800182a:	2200      	movs	r2, #0
 800182c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800182e:	4b09      	ldr	r3, [pc, #36]	; (8001854 <MX_SPI1_Init+0x64>)
 8001830:	2200      	movs	r2, #0
 8001832:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001834:	4b07      	ldr	r3, [pc, #28]	; (8001854 <MX_SPI1_Init+0x64>)
 8001836:	2200      	movs	r2, #0
 8001838:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800183a:	4b06      	ldr	r3, [pc, #24]	; (8001854 <MX_SPI1_Init+0x64>)
 800183c:	220a      	movs	r2, #10
 800183e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001840:	4804      	ldr	r0, [pc, #16]	; (8001854 <MX_SPI1_Init+0x64>)
 8001842:	f001 f9ad 	bl	8002ba0 <HAL_SPI_Init>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800184c:	f000 f896 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001850:	bf00      	nop
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20000318 	.word	0x20000318
 8001858:	40013000 	.word	0x40013000

0800185c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001860:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <MX_USART2_UART_Init+0x4c>)
 8001862:	4a12      	ldr	r2, [pc, #72]	; (80018ac <MX_USART2_UART_Init+0x50>)
 8001864:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001866:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <MX_USART2_UART_Init+0x4c>)
 8001868:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800186c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800186e:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <MX_USART2_UART_Init+0x4c>)
 8001870:	2200      	movs	r2, #0
 8001872:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001874:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <MX_USART2_UART_Init+0x4c>)
 8001876:	2200      	movs	r2, #0
 8001878:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800187a:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <MX_USART2_UART_Init+0x4c>)
 800187c:	2200      	movs	r2, #0
 800187e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001880:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <MX_USART2_UART_Init+0x4c>)
 8001882:	220c      	movs	r2, #12
 8001884:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001886:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <MX_USART2_UART_Init+0x4c>)
 8001888:	2200      	movs	r2, #0
 800188a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800188c:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <MX_USART2_UART_Init+0x4c>)
 800188e:	2200      	movs	r2, #0
 8001890:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001892:	4805      	ldr	r0, [pc, #20]	; (80018a8 <MX_USART2_UART_Init+0x4c>)
 8001894:	f001 fc14 	bl	80030c0 <HAL_UART_Init>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800189e:	f000 f86d 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	200001a8 	.word	0x200001a8
 80018ac:	40004400 	.word	0x40004400

080018b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b088      	sub	sp, #32
 80018b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b6:	f107 030c 	add.w	r3, r7, #12
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	605a      	str	r2, [r3, #4]
 80018c0:	609a      	str	r2, [r3, #8]
 80018c2:	60da      	str	r2, [r3, #12]
 80018c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	60bb      	str	r3, [r7, #8]
 80018ca:	4b29      	ldr	r3, [pc, #164]	; (8001970 <MX_GPIO_Init+0xc0>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	4a28      	ldr	r2, [pc, #160]	; (8001970 <MX_GPIO_Init+0xc0>)
 80018d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
 80018d6:	4b26      	ldr	r3, [pc, #152]	; (8001970 <MX_GPIO_Init+0xc0>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018de:	60bb      	str	r3, [r7, #8]
 80018e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	607b      	str	r3, [r7, #4]
 80018e6:	4b22      	ldr	r3, [pc, #136]	; (8001970 <MX_GPIO_Init+0xc0>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	4a21      	ldr	r2, [pc, #132]	; (8001970 <MX_GPIO_Init+0xc0>)
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	6313      	str	r3, [r2, #48]	; 0x30
 80018f2:	4b1f      	ldr	r3, [pc, #124]	; (8001970 <MX_GPIO_Init+0xc0>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	607b      	str	r3, [r7, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	603b      	str	r3, [r7, #0]
 8001902:	4b1b      	ldr	r3, [pc, #108]	; (8001970 <MX_GPIO_Init+0xc0>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	4a1a      	ldr	r2, [pc, #104]	; (8001970 <MX_GPIO_Init+0xc0>)
 8001908:	f043 0304 	orr.w	r3, r3, #4
 800190c:	6313      	str	r3, [r2, #48]	; 0x30
 800190e:	4b18      	ldr	r3, [pc, #96]	; (8001970 <MX_GPIO_Init+0xc0>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	f003 0304 	and.w	r3, r3, #4
 8001916:	603b      	str	r3, [r7, #0]
 8001918:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800191a:	2200      	movs	r2, #0
 800191c:	2110      	movs	r1, #16
 800191e:	4815      	ldr	r0, [pc, #84]	; (8001974 <MX_GPIO_Init+0xc4>)
 8001920:	f000 fcdc 	bl	80022dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8001924:	2200      	movs	r2, #0
 8001926:	2130      	movs	r1, #48	; 0x30
 8001928:	4813      	ldr	r0, [pc, #76]	; (8001978 <MX_GPIO_Init+0xc8>)
 800192a:	f000 fcd7 	bl	80022dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 800192e:	2310      	movs	r3, #16
 8001930:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001932:	2301      	movs	r3, #1
 8001934:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193a:	2300      	movs	r3, #0
 800193c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 800193e:	f107 030c 	add.w	r3, r7, #12
 8001942:	4619      	mov	r1, r3
 8001944:	480b      	ldr	r0, [pc, #44]	; (8001974 <MX_GPIO_Init+0xc4>)
 8001946:	f000 fb2d 	bl	8001fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DC_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin;
 800194a:	2330      	movs	r3, #48	; 0x30
 800194c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800194e:	2301      	movs	r3, #1
 8001950:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001956:	2300      	movs	r3, #0
 8001958:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800195a:	f107 030c 	add.w	r3, r7, #12
 800195e:	4619      	mov	r1, r3
 8001960:	4805      	ldr	r0, [pc, #20]	; (8001978 <MX_GPIO_Init+0xc8>)
 8001962:	f000 fb1f 	bl	8001fa4 <HAL_GPIO_Init>

}
 8001966:	bf00      	nop
 8001968:	3720      	adds	r7, #32
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40023800 	.word	0x40023800
 8001974:	40020000 	.word	0x40020000
 8001978:	40020800 	.word	0x40020800

0800197c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001980:	b672      	cpsid	i
}
 8001982:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001984:	e7fe      	b.n	8001984 <Error_Handler+0x8>
	...

08001988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	607b      	str	r3, [r7, #4]
 8001992:	4b10      	ldr	r3, [pc, #64]	; (80019d4 <HAL_MspInit+0x4c>)
 8001994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001996:	4a0f      	ldr	r2, [pc, #60]	; (80019d4 <HAL_MspInit+0x4c>)
 8001998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800199c:	6453      	str	r3, [r2, #68]	; 0x44
 800199e:	4b0d      	ldr	r3, [pc, #52]	; (80019d4 <HAL_MspInit+0x4c>)
 80019a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019a6:	607b      	str	r3, [r7, #4]
 80019a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	603b      	str	r3, [r7, #0]
 80019ae:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <HAL_MspInit+0x4c>)
 80019b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b2:	4a08      	ldr	r2, [pc, #32]	; (80019d4 <HAL_MspInit+0x4c>)
 80019b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ba:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <HAL_MspInit+0x4c>)
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c2:	603b      	str	r3, [r7, #0]
 80019c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	40023800 	.word	0x40023800

080019d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08a      	sub	sp, #40	; 0x28
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e0:	f107 0314 	add.w	r3, r7, #20
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	60da      	str	r2, [r3, #12]
 80019ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a19      	ldr	r2, [pc, #100]	; (8001a5c <HAL_SPI_MspInit+0x84>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d12b      	bne.n	8001a52 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	613b      	str	r3, [r7, #16]
 80019fe:	4b18      	ldr	r3, [pc, #96]	; (8001a60 <HAL_SPI_MspInit+0x88>)
 8001a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a02:	4a17      	ldr	r2, [pc, #92]	; (8001a60 <HAL_SPI_MspInit+0x88>)
 8001a04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a08:	6453      	str	r3, [r2, #68]	; 0x44
 8001a0a:	4b15      	ldr	r3, [pc, #84]	; (8001a60 <HAL_SPI_MspInit+0x88>)
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a12:	613b      	str	r3, [r7, #16]
 8001a14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	4b11      	ldr	r3, [pc, #68]	; (8001a60 <HAL_SPI_MspInit+0x88>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	4a10      	ldr	r2, [pc, #64]	; (8001a60 <HAL_SPI_MspInit+0x88>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	6313      	str	r3, [r2, #48]	; 0x30
 8001a26:	4b0e      	ldr	r3, [pc, #56]	; (8001a60 <HAL_SPI_MspInit+0x88>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001a32:	23e0      	movs	r3, #224	; 0xe0
 8001a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a36:	2302      	movs	r3, #2
 8001a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a42:	2305      	movs	r3, #5
 8001a44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a46:	f107 0314 	add.w	r3, r7, #20
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4805      	ldr	r0, [pc, #20]	; (8001a64 <HAL_SPI_MspInit+0x8c>)
 8001a4e:	f000 faa9 	bl	8001fa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a52:	bf00      	nop
 8001a54:	3728      	adds	r7, #40	; 0x28
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40013000 	.word	0x40013000
 8001a60:	40023800 	.word	0x40023800
 8001a64:	40020000 	.word	0x40020000

08001a68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08a      	sub	sp, #40	; 0x28
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a70:	f107 0314 	add.w	r3, r7, #20
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a1d      	ldr	r2, [pc, #116]	; (8001afc <HAL_UART_MspInit+0x94>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d133      	bne.n	8001af2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	613b      	str	r3, [r7, #16]
 8001a8e:	4b1c      	ldr	r3, [pc, #112]	; (8001b00 <HAL_UART_MspInit+0x98>)
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	4a1b      	ldr	r2, [pc, #108]	; (8001b00 <HAL_UART_MspInit+0x98>)
 8001a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a98:	6413      	str	r3, [r2, #64]	; 0x40
 8001a9a:	4b19      	ldr	r3, [pc, #100]	; (8001b00 <HAL_UART_MspInit+0x98>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa2:	613b      	str	r3, [r7, #16]
 8001aa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	4b15      	ldr	r3, [pc, #84]	; (8001b00 <HAL_UART_MspInit+0x98>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	4a14      	ldr	r2, [pc, #80]	; (8001b00 <HAL_UART_MspInit+0x98>)
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab6:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <HAL_UART_MspInit+0x98>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ac2:	230c      	movs	r3, #12
 8001ac4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ad2:	2307      	movs	r3, #7
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad6:	f107 0314 	add.w	r3, r7, #20
 8001ada:	4619      	mov	r1, r3
 8001adc:	4809      	ldr	r0, [pc, #36]	; (8001b04 <HAL_UART_MspInit+0x9c>)
 8001ade:	f000 fa61 	bl	8001fa4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	2026      	movs	r0, #38	; 0x26
 8001ae8:	f000 fa25 	bl	8001f36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001aec:	2026      	movs	r0, #38	; 0x26
 8001aee:	f000 fa3e 	bl	8001f6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001af2:	bf00      	nop
 8001af4:	3728      	adds	r7, #40	; 0x28
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40004400 	.word	0x40004400
 8001b00:	40023800 	.word	0x40023800
 8001b04:	40020000 	.word	0x40020000

08001b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b0c:	e7fe      	b.n	8001b0c <NMI_Handler+0x4>

08001b0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b12:	e7fe      	b.n	8001b12 <HardFault_Handler+0x4>

08001b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b18:	e7fe      	b.n	8001b18 <MemManage_Handler+0x4>

08001b1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b1e:	e7fe      	b.n	8001b1e <BusFault_Handler+0x4>

08001b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b24:	e7fe      	b.n	8001b24 <UsageFault_Handler+0x4>

08001b26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b38:	bf00      	nop
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b42:	b480      	push	{r7}
 8001b44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b54:	f000 f8d0 	bl	8001cf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b58:	bf00      	nop
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	Uart_isr (&huart2);
 8001b60:	4802      	ldr	r0, [pc, #8]	; (8001b6c <USART2_IRQHandler+0x10>)
 8001b62:	f7ff fcc1 	bl	80014e8 <Uart_isr>
		return;
 8001b66:	bf00      	nop
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	200001a8 	.word	0x200001a8

08001b70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b78:	4a14      	ldr	r2, [pc, #80]	; (8001bcc <_sbrk+0x5c>)
 8001b7a:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <_sbrk+0x60>)
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b84:	4b13      	ldr	r3, [pc, #76]	; (8001bd4 <_sbrk+0x64>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d102      	bne.n	8001b92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b8c:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <_sbrk+0x64>)
 8001b8e:	4a12      	ldr	r2, [pc, #72]	; (8001bd8 <_sbrk+0x68>)
 8001b90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b92:	4b10      	ldr	r3, [pc, #64]	; (8001bd4 <_sbrk+0x64>)
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4413      	add	r3, r2
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d207      	bcs.n	8001bb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ba0:	f001 fca4 	bl	80034ec <__errno>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	220c      	movs	r2, #12
 8001ba8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001baa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bae:	e009      	b.n	8001bc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bb0:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <_sbrk+0x64>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bb6:	4b07      	ldr	r3, [pc, #28]	; (8001bd4 <_sbrk+0x64>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	4a05      	ldr	r2, [pc, #20]	; (8001bd4 <_sbrk+0x64>)
 8001bc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3718      	adds	r7, #24
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	20020000 	.word	0x20020000
 8001bd0:	00000400 	.word	0x00000400
 8001bd4:	20000194 	.word	0x20000194
 8001bd8:	20000388 	.word	0x20000388

08001bdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001be0:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <SystemInit+0x20>)
 8001be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001be6:	4a05      	ldr	r2, [pc, #20]	; (8001bfc <SystemInit+0x20>)
 8001be8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bf0:	bf00      	nop
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	e000ed00 	.word	0xe000ed00

08001c00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c04:	480d      	ldr	r0, [pc, #52]	; (8001c3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c06:	490e      	ldr	r1, [pc, #56]	; (8001c40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c08:	4a0e      	ldr	r2, [pc, #56]	; (8001c44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c0c:	e002      	b.n	8001c14 <LoopCopyDataInit>

08001c0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c12:	3304      	adds	r3, #4

08001c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c18:	d3f9      	bcc.n	8001c0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c1a:	4a0b      	ldr	r2, [pc, #44]	; (8001c48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c1c:	4c0b      	ldr	r4, [pc, #44]	; (8001c4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c20:	e001      	b.n	8001c26 <LoopFillZerobss>

08001c22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c24:	3204      	adds	r2, #4

08001c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c28:	d3fb      	bcc.n	8001c22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c2a:	f7ff ffd7 	bl	8001bdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c2e:	f001 fc63 	bl	80034f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c32:	f7ff fcb3 	bl	800159c <main>
  bx  lr    
 8001c36:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c40:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001c44:	08004568 	.word	0x08004568
  ldr r2, =_sbss
 8001c48:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001c4c:	20000384 	.word	0x20000384

08001c50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c50:	e7fe      	b.n	8001c50 <ADC_IRQHandler>
	...

08001c54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c58:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <HAL_Init+0x40>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a0d      	ldr	r2, [pc, #52]	; (8001c94 <HAL_Init+0x40>)
 8001c5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c64:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <HAL_Init+0x40>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a0a      	ldr	r2, [pc, #40]	; (8001c94 <HAL_Init+0x40>)
 8001c6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c70:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <HAL_Init+0x40>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a07      	ldr	r2, [pc, #28]	; (8001c94 <HAL_Init+0x40>)
 8001c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c7c:	2003      	movs	r0, #3
 8001c7e:	f000 f94f 	bl	8001f20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c82:	2000      	movs	r0, #0
 8001c84:	f000 f808 	bl	8001c98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c88:	f7ff fe7e 	bl	8001988 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40023c00 	.word	0x40023c00

08001c98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ca0:	4b12      	ldr	r3, [pc, #72]	; (8001cec <HAL_InitTick+0x54>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4b12      	ldr	r3, [pc, #72]	; (8001cf0 <HAL_InitTick+0x58>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	4619      	mov	r1, r3
 8001caa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f000 f967 	bl	8001f8a <HAL_SYSTICK_Config>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e00e      	b.n	8001ce4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b0f      	cmp	r3, #15
 8001cca:	d80a      	bhi.n	8001ce2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ccc:	2200      	movs	r2, #0
 8001cce:	6879      	ldr	r1, [r7, #4]
 8001cd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cd4:	f000 f92f 	bl	8001f36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cd8:	4a06      	ldr	r2, [pc, #24]	; (8001cf4 <HAL_InitTick+0x5c>)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	e000      	b.n	8001ce4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	20000004 	.word	0x20000004
 8001cf0:	2000000c 	.word	0x2000000c
 8001cf4:	20000008 	.word	0x20000008

08001cf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cfc:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <HAL_IncTick+0x20>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	461a      	mov	r2, r3
 8001d02:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <HAL_IncTick+0x24>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4413      	add	r3, r2
 8001d08:	4a04      	ldr	r2, [pc, #16]	; (8001d1c <HAL_IncTick+0x24>)
 8001d0a:	6013      	str	r3, [r2, #0]
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	2000000c 	.word	0x2000000c
 8001d1c:	20000370 	.word	0x20000370

08001d20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  return uwTick;
 8001d24:	4b03      	ldr	r3, [pc, #12]	; (8001d34 <HAL_GetTick+0x14>)
 8001d26:	681b      	ldr	r3, [r3, #0]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	20000370 	.word	0x20000370

08001d38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d40:	f7ff ffee 	bl	8001d20 <HAL_GetTick>
 8001d44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d50:	d005      	beq.n	8001d5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d52:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <HAL_Delay+0x44>)
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	461a      	mov	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d5e:	bf00      	nop
 8001d60:	f7ff ffde 	bl	8001d20 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d8f7      	bhi.n	8001d60 <HAL_Delay+0x28>
  {
  }
}
 8001d70:	bf00      	nop
 8001d72:	bf00      	nop
 8001d74:	3710      	adds	r7, #16
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	2000000c 	.word	0x2000000c

08001d80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d90:	4b0c      	ldr	r3, [pc, #48]	; (8001dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d96:	68ba      	ldr	r2, [r7, #8]
 8001d98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001da8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001db2:	4a04      	ldr	r2, [pc, #16]	; (8001dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	60d3      	str	r3, [r2, #12]
}
 8001db8:	bf00      	nop
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	e000ed00 	.word	0xe000ed00

08001dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dcc:	4b04      	ldr	r3, [pc, #16]	; (8001de0 <__NVIC_GetPriorityGrouping+0x18>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	0a1b      	lsrs	r3, r3, #8
 8001dd2:	f003 0307 	and.w	r3, r3, #7
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	e000ed00 	.word	0xe000ed00

08001de4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	db0b      	blt.n	8001e0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001df6:	79fb      	ldrb	r3, [r7, #7]
 8001df8:	f003 021f 	and.w	r2, r3, #31
 8001dfc:	4907      	ldr	r1, [pc, #28]	; (8001e1c <__NVIC_EnableIRQ+0x38>)
 8001dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e02:	095b      	lsrs	r3, r3, #5
 8001e04:	2001      	movs	r0, #1
 8001e06:	fa00 f202 	lsl.w	r2, r0, r2
 8001e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	e000e100 	.word	0xe000e100

08001e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	6039      	str	r1, [r7, #0]
 8001e2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	db0a      	blt.n	8001e4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	b2da      	uxtb	r2, r3
 8001e38:	490c      	ldr	r1, [pc, #48]	; (8001e6c <__NVIC_SetPriority+0x4c>)
 8001e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3e:	0112      	lsls	r2, r2, #4
 8001e40:	b2d2      	uxtb	r2, r2
 8001e42:	440b      	add	r3, r1
 8001e44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e48:	e00a      	b.n	8001e60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	b2da      	uxtb	r2, r3
 8001e4e:	4908      	ldr	r1, [pc, #32]	; (8001e70 <__NVIC_SetPriority+0x50>)
 8001e50:	79fb      	ldrb	r3, [r7, #7]
 8001e52:	f003 030f 	and.w	r3, r3, #15
 8001e56:	3b04      	subs	r3, #4
 8001e58:	0112      	lsls	r2, r2, #4
 8001e5a:	b2d2      	uxtb	r2, r2
 8001e5c:	440b      	add	r3, r1
 8001e5e:	761a      	strb	r2, [r3, #24]
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	e000e100 	.word	0xe000e100
 8001e70:	e000ed00 	.word	0xe000ed00

08001e74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b089      	sub	sp, #36	; 0x24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	f1c3 0307 	rsb	r3, r3, #7
 8001e8e:	2b04      	cmp	r3, #4
 8001e90:	bf28      	it	cs
 8001e92:	2304      	movcs	r3, #4
 8001e94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	3304      	adds	r3, #4
 8001e9a:	2b06      	cmp	r3, #6
 8001e9c:	d902      	bls.n	8001ea4 <NVIC_EncodePriority+0x30>
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	3b03      	subs	r3, #3
 8001ea2:	e000      	b.n	8001ea6 <NVIC_EncodePriority+0x32>
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	43da      	mvns	r2, r3
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	401a      	ands	r2, r3
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ebc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec6:	43d9      	mvns	r1, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ecc:	4313      	orrs	r3, r2
         );
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3724      	adds	r7, #36	; 0x24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
	...

08001edc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eec:	d301      	bcc.n	8001ef2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e00f      	b.n	8001f12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ef2:	4a0a      	ldr	r2, [pc, #40]	; (8001f1c <SysTick_Config+0x40>)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001efa:	210f      	movs	r1, #15
 8001efc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f00:	f7ff ff8e 	bl	8001e20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f04:	4b05      	ldr	r3, [pc, #20]	; (8001f1c <SysTick_Config+0x40>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f0a:	4b04      	ldr	r3, [pc, #16]	; (8001f1c <SysTick_Config+0x40>)
 8001f0c:	2207      	movs	r2, #7
 8001f0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	e000e010 	.word	0xe000e010

08001f20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f7ff ff29 	bl	8001d80 <__NVIC_SetPriorityGrouping>
}
 8001f2e:	bf00      	nop
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b086      	sub	sp, #24
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	60b9      	str	r1, [r7, #8]
 8001f40:	607a      	str	r2, [r7, #4]
 8001f42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f48:	f7ff ff3e 	bl	8001dc8 <__NVIC_GetPriorityGrouping>
 8001f4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	68b9      	ldr	r1, [r7, #8]
 8001f52:	6978      	ldr	r0, [r7, #20]
 8001f54:	f7ff ff8e 	bl	8001e74 <NVIC_EncodePriority>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f5e:	4611      	mov	r1, r2
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff ff5d 	bl	8001e20 <__NVIC_SetPriority>
}
 8001f66:	bf00      	nop
 8001f68:	3718      	adds	r7, #24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b082      	sub	sp, #8
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	4603      	mov	r3, r0
 8001f76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff ff31 	bl	8001de4 <__NVIC_EnableIRQ>
}
 8001f82:	bf00      	nop
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b082      	sub	sp, #8
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7ff ffa2 	bl	8001edc <SysTick_Config>
 8001f98:	4603      	mov	r3, r0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
	...

08001fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b089      	sub	sp, #36	; 0x24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61fb      	str	r3, [r7, #28]
 8001fbe:	e16b      	b.n	8002298 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	f040 815a 	bne.w	8002292 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f003 0303 	and.w	r3, r3, #3
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d005      	beq.n	8001ff6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d130      	bne.n	8002058 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	2203      	movs	r2, #3
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	43db      	mvns	r3, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4013      	ands	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	68da      	ldr	r2, [r3, #12]
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	4313      	orrs	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800202c:	2201      	movs	r2, #1
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	43db      	mvns	r3, r3
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4013      	ands	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	091b      	lsrs	r3, r3, #4
 8002042:	f003 0201 	and.w	r2, r3, #1
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	4313      	orrs	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f003 0303 	and.w	r3, r3, #3
 8002060:	2b03      	cmp	r3, #3
 8002062:	d017      	beq.n	8002094 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	2203      	movs	r2, #3
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	43db      	mvns	r3, r3
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	4013      	ands	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4313      	orrs	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f003 0303 	and.w	r3, r3, #3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d123      	bne.n	80020e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	08da      	lsrs	r2, r3, #3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3208      	adds	r2, #8
 80020a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	220f      	movs	r2, #15
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4013      	ands	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	691a      	ldr	r2, [r3, #16]
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	08da      	lsrs	r2, r3, #3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	3208      	adds	r2, #8
 80020e2:	69b9      	ldr	r1, [r7, #24]
 80020e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	2203      	movs	r2, #3
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f003 0203 	and.w	r2, r3, #3
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4313      	orrs	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002124:	2b00      	cmp	r3, #0
 8002126:	f000 80b4 	beq.w	8002292 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	4b60      	ldr	r3, [pc, #384]	; (80022b0 <HAL_GPIO_Init+0x30c>)
 8002130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002132:	4a5f      	ldr	r2, [pc, #380]	; (80022b0 <HAL_GPIO_Init+0x30c>)
 8002134:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002138:	6453      	str	r3, [r2, #68]	; 0x44
 800213a:	4b5d      	ldr	r3, [pc, #372]	; (80022b0 <HAL_GPIO_Init+0x30c>)
 800213c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002146:	4a5b      	ldr	r2, [pc, #364]	; (80022b4 <HAL_GPIO_Init+0x310>)
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	089b      	lsrs	r3, r3, #2
 800214c:	3302      	adds	r3, #2
 800214e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002152:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	f003 0303 	and.w	r3, r3, #3
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	220f      	movs	r2, #15
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	43db      	mvns	r3, r3
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	4013      	ands	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a52      	ldr	r2, [pc, #328]	; (80022b8 <HAL_GPIO_Init+0x314>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d02b      	beq.n	80021ca <HAL_GPIO_Init+0x226>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a51      	ldr	r2, [pc, #324]	; (80022bc <HAL_GPIO_Init+0x318>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d025      	beq.n	80021c6 <HAL_GPIO_Init+0x222>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a50      	ldr	r2, [pc, #320]	; (80022c0 <HAL_GPIO_Init+0x31c>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d01f      	beq.n	80021c2 <HAL_GPIO_Init+0x21e>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a4f      	ldr	r2, [pc, #316]	; (80022c4 <HAL_GPIO_Init+0x320>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d019      	beq.n	80021be <HAL_GPIO_Init+0x21a>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a4e      	ldr	r2, [pc, #312]	; (80022c8 <HAL_GPIO_Init+0x324>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d013      	beq.n	80021ba <HAL_GPIO_Init+0x216>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a4d      	ldr	r2, [pc, #308]	; (80022cc <HAL_GPIO_Init+0x328>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d00d      	beq.n	80021b6 <HAL_GPIO_Init+0x212>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a4c      	ldr	r2, [pc, #304]	; (80022d0 <HAL_GPIO_Init+0x32c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d007      	beq.n	80021b2 <HAL_GPIO_Init+0x20e>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a4b      	ldr	r2, [pc, #300]	; (80022d4 <HAL_GPIO_Init+0x330>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d101      	bne.n	80021ae <HAL_GPIO_Init+0x20a>
 80021aa:	2307      	movs	r3, #7
 80021ac:	e00e      	b.n	80021cc <HAL_GPIO_Init+0x228>
 80021ae:	2308      	movs	r3, #8
 80021b0:	e00c      	b.n	80021cc <HAL_GPIO_Init+0x228>
 80021b2:	2306      	movs	r3, #6
 80021b4:	e00a      	b.n	80021cc <HAL_GPIO_Init+0x228>
 80021b6:	2305      	movs	r3, #5
 80021b8:	e008      	b.n	80021cc <HAL_GPIO_Init+0x228>
 80021ba:	2304      	movs	r3, #4
 80021bc:	e006      	b.n	80021cc <HAL_GPIO_Init+0x228>
 80021be:	2303      	movs	r3, #3
 80021c0:	e004      	b.n	80021cc <HAL_GPIO_Init+0x228>
 80021c2:	2302      	movs	r3, #2
 80021c4:	e002      	b.n	80021cc <HAL_GPIO_Init+0x228>
 80021c6:	2301      	movs	r3, #1
 80021c8:	e000      	b.n	80021cc <HAL_GPIO_Init+0x228>
 80021ca:	2300      	movs	r3, #0
 80021cc:	69fa      	ldr	r2, [r7, #28]
 80021ce:	f002 0203 	and.w	r2, r2, #3
 80021d2:	0092      	lsls	r2, r2, #2
 80021d4:	4093      	lsls	r3, r2
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4313      	orrs	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021dc:	4935      	ldr	r1, [pc, #212]	; (80022b4 <HAL_GPIO_Init+0x310>)
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	089b      	lsrs	r3, r3, #2
 80021e2:	3302      	adds	r3, #2
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021ea:	4b3b      	ldr	r3, [pc, #236]	; (80022d8 <HAL_GPIO_Init+0x334>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	43db      	mvns	r3, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4013      	ands	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	4313      	orrs	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800220e:	4a32      	ldr	r2, [pc, #200]	; (80022d8 <HAL_GPIO_Init+0x334>)
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002214:	4b30      	ldr	r3, [pc, #192]	; (80022d8 <HAL_GPIO_Init+0x334>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	43db      	mvns	r3, r3
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4013      	ands	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d003      	beq.n	8002238 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	4313      	orrs	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002238:	4a27      	ldr	r2, [pc, #156]	; (80022d8 <HAL_GPIO_Init+0x334>)
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800223e:	4b26      	ldr	r3, [pc, #152]	; (80022d8 <HAL_GPIO_Init+0x334>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	43db      	mvns	r3, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4013      	ands	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002262:	4a1d      	ldr	r2, [pc, #116]	; (80022d8 <HAL_GPIO_Init+0x334>)
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002268:	4b1b      	ldr	r3, [pc, #108]	; (80022d8 <HAL_GPIO_Init+0x334>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	43db      	mvns	r3, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4013      	ands	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	4313      	orrs	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800228c:	4a12      	ldr	r2, [pc, #72]	; (80022d8 <HAL_GPIO_Init+0x334>)
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	3301      	adds	r3, #1
 8002296:	61fb      	str	r3, [r7, #28]
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	2b0f      	cmp	r3, #15
 800229c:	f67f ae90 	bls.w	8001fc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022a0:	bf00      	nop
 80022a2:	bf00      	nop
 80022a4:	3724      	adds	r7, #36	; 0x24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	40023800 	.word	0x40023800
 80022b4:	40013800 	.word	0x40013800
 80022b8:	40020000 	.word	0x40020000
 80022bc:	40020400 	.word	0x40020400
 80022c0:	40020800 	.word	0x40020800
 80022c4:	40020c00 	.word	0x40020c00
 80022c8:	40021000 	.word	0x40021000
 80022cc:	40021400 	.word	0x40021400
 80022d0:	40021800 	.word	0x40021800
 80022d4:	40021c00 	.word	0x40021c00
 80022d8:	40013c00 	.word	0x40013c00

080022dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	460b      	mov	r3, r1
 80022e6:	807b      	strh	r3, [r7, #2]
 80022e8:	4613      	mov	r3, r2
 80022ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022ec:	787b      	ldrb	r3, [r7, #1]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022f2:	887a      	ldrh	r2, [r7, #2]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022f8:	e003      	b.n	8002302 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022fa:	887b      	ldrh	r3, [r7, #2]
 80022fc:	041a      	lsls	r2, r3, #16
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	619a      	str	r2, [r3, #24]
}
 8002302:	bf00      	nop
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
	...

08002310 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e264      	b.n	80027ec <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b00      	cmp	r3, #0
 800232c:	d075      	beq.n	800241a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800232e:	4ba3      	ldr	r3, [pc, #652]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f003 030c 	and.w	r3, r3, #12
 8002336:	2b04      	cmp	r3, #4
 8002338:	d00c      	beq.n	8002354 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800233a:	4ba0      	ldr	r3, [pc, #640]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002342:	2b08      	cmp	r3, #8
 8002344:	d112      	bne.n	800236c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002346:	4b9d      	ldr	r3, [pc, #628]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800234e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002352:	d10b      	bne.n	800236c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002354:	4b99      	ldr	r3, [pc, #612]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d05b      	beq.n	8002418 <HAL_RCC_OscConfig+0x108>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d157      	bne.n	8002418 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e23f      	b.n	80027ec <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002374:	d106      	bne.n	8002384 <HAL_RCC_OscConfig+0x74>
 8002376:	4b91      	ldr	r3, [pc, #580]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a90      	ldr	r2, [pc, #576]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 800237c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002380:	6013      	str	r3, [r2, #0]
 8002382:	e01d      	b.n	80023c0 <HAL_RCC_OscConfig+0xb0>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800238c:	d10c      	bne.n	80023a8 <HAL_RCC_OscConfig+0x98>
 800238e:	4b8b      	ldr	r3, [pc, #556]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a8a      	ldr	r2, [pc, #552]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 8002394:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002398:	6013      	str	r3, [r2, #0]
 800239a:	4b88      	ldr	r3, [pc, #544]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a87      	ldr	r2, [pc, #540]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 80023a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a4:	6013      	str	r3, [r2, #0]
 80023a6:	e00b      	b.n	80023c0 <HAL_RCC_OscConfig+0xb0>
 80023a8:	4b84      	ldr	r3, [pc, #528]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a83      	ldr	r2, [pc, #524]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 80023ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023b2:	6013      	str	r3, [r2, #0]
 80023b4:	4b81      	ldr	r3, [pc, #516]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a80      	ldr	r2, [pc, #512]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 80023ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d013      	beq.n	80023f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c8:	f7ff fcaa 	bl	8001d20 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023d0:	f7ff fca6 	bl	8001d20 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b64      	cmp	r3, #100	; 0x64
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e204      	b.n	80027ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e2:	4b76      	ldr	r3, [pc, #472]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0f0      	beq.n	80023d0 <HAL_RCC_OscConfig+0xc0>
 80023ee:	e014      	b.n	800241a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f0:	f7ff fc96 	bl	8001d20 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023f8:	f7ff fc92 	bl	8001d20 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b64      	cmp	r3, #100	; 0x64
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e1f0      	b.n	80027ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800240a:	4b6c      	ldr	r3, [pc, #432]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1f0      	bne.n	80023f8 <HAL_RCC_OscConfig+0xe8>
 8002416:	e000      	b.n	800241a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002418:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d063      	beq.n	80024ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002426:	4b65      	ldr	r3, [pc, #404]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 030c 	and.w	r3, r3, #12
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00b      	beq.n	800244a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002432:	4b62      	ldr	r3, [pc, #392]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800243a:	2b08      	cmp	r3, #8
 800243c:	d11c      	bne.n	8002478 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800243e:	4b5f      	ldr	r3, [pc, #380]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d116      	bne.n	8002478 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800244a:	4b5c      	ldr	r3, [pc, #368]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d005      	beq.n	8002462 <HAL_RCC_OscConfig+0x152>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d001      	beq.n	8002462 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e1c4      	b.n	80027ec <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002462:	4b56      	ldr	r3, [pc, #344]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	4952      	ldr	r1, [pc, #328]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 8002472:	4313      	orrs	r3, r2
 8002474:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002476:	e03a      	b.n	80024ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d020      	beq.n	80024c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002480:	4b4f      	ldr	r3, [pc, #316]	; (80025c0 <HAL_RCC_OscConfig+0x2b0>)
 8002482:	2201      	movs	r2, #1
 8002484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002486:	f7ff fc4b 	bl	8001d20 <HAL_GetTick>
 800248a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800248c:	e008      	b.n	80024a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800248e:	f7ff fc47 	bl	8001d20 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	2b02      	cmp	r3, #2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e1a5      	b.n	80027ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a0:	4b46      	ldr	r3, [pc, #280]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d0f0      	beq.n	800248e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ac:	4b43      	ldr	r3, [pc, #268]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	4940      	ldr	r1, [pc, #256]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	600b      	str	r3, [r1, #0]
 80024c0:	e015      	b.n	80024ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024c2:	4b3f      	ldr	r3, [pc, #252]	; (80025c0 <HAL_RCC_OscConfig+0x2b0>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c8:	f7ff fc2a 	bl	8001d20 <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024d0:	f7ff fc26 	bl	8001d20 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e184      	b.n	80027ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024e2:	4b36      	ldr	r3, [pc, #216]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1f0      	bne.n	80024d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0308 	and.w	r3, r3, #8
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d030      	beq.n	800255c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d016      	beq.n	8002530 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002502:	4b30      	ldr	r3, [pc, #192]	; (80025c4 <HAL_RCC_OscConfig+0x2b4>)
 8002504:	2201      	movs	r2, #1
 8002506:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002508:	f7ff fc0a 	bl	8001d20 <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002510:	f7ff fc06 	bl	8001d20 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e164      	b.n	80027ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002522:	4b26      	ldr	r3, [pc, #152]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 8002524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d0f0      	beq.n	8002510 <HAL_RCC_OscConfig+0x200>
 800252e:	e015      	b.n	800255c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002530:	4b24      	ldr	r3, [pc, #144]	; (80025c4 <HAL_RCC_OscConfig+0x2b4>)
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002536:	f7ff fbf3 	bl	8001d20 <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800253c:	e008      	b.n	8002550 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800253e:	f7ff fbef 	bl	8001d20 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e14d      	b.n	80027ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002550:	4b1a      	ldr	r3, [pc, #104]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 8002552:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1f0      	bne.n	800253e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0304 	and.w	r3, r3, #4
 8002564:	2b00      	cmp	r3, #0
 8002566:	f000 80a0 	beq.w	80026aa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800256a:	2300      	movs	r3, #0
 800256c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800256e:	4b13      	ldr	r3, [pc, #76]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d10f      	bne.n	800259a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	60bb      	str	r3, [r7, #8]
 800257e:	4b0f      	ldr	r3, [pc, #60]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	4a0e      	ldr	r2, [pc, #56]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 8002584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002588:	6413      	str	r3, [r2, #64]	; 0x40
 800258a:	4b0c      	ldr	r3, [pc, #48]	; (80025bc <HAL_RCC_OscConfig+0x2ac>)
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002592:	60bb      	str	r3, [r7, #8]
 8002594:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002596:	2301      	movs	r3, #1
 8002598:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800259a:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <HAL_RCC_OscConfig+0x2b8>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d121      	bne.n	80025ea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025a6:	4b08      	ldr	r3, [pc, #32]	; (80025c8 <HAL_RCC_OscConfig+0x2b8>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a07      	ldr	r2, [pc, #28]	; (80025c8 <HAL_RCC_OscConfig+0x2b8>)
 80025ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025b2:	f7ff fbb5 	bl	8001d20 <HAL_GetTick>
 80025b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b8:	e011      	b.n	80025de <HAL_RCC_OscConfig+0x2ce>
 80025ba:	bf00      	nop
 80025bc:	40023800 	.word	0x40023800
 80025c0:	42470000 	.word	0x42470000
 80025c4:	42470e80 	.word	0x42470e80
 80025c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025cc:	f7ff fba8 	bl	8001d20 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e106      	b.n	80027ec <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025de:	4b85      	ldr	r3, [pc, #532]	; (80027f4 <HAL_RCC_OscConfig+0x4e4>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d0f0      	beq.n	80025cc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d106      	bne.n	8002600 <HAL_RCC_OscConfig+0x2f0>
 80025f2:	4b81      	ldr	r3, [pc, #516]	; (80027f8 <HAL_RCC_OscConfig+0x4e8>)
 80025f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f6:	4a80      	ldr	r2, [pc, #512]	; (80027f8 <HAL_RCC_OscConfig+0x4e8>)
 80025f8:	f043 0301 	orr.w	r3, r3, #1
 80025fc:	6713      	str	r3, [r2, #112]	; 0x70
 80025fe:	e01c      	b.n	800263a <HAL_RCC_OscConfig+0x32a>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	2b05      	cmp	r3, #5
 8002606:	d10c      	bne.n	8002622 <HAL_RCC_OscConfig+0x312>
 8002608:	4b7b      	ldr	r3, [pc, #492]	; (80027f8 <HAL_RCC_OscConfig+0x4e8>)
 800260a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260c:	4a7a      	ldr	r2, [pc, #488]	; (80027f8 <HAL_RCC_OscConfig+0x4e8>)
 800260e:	f043 0304 	orr.w	r3, r3, #4
 8002612:	6713      	str	r3, [r2, #112]	; 0x70
 8002614:	4b78      	ldr	r3, [pc, #480]	; (80027f8 <HAL_RCC_OscConfig+0x4e8>)
 8002616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002618:	4a77      	ldr	r2, [pc, #476]	; (80027f8 <HAL_RCC_OscConfig+0x4e8>)
 800261a:	f043 0301 	orr.w	r3, r3, #1
 800261e:	6713      	str	r3, [r2, #112]	; 0x70
 8002620:	e00b      	b.n	800263a <HAL_RCC_OscConfig+0x32a>
 8002622:	4b75      	ldr	r3, [pc, #468]	; (80027f8 <HAL_RCC_OscConfig+0x4e8>)
 8002624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002626:	4a74      	ldr	r2, [pc, #464]	; (80027f8 <HAL_RCC_OscConfig+0x4e8>)
 8002628:	f023 0301 	bic.w	r3, r3, #1
 800262c:	6713      	str	r3, [r2, #112]	; 0x70
 800262e:	4b72      	ldr	r3, [pc, #456]	; (80027f8 <HAL_RCC_OscConfig+0x4e8>)
 8002630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002632:	4a71      	ldr	r2, [pc, #452]	; (80027f8 <HAL_RCC_OscConfig+0x4e8>)
 8002634:	f023 0304 	bic.w	r3, r3, #4
 8002638:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d015      	beq.n	800266e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002642:	f7ff fb6d 	bl	8001d20 <HAL_GetTick>
 8002646:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002648:	e00a      	b.n	8002660 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800264a:	f7ff fb69 	bl	8001d20 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	f241 3288 	movw	r2, #5000	; 0x1388
 8002658:	4293      	cmp	r3, r2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e0c5      	b.n	80027ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002660:	4b65      	ldr	r3, [pc, #404]	; (80027f8 <HAL_RCC_OscConfig+0x4e8>)
 8002662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d0ee      	beq.n	800264a <HAL_RCC_OscConfig+0x33a>
 800266c:	e014      	b.n	8002698 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800266e:	f7ff fb57 	bl	8001d20 <HAL_GetTick>
 8002672:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002674:	e00a      	b.n	800268c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002676:	f7ff fb53 	bl	8001d20 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	f241 3288 	movw	r2, #5000	; 0x1388
 8002684:	4293      	cmp	r3, r2
 8002686:	d901      	bls.n	800268c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e0af      	b.n	80027ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800268c:	4b5a      	ldr	r3, [pc, #360]	; (80027f8 <HAL_RCC_OscConfig+0x4e8>)
 800268e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1ee      	bne.n	8002676 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002698:	7dfb      	ldrb	r3, [r7, #23]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d105      	bne.n	80026aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800269e:	4b56      	ldr	r3, [pc, #344]	; (80027f8 <HAL_RCC_OscConfig+0x4e8>)
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	4a55      	ldr	r2, [pc, #340]	; (80027f8 <HAL_RCC_OscConfig+0x4e8>)
 80026a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f000 809b 	beq.w	80027ea <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026b4:	4b50      	ldr	r3, [pc, #320]	; (80027f8 <HAL_RCC_OscConfig+0x4e8>)
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f003 030c 	and.w	r3, r3, #12
 80026bc:	2b08      	cmp	r3, #8
 80026be:	d05c      	beq.n	800277a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d141      	bne.n	800274c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026c8:	4b4c      	ldr	r3, [pc, #304]	; (80027fc <HAL_RCC_OscConfig+0x4ec>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ce:	f7ff fb27 	bl	8001d20 <HAL_GetTick>
 80026d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026d4:	e008      	b.n	80026e8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026d6:	f7ff fb23 	bl	8001d20 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e081      	b.n	80027ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026e8:	4b43      	ldr	r3, [pc, #268]	; (80027f8 <HAL_RCC_OscConfig+0x4e8>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1f0      	bne.n	80026d6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	69da      	ldr	r2, [r3, #28]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	431a      	orrs	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002702:	019b      	lsls	r3, r3, #6
 8002704:	431a      	orrs	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270a:	085b      	lsrs	r3, r3, #1
 800270c:	3b01      	subs	r3, #1
 800270e:	041b      	lsls	r3, r3, #16
 8002710:	431a      	orrs	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002716:	061b      	lsls	r3, r3, #24
 8002718:	4937      	ldr	r1, [pc, #220]	; (80027f8 <HAL_RCC_OscConfig+0x4e8>)
 800271a:	4313      	orrs	r3, r2
 800271c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800271e:	4b37      	ldr	r3, [pc, #220]	; (80027fc <HAL_RCC_OscConfig+0x4ec>)
 8002720:	2201      	movs	r2, #1
 8002722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002724:	f7ff fafc 	bl	8001d20 <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800272c:	f7ff faf8 	bl	8001d20 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e056      	b.n	80027ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800273e:	4b2e      	ldr	r3, [pc, #184]	; (80027f8 <HAL_RCC_OscConfig+0x4e8>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d0f0      	beq.n	800272c <HAL_RCC_OscConfig+0x41c>
 800274a:	e04e      	b.n	80027ea <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800274c:	4b2b      	ldr	r3, [pc, #172]	; (80027fc <HAL_RCC_OscConfig+0x4ec>)
 800274e:	2200      	movs	r2, #0
 8002750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002752:	f7ff fae5 	bl	8001d20 <HAL_GetTick>
 8002756:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002758:	e008      	b.n	800276c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800275a:	f7ff fae1 	bl	8001d20 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e03f      	b.n	80027ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800276c:	4b22      	ldr	r3, [pc, #136]	; (80027f8 <HAL_RCC_OscConfig+0x4e8>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1f0      	bne.n	800275a <HAL_RCC_OscConfig+0x44a>
 8002778:	e037      	b.n	80027ea <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d101      	bne.n	8002786 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e032      	b.n	80027ec <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002786:	4b1c      	ldr	r3, [pc, #112]	; (80027f8 <HAL_RCC_OscConfig+0x4e8>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d028      	beq.n	80027e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800279e:	429a      	cmp	r2, r3
 80027a0:	d121      	bne.n	80027e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d11a      	bne.n	80027e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027b6:	4013      	ands	r3, r2
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027bc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027be:	4293      	cmp	r3, r2
 80027c0:	d111      	bne.n	80027e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027cc:	085b      	lsrs	r3, r3, #1
 80027ce:	3b01      	subs	r3, #1
 80027d0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d107      	bne.n	80027e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d001      	beq.n	80027ea <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e000      	b.n	80027ec <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3718      	adds	r7, #24
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40007000 	.word	0x40007000
 80027f8:	40023800 	.word	0x40023800
 80027fc:	42470060 	.word	0x42470060

08002800 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e0cc      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002814:	4b68      	ldr	r3, [pc, #416]	; (80029b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0307 	and.w	r3, r3, #7
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	429a      	cmp	r2, r3
 8002820:	d90c      	bls.n	800283c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002822:	4b65      	ldr	r3, [pc, #404]	; (80029b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800282a:	4b63      	ldr	r3, [pc, #396]	; (80029b8 <HAL_RCC_ClockConfig+0x1b8>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0307 	and.w	r3, r3, #7
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	429a      	cmp	r2, r3
 8002836:	d001      	beq.n	800283c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e0b8      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d020      	beq.n	800288a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	2b00      	cmp	r3, #0
 8002852:	d005      	beq.n	8002860 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002854:	4b59      	ldr	r3, [pc, #356]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	4a58      	ldr	r2, [pc, #352]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 800285a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800285e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0308 	and.w	r3, r3, #8
 8002868:	2b00      	cmp	r3, #0
 800286a:	d005      	beq.n	8002878 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800286c:	4b53      	ldr	r3, [pc, #332]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	4a52      	ldr	r2, [pc, #328]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002872:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002876:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002878:	4b50      	ldr	r3, [pc, #320]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	494d      	ldr	r1, [pc, #308]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002886:	4313      	orrs	r3, r2
 8002888:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d044      	beq.n	8002920 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d107      	bne.n	80028ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800289e:	4b47      	ldr	r3, [pc, #284]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d119      	bne.n	80028de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e07f      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d003      	beq.n	80028be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028ba:	2b03      	cmp	r3, #3
 80028bc:	d107      	bne.n	80028ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028be:	4b3f      	ldr	r3, [pc, #252]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d109      	bne.n	80028de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e06f      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ce:	4b3b      	ldr	r3, [pc, #236]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e067      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028de:	4b37      	ldr	r3, [pc, #220]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f023 0203 	bic.w	r2, r3, #3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	4934      	ldr	r1, [pc, #208]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028f0:	f7ff fa16 	bl	8001d20 <HAL_GetTick>
 80028f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f6:	e00a      	b.n	800290e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f8:	f7ff fa12 	bl	8001d20 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	f241 3288 	movw	r2, #5000	; 0x1388
 8002906:	4293      	cmp	r3, r2
 8002908:	d901      	bls.n	800290e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e04f      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800290e:	4b2b      	ldr	r3, [pc, #172]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f003 020c 	and.w	r2, r3, #12
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	429a      	cmp	r2, r3
 800291e:	d1eb      	bne.n	80028f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002920:	4b25      	ldr	r3, [pc, #148]	; (80029b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	429a      	cmp	r2, r3
 800292c:	d20c      	bcs.n	8002948 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800292e:	4b22      	ldr	r3, [pc, #136]	; (80029b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002936:	4b20      	ldr	r3, [pc, #128]	; (80029b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0307 	and.w	r3, r3, #7
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	429a      	cmp	r2, r3
 8002942:	d001      	beq.n	8002948 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e032      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b00      	cmp	r3, #0
 8002952:	d008      	beq.n	8002966 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002954:	4b19      	ldr	r3, [pc, #100]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	4916      	ldr	r1, [pc, #88]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002962:	4313      	orrs	r3, r2
 8002964:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0308 	and.w	r3, r3, #8
 800296e:	2b00      	cmp	r3, #0
 8002970:	d009      	beq.n	8002986 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002972:	4b12      	ldr	r3, [pc, #72]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	490e      	ldr	r1, [pc, #56]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002982:	4313      	orrs	r3, r2
 8002984:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002986:	f000 f821 	bl	80029cc <HAL_RCC_GetSysClockFreq>
 800298a:	4602      	mov	r2, r0
 800298c:	4b0b      	ldr	r3, [pc, #44]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	091b      	lsrs	r3, r3, #4
 8002992:	f003 030f 	and.w	r3, r3, #15
 8002996:	490a      	ldr	r1, [pc, #40]	; (80029c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002998:	5ccb      	ldrb	r3, [r1, r3]
 800299a:	fa22 f303 	lsr.w	r3, r2, r3
 800299e:	4a09      	ldr	r2, [pc, #36]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 80029a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029a2:	4b09      	ldr	r3, [pc, #36]	; (80029c8 <HAL_RCC_ClockConfig+0x1c8>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7ff f976 	bl	8001c98 <HAL_InitTick>

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	40023c00 	.word	0x40023c00
 80029bc:	40023800 	.word	0x40023800
 80029c0:	0800450c 	.word	0x0800450c
 80029c4:	20000004 	.word	0x20000004
 80029c8:	20000008 	.word	0x20000008

080029cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029cc:	b5b0      	push	{r4, r5, r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029d2:	2100      	movs	r1, #0
 80029d4:	6079      	str	r1, [r7, #4]
 80029d6:	2100      	movs	r1, #0
 80029d8:	60f9      	str	r1, [r7, #12]
 80029da:	2100      	movs	r1, #0
 80029dc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80029de:	2100      	movs	r1, #0
 80029e0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029e2:	4952      	ldr	r1, [pc, #328]	; (8002b2c <HAL_RCC_GetSysClockFreq+0x160>)
 80029e4:	6889      	ldr	r1, [r1, #8]
 80029e6:	f001 010c 	and.w	r1, r1, #12
 80029ea:	2908      	cmp	r1, #8
 80029ec:	d00d      	beq.n	8002a0a <HAL_RCC_GetSysClockFreq+0x3e>
 80029ee:	2908      	cmp	r1, #8
 80029f0:	f200 8094 	bhi.w	8002b1c <HAL_RCC_GetSysClockFreq+0x150>
 80029f4:	2900      	cmp	r1, #0
 80029f6:	d002      	beq.n	80029fe <HAL_RCC_GetSysClockFreq+0x32>
 80029f8:	2904      	cmp	r1, #4
 80029fa:	d003      	beq.n	8002a04 <HAL_RCC_GetSysClockFreq+0x38>
 80029fc:	e08e      	b.n	8002b1c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029fe:	4b4c      	ldr	r3, [pc, #304]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x164>)
 8002a00:	60bb      	str	r3, [r7, #8]
       break;
 8002a02:	e08e      	b.n	8002b22 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a04:	4b4b      	ldr	r3, [pc, #300]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x168>)
 8002a06:	60bb      	str	r3, [r7, #8]
      break;
 8002a08:	e08b      	b.n	8002b22 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a0a:	4948      	ldr	r1, [pc, #288]	; (8002b2c <HAL_RCC_GetSysClockFreq+0x160>)
 8002a0c:	6849      	ldr	r1, [r1, #4]
 8002a0e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002a12:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a14:	4945      	ldr	r1, [pc, #276]	; (8002b2c <HAL_RCC_GetSysClockFreq+0x160>)
 8002a16:	6849      	ldr	r1, [r1, #4]
 8002a18:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002a1c:	2900      	cmp	r1, #0
 8002a1e:	d024      	beq.n	8002a6a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a20:	4942      	ldr	r1, [pc, #264]	; (8002b2c <HAL_RCC_GetSysClockFreq+0x160>)
 8002a22:	6849      	ldr	r1, [r1, #4]
 8002a24:	0989      	lsrs	r1, r1, #6
 8002a26:	4608      	mov	r0, r1
 8002a28:	f04f 0100 	mov.w	r1, #0
 8002a2c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002a30:	f04f 0500 	mov.w	r5, #0
 8002a34:	ea00 0204 	and.w	r2, r0, r4
 8002a38:	ea01 0305 	and.w	r3, r1, r5
 8002a3c:	493d      	ldr	r1, [pc, #244]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x168>)
 8002a3e:	fb01 f003 	mul.w	r0, r1, r3
 8002a42:	2100      	movs	r1, #0
 8002a44:	fb01 f102 	mul.w	r1, r1, r2
 8002a48:	1844      	adds	r4, r0, r1
 8002a4a:	493a      	ldr	r1, [pc, #232]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x168>)
 8002a4c:	fba2 0101 	umull	r0, r1, r2, r1
 8002a50:	1863      	adds	r3, r4, r1
 8002a52:	4619      	mov	r1, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	461a      	mov	r2, r3
 8002a58:	f04f 0300 	mov.w	r3, #0
 8002a5c:	f7fd fc10 	bl	8000280 <__aeabi_uldivmod>
 8002a60:	4602      	mov	r2, r0
 8002a62:	460b      	mov	r3, r1
 8002a64:	4613      	mov	r3, r2
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	e04a      	b.n	8002b00 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a6a:	4b30      	ldr	r3, [pc, #192]	; (8002b2c <HAL_RCC_GetSysClockFreq+0x160>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	099b      	lsrs	r3, r3, #6
 8002a70:	461a      	mov	r2, r3
 8002a72:	f04f 0300 	mov.w	r3, #0
 8002a76:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a7a:	f04f 0100 	mov.w	r1, #0
 8002a7e:	ea02 0400 	and.w	r4, r2, r0
 8002a82:	ea03 0501 	and.w	r5, r3, r1
 8002a86:	4620      	mov	r0, r4
 8002a88:	4629      	mov	r1, r5
 8002a8a:	f04f 0200 	mov.w	r2, #0
 8002a8e:	f04f 0300 	mov.w	r3, #0
 8002a92:	014b      	lsls	r3, r1, #5
 8002a94:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a98:	0142      	lsls	r2, r0, #5
 8002a9a:	4610      	mov	r0, r2
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	1b00      	subs	r0, r0, r4
 8002aa0:	eb61 0105 	sbc.w	r1, r1, r5
 8002aa4:	f04f 0200 	mov.w	r2, #0
 8002aa8:	f04f 0300 	mov.w	r3, #0
 8002aac:	018b      	lsls	r3, r1, #6
 8002aae:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ab2:	0182      	lsls	r2, r0, #6
 8002ab4:	1a12      	subs	r2, r2, r0
 8002ab6:	eb63 0301 	sbc.w	r3, r3, r1
 8002aba:	f04f 0000 	mov.w	r0, #0
 8002abe:	f04f 0100 	mov.w	r1, #0
 8002ac2:	00d9      	lsls	r1, r3, #3
 8002ac4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ac8:	00d0      	lsls	r0, r2, #3
 8002aca:	4602      	mov	r2, r0
 8002acc:	460b      	mov	r3, r1
 8002ace:	1912      	adds	r2, r2, r4
 8002ad0:	eb45 0303 	adc.w	r3, r5, r3
 8002ad4:	f04f 0000 	mov.w	r0, #0
 8002ad8:	f04f 0100 	mov.w	r1, #0
 8002adc:	0299      	lsls	r1, r3, #10
 8002ade:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002ae2:	0290      	lsls	r0, r2, #10
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	4610      	mov	r0, r2
 8002aea:	4619      	mov	r1, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	461a      	mov	r2, r3
 8002af0:	f04f 0300 	mov.w	r3, #0
 8002af4:	f7fd fbc4 	bl	8000280 <__aeabi_uldivmod>
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
 8002afc:	4613      	mov	r3, r2
 8002afe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b00:	4b0a      	ldr	r3, [pc, #40]	; (8002b2c <HAL_RCC_GetSysClockFreq+0x160>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	0c1b      	lsrs	r3, r3, #16
 8002b06:	f003 0303 	and.w	r3, r3, #3
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b18:	60bb      	str	r3, [r7, #8]
      break;
 8002b1a:	e002      	b.n	8002b22 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b1c:	4b04      	ldr	r3, [pc, #16]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x164>)
 8002b1e:	60bb      	str	r3, [r7, #8]
      break;
 8002b20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b22:	68bb      	ldr	r3, [r7, #8]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3710      	adds	r7, #16
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bdb0      	pop	{r4, r5, r7, pc}
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	00f42400 	.word	0x00f42400
 8002b34:	017d7840 	.word	0x017d7840

08002b38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b3c:	4b03      	ldr	r3, [pc, #12]	; (8002b4c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	20000004 	.word	0x20000004

08002b50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b54:	f7ff fff0 	bl	8002b38 <HAL_RCC_GetHCLKFreq>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	4b05      	ldr	r3, [pc, #20]	; (8002b70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	0a9b      	lsrs	r3, r3, #10
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	4903      	ldr	r1, [pc, #12]	; (8002b74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b66:	5ccb      	ldrb	r3, [r1, r3]
 8002b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40023800 	.word	0x40023800
 8002b74:	0800451c 	.word	0x0800451c

08002b78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b7c:	f7ff ffdc 	bl	8002b38 <HAL_RCC_GetHCLKFreq>
 8002b80:	4602      	mov	r2, r0
 8002b82:	4b05      	ldr	r3, [pc, #20]	; (8002b98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	0b5b      	lsrs	r3, r3, #13
 8002b88:	f003 0307 	and.w	r3, r3, #7
 8002b8c:	4903      	ldr	r1, [pc, #12]	; (8002b9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b8e:	5ccb      	ldrb	r3, [r1, r3]
 8002b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	0800451c 	.word	0x0800451c

08002ba0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e07b      	b.n	8002caa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d108      	bne.n	8002bcc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bc2:	d009      	beq.n	8002bd8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	61da      	str	r2, [r3, #28]
 8002bca:	e005      	b.n	8002bd8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d106      	bne.n	8002bf8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7fe fef0 	bl	80019d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c0e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002c20:	431a      	orrs	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	431a      	orrs	r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	69db      	ldr	r3, [r3, #28]
 8002c4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c52:	431a      	orrs	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c5c:	ea42 0103 	orr.w	r1, r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c64:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	0c1b      	lsrs	r3, r3, #16
 8002c76:	f003 0104 	and.w	r1, r3, #4
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7e:	f003 0210 	and.w	r2, r3, #16
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	430a      	orrs	r2, r1
 8002c88:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	69da      	ldr	r2, [r3, #28]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c98:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b088      	sub	sp, #32
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	60f8      	str	r0, [r7, #12]
 8002cba:	60b9      	str	r1, [r7, #8]
 8002cbc:	603b      	str	r3, [r7, #0]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d101      	bne.n	8002cd4 <HAL_SPI_Transmit+0x22>
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	e126      	b.n	8002f22 <HAL_SPI_Transmit+0x270>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cdc:	f7ff f820 	bl	8001d20 <HAL_GetTick>
 8002ce0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002ce2:	88fb      	ldrh	r3, [r7, #6]
 8002ce4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d002      	beq.n	8002cf8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002cf6:	e10b      	b.n	8002f10 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d002      	beq.n	8002d04 <HAL_SPI_Transmit+0x52>
 8002cfe:	88fb      	ldrh	r3, [r7, #6]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d102      	bne.n	8002d0a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d08:	e102      	b.n	8002f10 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2203      	movs	r2, #3
 8002d0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	68ba      	ldr	r2, [r7, #8]
 8002d1c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	88fa      	ldrh	r2, [r7, #6]
 8002d22:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	88fa      	ldrh	r2, [r7, #6]
 8002d28:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d50:	d10f      	bne.n	8002d72 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d60:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d70:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d7c:	2b40      	cmp	r3, #64	; 0x40
 8002d7e:	d007      	beq.n	8002d90 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d98:	d14b      	bne.n	8002e32 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d002      	beq.n	8002da8 <HAL_SPI_Transmit+0xf6>
 8002da2:	8afb      	ldrh	r3, [r7, #22]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d13e      	bne.n	8002e26 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dac:	881a      	ldrh	r2, [r3, #0]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db8:	1c9a      	adds	r2, r3, #2
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002dcc:	e02b      	b.n	8002e26 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d112      	bne.n	8002e02 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de0:	881a      	ldrh	r2, [r3, #0]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dec:	1c9a      	adds	r2, r3, #2
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	86da      	strh	r2, [r3, #54]	; 0x36
 8002e00:	e011      	b.n	8002e26 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e02:	f7fe ff8d 	bl	8001d20 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d803      	bhi.n	8002e1a <HAL_SPI_Transmit+0x168>
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e18:	d102      	bne.n	8002e20 <HAL_SPI_Transmit+0x16e>
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d102      	bne.n	8002e26 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e24:	e074      	b.n	8002f10 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1ce      	bne.n	8002dce <HAL_SPI_Transmit+0x11c>
 8002e30:	e04c      	b.n	8002ecc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d002      	beq.n	8002e40 <HAL_SPI_Transmit+0x18e>
 8002e3a:	8afb      	ldrh	r3, [r7, #22]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d140      	bne.n	8002ec2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	330c      	adds	r3, #12
 8002e4a:	7812      	ldrb	r2, [r2, #0]
 8002e4c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e52:	1c5a      	adds	r2, r3, #1
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002e66:	e02c      	b.n	8002ec2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d113      	bne.n	8002e9e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	330c      	adds	r3, #12
 8002e80:	7812      	ldrb	r2, [r2, #0]
 8002e82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e88:	1c5a      	adds	r2, r3, #1
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	3b01      	subs	r3, #1
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	86da      	strh	r2, [r3, #54]	; 0x36
 8002e9c:	e011      	b.n	8002ec2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e9e:	f7fe ff3f 	bl	8001d20 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	683a      	ldr	r2, [r7, #0]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d803      	bhi.n	8002eb6 <HAL_SPI_Transmit+0x204>
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002eb4:	d102      	bne.n	8002ebc <HAL_SPI_Transmit+0x20a>
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d102      	bne.n	8002ec2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ec0:	e026      	b.n	8002f10 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1cd      	bne.n	8002e68 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	6839      	ldr	r1, [r7, #0]
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f000 f8b3 	bl	800303c <SPI_EndRxTxTransaction>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d002      	beq.n	8002ee2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2220      	movs	r2, #32
 8002ee0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10a      	bne.n	8002f00 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002eea:	2300      	movs	r3, #0
 8002eec:	613b      	str	r3, [r7, #16]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	613b      	str	r3, [r7, #16]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	613b      	str	r3, [r7, #16]
 8002efe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d002      	beq.n	8002f0e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	77fb      	strb	r3, [r7, #31]
 8002f0c:	e000      	b.n	8002f10 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002f0e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002f20:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3720      	adds	r7, #32
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
	...

08002f2c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b088      	sub	sp, #32
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	603b      	str	r3, [r7, #0]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002f3c:	f7fe fef0 	bl	8001d20 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f44:	1a9b      	subs	r3, r3, r2
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	4413      	add	r3, r2
 8002f4a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002f4c:	f7fe fee8 	bl	8001d20 <HAL_GetTick>
 8002f50:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002f52:	4b39      	ldr	r3, [pc, #228]	; (8003038 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	015b      	lsls	r3, r3, #5
 8002f58:	0d1b      	lsrs	r3, r3, #20
 8002f5a:	69fa      	ldr	r2, [r7, #28]
 8002f5c:	fb02 f303 	mul.w	r3, r2, r3
 8002f60:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f62:	e054      	b.n	800300e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f6a:	d050      	beq.n	800300e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f6c:	f7fe fed8 	bl	8001d20 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	69fa      	ldr	r2, [r7, #28]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d902      	bls.n	8002f82 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d13d      	bne.n	8002ffe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002f90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f9a:	d111      	bne.n	8002fc0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fa4:	d004      	beq.n	8002fb0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fae:	d107      	bne.n	8002fc0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fbe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fc8:	d10f      	bne.n	8002fea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fe8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e017      	b.n	800302e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d101      	bne.n	8003008 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003004:	2300      	movs	r3, #0
 8003006:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	3b01      	subs	r3, #1
 800300c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	4013      	ands	r3, r2
 8003018:	68ba      	ldr	r2, [r7, #8]
 800301a:	429a      	cmp	r2, r3
 800301c:	bf0c      	ite	eq
 800301e:	2301      	moveq	r3, #1
 8003020:	2300      	movne	r3, #0
 8003022:	b2db      	uxtb	r3, r3
 8003024:	461a      	mov	r2, r3
 8003026:	79fb      	ldrb	r3, [r7, #7]
 8003028:	429a      	cmp	r2, r3
 800302a:	d19b      	bne.n	8002f64 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3720      	adds	r7, #32
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	20000004 	.word	0x20000004

0800303c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b088      	sub	sp, #32
 8003040:	af02      	add	r7, sp, #8
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003048:	4b1b      	ldr	r3, [pc, #108]	; (80030b8 <SPI_EndRxTxTransaction+0x7c>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a1b      	ldr	r2, [pc, #108]	; (80030bc <SPI_EndRxTxTransaction+0x80>)
 800304e:	fba2 2303 	umull	r2, r3, r2, r3
 8003052:	0d5b      	lsrs	r3, r3, #21
 8003054:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003058:	fb02 f303 	mul.w	r3, r2, r3
 800305c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003066:	d112      	bne.n	800308e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	2200      	movs	r2, #0
 8003070:	2180      	movs	r1, #128	; 0x80
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f7ff ff5a 	bl	8002f2c <SPI_WaitFlagStateUntilTimeout>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d016      	beq.n	80030ac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003082:	f043 0220 	orr.w	r2, r3, #32
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e00f      	b.n	80030ae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00a      	beq.n	80030aa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	3b01      	subs	r3, #1
 8003098:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a4:	2b80      	cmp	r3, #128	; 0x80
 80030a6:	d0f2      	beq.n	800308e <SPI_EndRxTxTransaction+0x52>
 80030a8:	e000      	b.n	80030ac <SPI_EndRxTxTransaction+0x70>
        break;
 80030aa:	bf00      	nop
  }

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3718      	adds	r7, #24
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	20000004 	.word	0x20000004
 80030bc:	165e9f81 	.word	0x165e9f81

080030c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e03f      	b.n	8003152 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d106      	bne.n	80030ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f7fe fcbe 	bl	8001a68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2224      	movs	r2, #36	; 0x24
 80030f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68da      	ldr	r2, [r3, #12]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003102:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 f829 	bl	800315c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	691a      	ldr	r2, [r3, #16]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003118:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	695a      	ldr	r2, [r3, #20]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003128:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68da      	ldr	r2, [r3, #12]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003138:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2220      	movs	r2, #32
 8003144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2220      	movs	r2, #32
 800314c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
	...

0800315c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800315c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003160:	b09f      	sub	sp, #124	; 0x7c
 8003162:	af00      	add	r7, sp, #0
 8003164:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003172:	68d9      	ldr	r1, [r3, #12]
 8003174:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	ea40 0301 	orr.w	r3, r0, r1
 800317c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800317e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003180:	689a      	ldr	r2, [r3, #8]
 8003182:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	431a      	orrs	r2, r3
 8003188:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800318a:	695b      	ldr	r3, [r3, #20]
 800318c:	431a      	orrs	r2, r3
 800318e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	4313      	orrs	r3, r2
 8003194:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003196:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80031a0:	f021 010c 	bic.w	r1, r1, #12
 80031a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031aa:	430b      	orrs	r3, r1
 80031ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	695b      	ldr	r3, [r3, #20]
 80031b4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80031b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ba:	6999      	ldr	r1, [r3, #24]
 80031bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	ea40 0301 	orr.w	r3, r0, r1
 80031c4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	4bc5      	ldr	r3, [pc, #788]	; (80034e0 <UART_SetConfig+0x384>)
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d004      	beq.n	80031da <UART_SetConfig+0x7e>
 80031d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	4bc3      	ldr	r3, [pc, #780]	; (80034e4 <UART_SetConfig+0x388>)
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d103      	bne.n	80031e2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80031da:	f7ff fccd 	bl	8002b78 <HAL_RCC_GetPCLK2Freq>
 80031de:	6778      	str	r0, [r7, #116]	; 0x74
 80031e0:	e002      	b.n	80031e8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80031e2:	f7ff fcb5 	bl	8002b50 <HAL_RCC_GetPCLK1Freq>
 80031e6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ea:	69db      	ldr	r3, [r3, #28]
 80031ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031f0:	f040 80b6 	bne.w	8003360 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80031f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031f6:	461c      	mov	r4, r3
 80031f8:	f04f 0500 	mov.w	r5, #0
 80031fc:	4622      	mov	r2, r4
 80031fe:	462b      	mov	r3, r5
 8003200:	1891      	adds	r1, r2, r2
 8003202:	6439      	str	r1, [r7, #64]	; 0x40
 8003204:	415b      	adcs	r3, r3
 8003206:	647b      	str	r3, [r7, #68]	; 0x44
 8003208:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800320c:	1912      	adds	r2, r2, r4
 800320e:	eb45 0303 	adc.w	r3, r5, r3
 8003212:	f04f 0000 	mov.w	r0, #0
 8003216:	f04f 0100 	mov.w	r1, #0
 800321a:	00d9      	lsls	r1, r3, #3
 800321c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003220:	00d0      	lsls	r0, r2, #3
 8003222:	4602      	mov	r2, r0
 8003224:	460b      	mov	r3, r1
 8003226:	1911      	adds	r1, r2, r4
 8003228:	6639      	str	r1, [r7, #96]	; 0x60
 800322a:	416b      	adcs	r3, r5
 800322c:	667b      	str	r3, [r7, #100]	; 0x64
 800322e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	461a      	mov	r2, r3
 8003234:	f04f 0300 	mov.w	r3, #0
 8003238:	1891      	adds	r1, r2, r2
 800323a:	63b9      	str	r1, [r7, #56]	; 0x38
 800323c:	415b      	adcs	r3, r3
 800323e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003240:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003244:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003248:	f7fd f81a 	bl	8000280 <__aeabi_uldivmod>
 800324c:	4602      	mov	r2, r0
 800324e:	460b      	mov	r3, r1
 8003250:	4ba5      	ldr	r3, [pc, #660]	; (80034e8 <UART_SetConfig+0x38c>)
 8003252:	fba3 2302 	umull	r2, r3, r3, r2
 8003256:	095b      	lsrs	r3, r3, #5
 8003258:	011e      	lsls	r6, r3, #4
 800325a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800325c:	461c      	mov	r4, r3
 800325e:	f04f 0500 	mov.w	r5, #0
 8003262:	4622      	mov	r2, r4
 8003264:	462b      	mov	r3, r5
 8003266:	1891      	adds	r1, r2, r2
 8003268:	6339      	str	r1, [r7, #48]	; 0x30
 800326a:	415b      	adcs	r3, r3
 800326c:	637b      	str	r3, [r7, #52]	; 0x34
 800326e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003272:	1912      	adds	r2, r2, r4
 8003274:	eb45 0303 	adc.w	r3, r5, r3
 8003278:	f04f 0000 	mov.w	r0, #0
 800327c:	f04f 0100 	mov.w	r1, #0
 8003280:	00d9      	lsls	r1, r3, #3
 8003282:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003286:	00d0      	lsls	r0, r2, #3
 8003288:	4602      	mov	r2, r0
 800328a:	460b      	mov	r3, r1
 800328c:	1911      	adds	r1, r2, r4
 800328e:	65b9      	str	r1, [r7, #88]	; 0x58
 8003290:	416b      	adcs	r3, r5
 8003292:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003294:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	461a      	mov	r2, r3
 800329a:	f04f 0300 	mov.w	r3, #0
 800329e:	1891      	adds	r1, r2, r2
 80032a0:	62b9      	str	r1, [r7, #40]	; 0x28
 80032a2:	415b      	adcs	r3, r3
 80032a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032aa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80032ae:	f7fc ffe7 	bl	8000280 <__aeabi_uldivmod>
 80032b2:	4602      	mov	r2, r0
 80032b4:	460b      	mov	r3, r1
 80032b6:	4b8c      	ldr	r3, [pc, #560]	; (80034e8 <UART_SetConfig+0x38c>)
 80032b8:	fba3 1302 	umull	r1, r3, r3, r2
 80032bc:	095b      	lsrs	r3, r3, #5
 80032be:	2164      	movs	r1, #100	; 0x64
 80032c0:	fb01 f303 	mul.w	r3, r1, r3
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	3332      	adds	r3, #50	; 0x32
 80032ca:	4a87      	ldr	r2, [pc, #540]	; (80034e8 <UART_SetConfig+0x38c>)
 80032cc:	fba2 2303 	umull	r2, r3, r2, r3
 80032d0:	095b      	lsrs	r3, r3, #5
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80032d8:	441e      	add	r6, r3
 80032da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032dc:	4618      	mov	r0, r3
 80032de:	f04f 0100 	mov.w	r1, #0
 80032e2:	4602      	mov	r2, r0
 80032e4:	460b      	mov	r3, r1
 80032e6:	1894      	adds	r4, r2, r2
 80032e8:	623c      	str	r4, [r7, #32]
 80032ea:	415b      	adcs	r3, r3
 80032ec:	627b      	str	r3, [r7, #36]	; 0x24
 80032ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80032f2:	1812      	adds	r2, r2, r0
 80032f4:	eb41 0303 	adc.w	r3, r1, r3
 80032f8:	f04f 0400 	mov.w	r4, #0
 80032fc:	f04f 0500 	mov.w	r5, #0
 8003300:	00dd      	lsls	r5, r3, #3
 8003302:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003306:	00d4      	lsls	r4, r2, #3
 8003308:	4622      	mov	r2, r4
 800330a:	462b      	mov	r3, r5
 800330c:	1814      	adds	r4, r2, r0
 800330e:	653c      	str	r4, [r7, #80]	; 0x50
 8003310:	414b      	adcs	r3, r1
 8003312:	657b      	str	r3, [r7, #84]	; 0x54
 8003314:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	461a      	mov	r2, r3
 800331a:	f04f 0300 	mov.w	r3, #0
 800331e:	1891      	adds	r1, r2, r2
 8003320:	61b9      	str	r1, [r7, #24]
 8003322:	415b      	adcs	r3, r3
 8003324:	61fb      	str	r3, [r7, #28]
 8003326:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800332a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800332e:	f7fc ffa7 	bl	8000280 <__aeabi_uldivmod>
 8003332:	4602      	mov	r2, r0
 8003334:	460b      	mov	r3, r1
 8003336:	4b6c      	ldr	r3, [pc, #432]	; (80034e8 <UART_SetConfig+0x38c>)
 8003338:	fba3 1302 	umull	r1, r3, r3, r2
 800333c:	095b      	lsrs	r3, r3, #5
 800333e:	2164      	movs	r1, #100	; 0x64
 8003340:	fb01 f303 	mul.w	r3, r1, r3
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	3332      	adds	r3, #50	; 0x32
 800334a:	4a67      	ldr	r2, [pc, #412]	; (80034e8 <UART_SetConfig+0x38c>)
 800334c:	fba2 2303 	umull	r2, r3, r2, r3
 8003350:	095b      	lsrs	r3, r3, #5
 8003352:	f003 0207 	and.w	r2, r3, #7
 8003356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4432      	add	r2, r6
 800335c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800335e:	e0b9      	b.n	80034d4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003360:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003362:	461c      	mov	r4, r3
 8003364:	f04f 0500 	mov.w	r5, #0
 8003368:	4622      	mov	r2, r4
 800336a:	462b      	mov	r3, r5
 800336c:	1891      	adds	r1, r2, r2
 800336e:	6139      	str	r1, [r7, #16]
 8003370:	415b      	adcs	r3, r3
 8003372:	617b      	str	r3, [r7, #20]
 8003374:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003378:	1912      	adds	r2, r2, r4
 800337a:	eb45 0303 	adc.w	r3, r5, r3
 800337e:	f04f 0000 	mov.w	r0, #0
 8003382:	f04f 0100 	mov.w	r1, #0
 8003386:	00d9      	lsls	r1, r3, #3
 8003388:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800338c:	00d0      	lsls	r0, r2, #3
 800338e:	4602      	mov	r2, r0
 8003390:	460b      	mov	r3, r1
 8003392:	eb12 0804 	adds.w	r8, r2, r4
 8003396:	eb43 0905 	adc.w	r9, r3, r5
 800339a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	4618      	mov	r0, r3
 80033a0:	f04f 0100 	mov.w	r1, #0
 80033a4:	f04f 0200 	mov.w	r2, #0
 80033a8:	f04f 0300 	mov.w	r3, #0
 80033ac:	008b      	lsls	r3, r1, #2
 80033ae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80033b2:	0082      	lsls	r2, r0, #2
 80033b4:	4640      	mov	r0, r8
 80033b6:	4649      	mov	r1, r9
 80033b8:	f7fc ff62 	bl	8000280 <__aeabi_uldivmod>
 80033bc:	4602      	mov	r2, r0
 80033be:	460b      	mov	r3, r1
 80033c0:	4b49      	ldr	r3, [pc, #292]	; (80034e8 <UART_SetConfig+0x38c>)
 80033c2:	fba3 2302 	umull	r2, r3, r3, r2
 80033c6:	095b      	lsrs	r3, r3, #5
 80033c8:	011e      	lsls	r6, r3, #4
 80033ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033cc:	4618      	mov	r0, r3
 80033ce:	f04f 0100 	mov.w	r1, #0
 80033d2:	4602      	mov	r2, r0
 80033d4:	460b      	mov	r3, r1
 80033d6:	1894      	adds	r4, r2, r2
 80033d8:	60bc      	str	r4, [r7, #8]
 80033da:	415b      	adcs	r3, r3
 80033dc:	60fb      	str	r3, [r7, #12]
 80033de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033e2:	1812      	adds	r2, r2, r0
 80033e4:	eb41 0303 	adc.w	r3, r1, r3
 80033e8:	f04f 0400 	mov.w	r4, #0
 80033ec:	f04f 0500 	mov.w	r5, #0
 80033f0:	00dd      	lsls	r5, r3, #3
 80033f2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80033f6:	00d4      	lsls	r4, r2, #3
 80033f8:	4622      	mov	r2, r4
 80033fa:	462b      	mov	r3, r5
 80033fc:	1814      	adds	r4, r2, r0
 80033fe:	64bc      	str	r4, [r7, #72]	; 0x48
 8003400:	414b      	adcs	r3, r1
 8003402:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003404:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	4618      	mov	r0, r3
 800340a:	f04f 0100 	mov.w	r1, #0
 800340e:	f04f 0200 	mov.w	r2, #0
 8003412:	f04f 0300 	mov.w	r3, #0
 8003416:	008b      	lsls	r3, r1, #2
 8003418:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800341c:	0082      	lsls	r2, r0, #2
 800341e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003422:	f7fc ff2d 	bl	8000280 <__aeabi_uldivmod>
 8003426:	4602      	mov	r2, r0
 8003428:	460b      	mov	r3, r1
 800342a:	4b2f      	ldr	r3, [pc, #188]	; (80034e8 <UART_SetConfig+0x38c>)
 800342c:	fba3 1302 	umull	r1, r3, r3, r2
 8003430:	095b      	lsrs	r3, r3, #5
 8003432:	2164      	movs	r1, #100	; 0x64
 8003434:	fb01 f303 	mul.w	r3, r1, r3
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	011b      	lsls	r3, r3, #4
 800343c:	3332      	adds	r3, #50	; 0x32
 800343e:	4a2a      	ldr	r2, [pc, #168]	; (80034e8 <UART_SetConfig+0x38c>)
 8003440:	fba2 2303 	umull	r2, r3, r2, r3
 8003444:	095b      	lsrs	r3, r3, #5
 8003446:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800344a:	441e      	add	r6, r3
 800344c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800344e:	4618      	mov	r0, r3
 8003450:	f04f 0100 	mov.w	r1, #0
 8003454:	4602      	mov	r2, r0
 8003456:	460b      	mov	r3, r1
 8003458:	1894      	adds	r4, r2, r2
 800345a:	603c      	str	r4, [r7, #0]
 800345c:	415b      	adcs	r3, r3
 800345e:	607b      	str	r3, [r7, #4]
 8003460:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003464:	1812      	adds	r2, r2, r0
 8003466:	eb41 0303 	adc.w	r3, r1, r3
 800346a:	f04f 0400 	mov.w	r4, #0
 800346e:	f04f 0500 	mov.w	r5, #0
 8003472:	00dd      	lsls	r5, r3, #3
 8003474:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003478:	00d4      	lsls	r4, r2, #3
 800347a:	4622      	mov	r2, r4
 800347c:	462b      	mov	r3, r5
 800347e:	eb12 0a00 	adds.w	sl, r2, r0
 8003482:	eb43 0b01 	adc.w	fp, r3, r1
 8003486:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	4618      	mov	r0, r3
 800348c:	f04f 0100 	mov.w	r1, #0
 8003490:	f04f 0200 	mov.w	r2, #0
 8003494:	f04f 0300 	mov.w	r3, #0
 8003498:	008b      	lsls	r3, r1, #2
 800349a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800349e:	0082      	lsls	r2, r0, #2
 80034a0:	4650      	mov	r0, sl
 80034a2:	4659      	mov	r1, fp
 80034a4:	f7fc feec 	bl	8000280 <__aeabi_uldivmod>
 80034a8:	4602      	mov	r2, r0
 80034aa:	460b      	mov	r3, r1
 80034ac:	4b0e      	ldr	r3, [pc, #56]	; (80034e8 <UART_SetConfig+0x38c>)
 80034ae:	fba3 1302 	umull	r1, r3, r3, r2
 80034b2:	095b      	lsrs	r3, r3, #5
 80034b4:	2164      	movs	r1, #100	; 0x64
 80034b6:	fb01 f303 	mul.w	r3, r1, r3
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	011b      	lsls	r3, r3, #4
 80034be:	3332      	adds	r3, #50	; 0x32
 80034c0:	4a09      	ldr	r2, [pc, #36]	; (80034e8 <UART_SetConfig+0x38c>)
 80034c2:	fba2 2303 	umull	r2, r3, r2, r3
 80034c6:	095b      	lsrs	r3, r3, #5
 80034c8:	f003 020f 	and.w	r2, r3, #15
 80034cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4432      	add	r2, r6
 80034d2:	609a      	str	r2, [r3, #8]
}
 80034d4:	bf00      	nop
 80034d6:	377c      	adds	r7, #124	; 0x7c
 80034d8:	46bd      	mov	sp, r7
 80034da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034de:	bf00      	nop
 80034e0:	40011000 	.word	0x40011000
 80034e4:	40011400 	.word	0x40011400
 80034e8:	51eb851f 	.word	0x51eb851f

080034ec <__errno>:
 80034ec:	4b01      	ldr	r3, [pc, #4]	; (80034f4 <__errno+0x8>)
 80034ee:	6818      	ldr	r0, [r3, #0]
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	20000010 	.word	0x20000010

080034f8 <__libc_init_array>:
 80034f8:	b570      	push	{r4, r5, r6, lr}
 80034fa:	4d0d      	ldr	r5, [pc, #52]	; (8003530 <__libc_init_array+0x38>)
 80034fc:	4c0d      	ldr	r4, [pc, #52]	; (8003534 <__libc_init_array+0x3c>)
 80034fe:	1b64      	subs	r4, r4, r5
 8003500:	10a4      	asrs	r4, r4, #2
 8003502:	2600      	movs	r6, #0
 8003504:	42a6      	cmp	r6, r4
 8003506:	d109      	bne.n	800351c <__libc_init_array+0x24>
 8003508:	4d0b      	ldr	r5, [pc, #44]	; (8003538 <__libc_init_array+0x40>)
 800350a:	4c0c      	ldr	r4, [pc, #48]	; (800353c <__libc_init_array+0x44>)
 800350c:	f000 fc82 	bl	8003e14 <_init>
 8003510:	1b64      	subs	r4, r4, r5
 8003512:	10a4      	asrs	r4, r4, #2
 8003514:	2600      	movs	r6, #0
 8003516:	42a6      	cmp	r6, r4
 8003518:	d105      	bne.n	8003526 <__libc_init_array+0x2e>
 800351a:	bd70      	pop	{r4, r5, r6, pc}
 800351c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003520:	4798      	blx	r3
 8003522:	3601      	adds	r6, #1
 8003524:	e7ee      	b.n	8003504 <__libc_init_array+0xc>
 8003526:	f855 3b04 	ldr.w	r3, [r5], #4
 800352a:	4798      	blx	r3
 800352c:	3601      	adds	r6, #1
 800352e:	e7f2      	b.n	8003516 <__libc_init_array+0x1e>
 8003530:	08004560 	.word	0x08004560
 8003534:	08004560 	.word	0x08004560
 8003538:	08004560 	.word	0x08004560
 800353c:	08004564 	.word	0x08004564

08003540 <memcpy>:
 8003540:	440a      	add	r2, r1
 8003542:	4291      	cmp	r1, r2
 8003544:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003548:	d100      	bne.n	800354c <memcpy+0xc>
 800354a:	4770      	bx	lr
 800354c:	b510      	push	{r4, lr}
 800354e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003552:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003556:	4291      	cmp	r1, r2
 8003558:	d1f9      	bne.n	800354e <memcpy+0xe>
 800355a:	bd10      	pop	{r4, pc}

0800355c <memset>:
 800355c:	4402      	add	r2, r0
 800355e:	4603      	mov	r3, r0
 8003560:	4293      	cmp	r3, r2
 8003562:	d100      	bne.n	8003566 <memset+0xa>
 8003564:	4770      	bx	lr
 8003566:	f803 1b01 	strb.w	r1, [r3], #1
 800356a:	e7f9      	b.n	8003560 <memset+0x4>

0800356c <sniprintf>:
 800356c:	b40c      	push	{r2, r3}
 800356e:	b530      	push	{r4, r5, lr}
 8003570:	4b17      	ldr	r3, [pc, #92]	; (80035d0 <sniprintf+0x64>)
 8003572:	1e0c      	subs	r4, r1, #0
 8003574:	681d      	ldr	r5, [r3, #0]
 8003576:	b09d      	sub	sp, #116	; 0x74
 8003578:	da08      	bge.n	800358c <sniprintf+0x20>
 800357a:	238b      	movs	r3, #139	; 0x8b
 800357c:	602b      	str	r3, [r5, #0]
 800357e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003582:	b01d      	add	sp, #116	; 0x74
 8003584:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003588:	b002      	add	sp, #8
 800358a:	4770      	bx	lr
 800358c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003590:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003594:	bf14      	ite	ne
 8003596:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800359a:	4623      	moveq	r3, r4
 800359c:	9304      	str	r3, [sp, #16]
 800359e:	9307      	str	r3, [sp, #28]
 80035a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035a4:	9002      	str	r0, [sp, #8]
 80035a6:	9006      	str	r0, [sp, #24]
 80035a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80035ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80035ae:	ab21      	add	r3, sp, #132	; 0x84
 80035b0:	a902      	add	r1, sp, #8
 80035b2:	4628      	mov	r0, r5
 80035b4:	9301      	str	r3, [sp, #4]
 80035b6:	f000 f889 	bl	80036cc <_svfiprintf_r>
 80035ba:	1c43      	adds	r3, r0, #1
 80035bc:	bfbc      	itt	lt
 80035be:	238b      	movlt	r3, #139	; 0x8b
 80035c0:	602b      	strlt	r3, [r5, #0]
 80035c2:	2c00      	cmp	r4, #0
 80035c4:	d0dd      	beq.n	8003582 <sniprintf+0x16>
 80035c6:	9b02      	ldr	r3, [sp, #8]
 80035c8:	2200      	movs	r2, #0
 80035ca:	701a      	strb	r2, [r3, #0]
 80035cc:	e7d9      	b.n	8003582 <sniprintf+0x16>
 80035ce:	bf00      	nop
 80035d0:	20000010 	.word	0x20000010

080035d4 <siprintf>:
 80035d4:	b40e      	push	{r1, r2, r3}
 80035d6:	b500      	push	{lr}
 80035d8:	b09c      	sub	sp, #112	; 0x70
 80035da:	ab1d      	add	r3, sp, #116	; 0x74
 80035dc:	9002      	str	r0, [sp, #8]
 80035de:	9006      	str	r0, [sp, #24]
 80035e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80035e4:	4809      	ldr	r0, [pc, #36]	; (800360c <siprintf+0x38>)
 80035e6:	9107      	str	r1, [sp, #28]
 80035e8:	9104      	str	r1, [sp, #16]
 80035ea:	4909      	ldr	r1, [pc, #36]	; (8003610 <siprintf+0x3c>)
 80035ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80035f0:	9105      	str	r1, [sp, #20]
 80035f2:	6800      	ldr	r0, [r0, #0]
 80035f4:	9301      	str	r3, [sp, #4]
 80035f6:	a902      	add	r1, sp, #8
 80035f8:	f000 f868 	bl	80036cc <_svfiprintf_r>
 80035fc:	9b02      	ldr	r3, [sp, #8]
 80035fe:	2200      	movs	r2, #0
 8003600:	701a      	strb	r2, [r3, #0]
 8003602:	b01c      	add	sp, #112	; 0x70
 8003604:	f85d eb04 	ldr.w	lr, [sp], #4
 8003608:	b003      	add	sp, #12
 800360a:	4770      	bx	lr
 800360c:	20000010 	.word	0x20000010
 8003610:	ffff0208 	.word	0xffff0208

08003614 <__ssputs_r>:
 8003614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003618:	688e      	ldr	r6, [r1, #8]
 800361a:	429e      	cmp	r6, r3
 800361c:	4682      	mov	sl, r0
 800361e:	460c      	mov	r4, r1
 8003620:	4690      	mov	r8, r2
 8003622:	461f      	mov	r7, r3
 8003624:	d838      	bhi.n	8003698 <__ssputs_r+0x84>
 8003626:	898a      	ldrh	r2, [r1, #12]
 8003628:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800362c:	d032      	beq.n	8003694 <__ssputs_r+0x80>
 800362e:	6825      	ldr	r5, [r4, #0]
 8003630:	6909      	ldr	r1, [r1, #16]
 8003632:	eba5 0901 	sub.w	r9, r5, r1
 8003636:	6965      	ldr	r5, [r4, #20]
 8003638:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800363c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003640:	3301      	adds	r3, #1
 8003642:	444b      	add	r3, r9
 8003644:	106d      	asrs	r5, r5, #1
 8003646:	429d      	cmp	r5, r3
 8003648:	bf38      	it	cc
 800364a:	461d      	movcc	r5, r3
 800364c:	0553      	lsls	r3, r2, #21
 800364e:	d531      	bpl.n	80036b4 <__ssputs_r+0xa0>
 8003650:	4629      	mov	r1, r5
 8003652:	f000 fb39 	bl	8003cc8 <_malloc_r>
 8003656:	4606      	mov	r6, r0
 8003658:	b950      	cbnz	r0, 8003670 <__ssputs_r+0x5c>
 800365a:	230c      	movs	r3, #12
 800365c:	f8ca 3000 	str.w	r3, [sl]
 8003660:	89a3      	ldrh	r3, [r4, #12]
 8003662:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003666:	81a3      	strh	r3, [r4, #12]
 8003668:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800366c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003670:	6921      	ldr	r1, [r4, #16]
 8003672:	464a      	mov	r2, r9
 8003674:	f7ff ff64 	bl	8003540 <memcpy>
 8003678:	89a3      	ldrh	r3, [r4, #12]
 800367a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800367e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003682:	81a3      	strh	r3, [r4, #12]
 8003684:	6126      	str	r6, [r4, #16]
 8003686:	6165      	str	r5, [r4, #20]
 8003688:	444e      	add	r6, r9
 800368a:	eba5 0509 	sub.w	r5, r5, r9
 800368e:	6026      	str	r6, [r4, #0]
 8003690:	60a5      	str	r5, [r4, #8]
 8003692:	463e      	mov	r6, r7
 8003694:	42be      	cmp	r6, r7
 8003696:	d900      	bls.n	800369a <__ssputs_r+0x86>
 8003698:	463e      	mov	r6, r7
 800369a:	4632      	mov	r2, r6
 800369c:	6820      	ldr	r0, [r4, #0]
 800369e:	4641      	mov	r1, r8
 80036a0:	f000 faa8 	bl	8003bf4 <memmove>
 80036a4:	68a3      	ldr	r3, [r4, #8]
 80036a6:	6822      	ldr	r2, [r4, #0]
 80036a8:	1b9b      	subs	r3, r3, r6
 80036aa:	4432      	add	r2, r6
 80036ac:	60a3      	str	r3, [r4, #8]
 80036ae:	6022      	str	r2, [r4, #0]
 80036b0:	2000      	movs	r0, #0
 80036b2:	e7db      	b.n	800366c <__ssputs_r+0x58>
 80036b4:	462a      	mov	r2, r5
 80036b6:	f000 fb61 	bl	8003d7c <_realloc_r>
 80036ba:	4606      	mov	r6, r0
 80036bc:	2800      	cmp	r0, #0
 80036be:	d1e1      	bne.n	8003684 <__ssputs_r+0x70>
 80036c0:	6921      	ldr	r1, [r4, #16]
 80036c2:	4650      	mov	r0, sl
 80036c4:	f000 fab0 	bl	8003c28 <_free_r>
 80036c8:	e7c7      	b.n	800365a <__ssputs_r+0x46>
	...

080036cc <_svfiprintf_r>:
 80036cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036d0:	4698      	mov	r8, r3
 80036d2:	898b      	ldrh	r3, [r1, #12]
 80036d4:	061b      	lsls	r3, r3, #24
 80036d6:	b09d      	sub	sp, #116	; 0x74
 80036d8:	4607      	mov	r7, r0
 80036da:	460d      	mov	r5, r1
 80036dc:	4614      	mov	r4, r2
 80036de:	d50e      	bpl.n	80036fe <_svfiprintf_r+0x32>
 80036e0:	690b      	ldr	r3, [r1, #16]
 80036e2:	b963      	cbnz	r3, 80036fe <_svfiprintf_r+0x32>
 80036e4:	2140      	movs	r1, #64	; 0x40
 80036e6:	f000 faef 	bl	8003cc8 <_malloc_r>
 80036ea:	6028      	str	r0, [r5, #0]
 80036ec:	6128      	str	r0, [r5, #16]
 80036ee:	b920      	cbnz	r0, 80036fa <_svfiprintf_r+0x2e>
 80036f0:	230c      	movs	r3, #12
 80036f2:	603b      	str	r3, [r7, #0]
 80036f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036f8:	e0d1      	b.n	800389e <_svfiprintf_r+0x1d2>
 80036fa:	2340      	movs	r3, #64	; 0x40
 80036fc:	616b      	str	r3, [r5, #20]
 80036fe:	2300      	movs	r3, #0
 8003700:	9309      	str	r3, [sp, #36]	; 0x24
 8003702:	2320      	movs	r3, #32
 8003704:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003708:	f8cd 800c 	str.w	r8, [sp, #12]
 800370c:	2330      	movs	r3, #48	; 0x30
 800370e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80038b8 <_svfiprintf_r+0x1ec>
 8003712:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003716:	f04f 0901 	mov.w	r9, #1
 800371a:	4623      	mov	r3, r4
 800371c:	469a      	mov	sl, r3
 800371e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003722:	b10a      	cbz	r2, 8003728 <_svfiprintf_r+0x5c>
 8003724:	2a25      	cmp	r2, #37	; 0x25
 8003726:	d1f9      	bne.n	800371c <_svfiprintf_r+0x50>
 8003728:	ebba 0b04 	subs.w	fp, sl, r4
 800372c:	d00b      	beq.n	8003746 <_svfiprintf_r+0x7a>
 800372e:	465b      	mov	r3, fp
 8003730:	4622      	mov	r2, r4
 8003732:	4629      	mov	r1, r5
 8003734:	4638      	mov	r0, r7
 8003736:	f7ff ff6d 	bl	8003614 <__ssputs_r>
 800373a:	3001      	adds	r0, #1
 800373c:	f000 80aa 	beq.w	8003894 <_svfiprintf_r+0x1c8>
 8003740:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003742:	445a      	add	r2, fp
 8003744:	9209      	str	r2, [sp, #36]	; 0x24
 8003746:	f89a 3000 	ldrb.w	r3, [sl]
 800374a:	2b00      	cmp	r3, #0
 800374c:	f000 80a2 	beq.w	8003894 <_svfiprintf_r+0x1c8>
 8003750:	2300      	movs	r3, #0
 8003752:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003756:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800375a:	f10a 0a01 	add.w	sl, sl, #1
 800375e:	9304      	str	r3, [sp, #16]
 8003760:	9307      	str	r3, [sp, #28]
 8003762:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003766:	931a      	str	r3, [sp, #104]	; 0x68
 8003768:	4654      	mov	r4, sl
 800376a:	2205      	movs	r2, #5
 800376c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003770:	4851      	ldr	r0, [pc, #324]	; (80038b8 <_svfiprintf_r+0x1ec>)
 8003772:	f7fc fd35 	bl	80001e0 <memchr>
 8003776:	9a04      	ldr	r2, [sp, #16]
 8003778:	b9d8      	cbnz	r0, 80037b2 <_svfiprintf_r+0xe6>
 800377a:	06d0      	lsls	r0, r2, #27
 800377c:	bf44      	itt	mi
 800377e:	2320      	movmi	r3, #32
 8003780:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003784:	0711      	lsls	r1, r2, #28
 8003786:	bf44      	itt	mi
 8003788:	232b      	movmi	r3, #43	; 0x2b
 800378a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800378e:	f89a 3000 	ldrb.w	r3, [sl]
 8003792:	2b2a      	cmp	r3, #42	; 0x2a
 8003794:	d015      	beq.n	80037c2 <_svfiprintf_r+0xf6>
 8003796:	9a07      	ldr	r2, [sp, #28]
 8003798:	4654      	mov	r4, sl
 800379a:	2000      	movs	r0, #0
 800379c:	f04f 0c0a 	mov.w	ip, #10
 80037a0:	4621      	mov	r1, r4
 80037a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037a6:	3b30      	subs	r3, #48	; 0x30
 80037a8:	2b09      	cmp	r3, #9
 80037aa:	d94e      	bls.n	800384a <_svfiprintf_r+0x17e>
 80037ac:	b1b0      	cbz	r0, 80037dc <_svfiprintf_r+0x110>
 80037ae:	9207      	str	r2, [sp, #28]
 80037b0:	e014      	b.n	80037dc <_svfiprintf_r+0x110>
 80037b2:	eba0 0308 	sub.w	r3, r0, r8
 80037b6:	fa09 f303 	lsl.w	r3, r9, r3
 80037ba:	4313      	orrs	r3, r2
 80037bc:	9304      	str	r3, [sp, #16]
 80037be:	46a2      	mov	sl, r4
 80037c0:	e7d2      	b.n	8003768 <_svfiprintf_r+0x9c>
 80037c2:	9b03      	ldr	r3, [sp, #12]
 80037c4:	1d19      	adds	r1, r3, #4
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	9103      	str	r1, [sp, #12]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	bfbb      	ittet	lt
 80037ce:	425b      	neglt	r3, r3
 80037d0:	f042 0202 	orrlt.w	r2, r2, #2
 80037d4:	9307      	strge	r3, [sp, #28]
 80037d6:	9307      	strlt	r3, [sp, #28]
 80037d8:	bfb8      	it	lt
 80037da:	9204      	strlt	r2, [sp, #16]
 80037dc:	7823      	ldrb	r3, [r4, #0]
 80037de:	2b2e      	cmp	r3, #46	; 0x2e
 80037e0:	d10c      	bne.n	80037fc <_svfiprintf_r+0x130>
 80037e2:	7863      	ldrb	r3, [r4, #1]
 80037e4:	2b2a      	cmp	r3, #42	; 0x2a
 80037e6:	d135      	bne.n	8003854 <_svfiprintf_r+0x188>
 80037e8:	9b03      	ldr	r3, [sp, #12]
 80037ea:	1d1a      	adds	r2, r3, #4
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	9203      	str	r2, [sp, #12]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	bfb8      	it	lt
 80037f4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80037f8:	3402      	adds	r4, #2
 80037fa:	9305      	str	r3, [sp, #20]
 80037fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80038c8 <_svfiprintf_r+0x1fc>
 8003800:	7821      	ldrb	r1, [r4, #0]
 8003802:	2203      	movs	r2, #3
 8003804:	4650      	mov	r0, sl
 8003806:	f7fc fceb 	bl	80001e0 <memchr>
 800380a:	b140      	cbz	r0, 800381e <_svfiprintf_r+0x152>
 800380c:	2340      	movs	r3, #64	; 0x40
 800380e:	eba0 000a 	sub.w	r0, r0, sl
 8003812:	fa03 f000 	lsl.w	r0, r3, r0
 8003816:	9b04      	ldr	r3, [sp, #16]
 8003818:	4303      	orrs	r3, r0
 800381a:	3401      	adds	r4, #1
 800381c:	9304      	str	r3, [sp, #16]
 800381e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003822:	4826      	ldr	r0, [pc, #152]	; (80038bc <_svfiprintf_r+0x1f0>)
 8003824:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003828:	2206      	movs	r2, #6
 800382a:	f7fc fcd9 	bl	80001e0 <memchr>
 800382e:	2800      	cmp	r0, #0
 8003830:	d038      	beq.n	80038a4 <_svfiprintf_r+0x1d8>
 8003832:	4b23      	ldr	r3, [pc, #140]	; (80038c0 <_svfiprintf_r+0x1f4>)
 8003834:	bb1b      	cbnz	r3, 800387e <_svfiprintf_r+0x1b2>
 8003836:	9b03      	ldr	r3, [sp, #12]
 8003838:	3307      	adds	r3, #7
 800383a:	f023 0307 	bic.w	r3, r3, #7
 800383e:	3308      	adds	r3, #8
 8003840:	9303      	str	r3, [sp, #12]
 8003842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003844:	4433      	add	r3, r6
 8003846:	9309      	str	r3, [sp, #36]	; 0x24
 8003848:	e767      	b.n	800371a <_svfiprintf_r+0x4e>
 800384a:	fb0c 3202 	mla	r2, ip, r2, r3
 800384e:	460c      	mov	r4, r1
 8003850:	2001      	movs	r0, #1
 8003852:	e7a5      	b.n	80037a0 <_svfiprintf_r+0xd4>
 8003854:	2300      	movs	r3, #0
 8003856:	3401      	adds	r4, #1
 8003858:	9305      	str	r3, [sp, #20]
 800385a:	4619      	mov	r1, r3
 800385c:	f04f 0c0a 	mov.w	ip, #10
 8003860:	4620      	mov	r0, r4
 8003862:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003866:	3a30      	subs	r2, #48	; 0x30
 8003868:	2a09      	cmp	r2, #9
 800386a:	d903      	bls.n	8003874 <_svfiprintf_r+0x1a8>
 800386c:	2b00      	cmp	r3, #0
 800386e:	d0c5      	beq.n	80037fc <_svfiprintf_r+0x130>
 8003870:	9105      	str	r1, [sp, #20]
 8003872:	e7c3      	b.n	80037fc <_svfiprintf_r+0x130>
 8003874:	fb0c 2101 	mla	r1, ip, r1, r2
 8003878:	4604      	mov	r4, r0
 800387a:	2301      	movs	r3, #1
 800387c:	e7f0      	b.n	8003860 <_svfiprintf_r+0x194>
 800387e:	ab03      	add	r3, sp, #12
 8003880:	9300      	str	r3, [sp, #0]
 8003882:	462a      	mov	r2, r5
 8003884:	4b0f      	ldr	r3, [pc, #60]	; (80038c4 <_svfiprintf_r+0x1f8>)
 8003886:	a904      	add	r1, sp, #16
 8003888:	4638      	mov	r0, r7
 800388a:	f3af 8000 	nop.w
 800388e:	1c42      	adds	r2, r0, #1
 8003890:	4606      	mov	r6, r0
 8003892:	d1d6      	bne.n	8003842 <_svfiprintf_r+0x176>
 8003894:	89ab      	ldrh	r3, [r5, #12]
 8003896:	065b      	lsls	r3, r3, #25
 8003898:	f53f af2c 	bmi.w	80036f4 <_svfiprintf_r+0x28>
 800389c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800389e:	b01d      	add	sp, #116	; 0x74
 80038a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038a4:	ab03      	add	r3, sp, #12
 80038a6:	9300      	str	r3, [sp, #0]
 80038a8:	462a      	mov	r2, r5
 80038aa:	4b06      	ldr	r3, [pc, #24]	; (80038c4 <_svfiprintf_r+0x1f8>)
 80038ac:	a904      	add	r1, sp, #16
 80038ae:	4638      	mov	r0, r7
 80038b0:	f000 f87a 	bl	80039a8 <_printf_i>
 80038b4:	e7eb      	b.n	800388e <_svfiprintf_r+0x1c2>
 80038b6:	bf00      	nop
 80038b8:	08004524 	.word	0x08004524
 80038bc:	0800452e 	.word	0x0800452e
 80038c0:	00000000 	.word	0x00000000
 80038c4:	08003615 	.word	0x08003615
 80038c8:	0800452a 	.word	0x0800452a

080038cc <_printf_common>:
 80038cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038d0:	4616      	mov	r6, r2
 80038d2:	4699      	mov	r9, r3
 80038d4:	688a      	ldr	r2, [r1, #8]
 80038d6:	690b      	ldr	r3, [r1, #16]
 80038d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80038dc:	4293      	cmp	r3, r2
 80038de:	bfb8      	it	lt
 80038e0:	4613      	movlt	r3, r2
 80038e2:	6033      	str	r3, [r6, #0]
 80038e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80038e8:	4607      	mov	r7, r0
 80038ea:	460c      	mov	r4, r1
 80038ec:	b10a      	cbz	r2, 80038f2 <_printf_common+0x26>
 80038ee:	3301      	adds	r3, #1
 80038f0:	6033      	str	r3, [r6, #0]
 80038f2:	6823      	ldr	r3, [r4, #0]
 80038f4:	0699      	lsls	r1, r3, #26
 80038f6:	bf42      	ittt	mi
 80038f8:	6833      	ldrmi	r3, [r6, #0]
 80038fa:	3302      	addmi	r3, #2
 80038fc:	6033      	strmi	r3, [r6, #0]
 80038fe:	6825      	ldr	r5, [r4, #0]
 8003900:	f015 0506 	ands.w	r5, r5, #6
 8003904:	d106      	bne.n	8003914 <_printf_common+0x48>
 8003906:	f104 0a19 	add.w	sl, r4, #25
 800390a:	68e3      	ldr	r3, [r4, #12]
 800390c:	6832      	ldr	r2, [r6, #0]
 800390e:	1a9b      	subs	r3, r3, r2
 8003910:	42ab      	cmp	r3, r5
 8003912:	dc26      	bgt.n	8003962 <_printf_common+0x96>
 8003914:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003918:	1e13      	subs	r3, r2, #0
 800391a:	6822      	ldr	r2, [r4, #0]
 800391c:	bf18      	it	ne
 800391e:	2301      	movne	r3, #1
 8003920:	0692      	lsls	r2, r2, #26
 8003922:	d42b      	bmi.n	800397c <_printf_common+0xb0>
 8003924:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003928:	4649      	mov	r1, r9
 800392a:	4638      	mov	r0, r7
 800392c:	47c0      	blx	r8
 800392e:	3001      	adds	r0, #1
 8003930:	d01e      	beq.n	8003970 <_printf_common+0xa4>
 8003932:	6823      	ldr	r3, [r4, #0]
 8003934:	68e5      	ldr	r5, [r4, #12]
 8003936:	6832      	ldr	r2, [r6, #0]
 8003938:	f003 0306 	and.w	r3, r3, #6
 800393c:	2b04      	cmp	r3, #4
 800393e:	bf08      	it	eq
 8003940:	1aad      	subeq	r5, r5, r2
 8003942:	68a3      	ldr	r3, [r4, #8]
 8003944:	6922      	ldr	r2, [r4, #16]
 8003946:	bf0c      	ite	eq
 8003948:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800394c:	2500      	movne	r5, #0
 800394e:	4293      	cmp	r3, r2
 8003950:	bfc4      	itt	gt
 8003952:	1a9b      	subgt	r3, r3, r2
 8003954:	18ed      	addgt	r5, r5, r3
 8003956:	2600      	movs	r6, #0
 8003958:	341a      	adds	r4, #26
 800395a:	42b5      	cmp	r5, r6
 800395c:	d11a      	bne.n	8003994 <_printf_common+0xc8>
 800395e:	2000      	movs	r0, #0
 8003960:	e008      	b.n	8003974 <_printf_common+0xa8>
 8003962:	2301      	movs	r3, #1
 8003964:	4652      	mov	r2, sl
 8003966:	4649      	mov	r1, r9
 8003968:	4638      	mov	r0, r7
 800396a:	47c0      	blx	r8
 800396c:	3001      	adds	r0, #1
 800396e:	d103      	bne.n	8003978 <_printf_common+0xac>
 8003970:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003978:	3501      	adds	r5, #1
 800397a:	e7c6      	b.n	800390a <_printf_common+0x3e>
 800397c:	18e1      	adds	r1, r4, r3
 800397e:	1c5a      	adds	r2, r3, #1
 8003980:	2030      	movs	r0, #48	; 0x30
 8003982:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003986:	4422      	add	r2, r4
 8003988:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800398c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003990:	3302      	adds	r3, #2
 8003992:	e7c7      	b.n	8003924 <_printf_common+0x58>
 8003994:	2301      	movs	r3, #1
 8003996:	4622      	mov	r2, r4
 8003998:	4649      	mov	r1, r9
 800399a:	4638      	mov	r0, r7
 800399c:	47c0      	blx	r8
 800399e:	3001      	adds	r0, #1
 80039a0:	d0e6      	beq.n	8003970 <_printf_common+0xa4>
 80039a2:	3601      	adds	r6, #1
 80039a4:	e7d9      	b.n	800395a <_printf_common+0x8e>
	...

080039a8 <_printf_i>:
 80039a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039ac:	460c      	mov	r4, r1
 80039ae:	4691      	mov	r9, r2
 80039b0:	7e27      	ldrb	r7, [r4, #24]
 80039b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80039b4:	2f78      	cmp	r7, #120	; 0x78
 80039b6:	4680      	mov	r8, r0
 80039b8:	469a      	mov	sl, r3
 80039ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80039be:	d807      	bhi.n	80039d0 <_printf_i+0x28>
 80039c0:	2f62      	cmp	r7, #98	; 0x62
 80039c2:	d80a      	bhi.n	80039da <_printf_i+0x32>
 80039c4:	2f00      	cmp	r7, #0
 80039c6:	f000 80d8 	beq.w	8003b7a <_printf_i+0x1d2>
 80039ca:	2f58      	cmp	r7, #88	; 0x58
 80039cc:	f000 80a3 	beq.w	8003b16 <_printf_i+0x16e>
 80039d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80039d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80039d8:	e03a      	b.n	8003a50 <_printf_i+0xa8>
 80039da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80039de:	2b15      	cmp	r3, #21
 80039e0:	d8f6      	bhi.n	80039d0 <_printf_i+0x28>
 80039e2:	a001      	add	r0, pc, #4	; (adr r0, 80039e8 <_printf_i+0x40>)
 80039e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80039e8:	08003a41 	.word	0x08003a41
 80039ec:	08003a55 	.word	0x08003a55
 80039f0:	080039d1 	.word	0x080039d1
 80039f4:	080039d1 	.word	0x080039d1
 80039f8:	080039d1 	.word	0x080039d1
 80039fc:	080039d1 	.word	0x080039d1
 8003a00:	08003a55 	.word	0x08003a55
 8003a04:	080039d1 	.word	0x080039d1
 8003a08:	080039d1 	.word	0x080039d1
 8003a0c:	080039d1 	.word	0x080039d1
 8003a10:	080039d1 	.word	0x080039d1
 8003a14:	08003b61 	.word	0x08003b61
 8003a18:	08003a85 	.word	0x08003a85
 8003a1c:	08003b43 	.word	0x08003b43
 8003a20:	080039d1 	.word	0x080039d1
 8003a24:	080039d1 	.word	0x080039d1
 8003a28:	08003b83 	.word	0x08003b83
 8003a2c:	080039d1 	.word	0x080039d1
 8003a30:	08003a85 	.word	0x08003a85
 8003a34:	080039d1 	.word	0x080039d1
 8003a38:	080039d1 	.word	0x080039d1
 8003a3c:	08003b4b 	.word	0x08003b4b
 8003a40:	680b      	ldr	r3, [r1, #0]
 8003a42:	1d1a      	adds	r2, r3, #4
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	600a      	str	r2, [r1, #0]
 8003a48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003a4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a50:	2301      	movs	r3, #1
 8003a52:	e0a3      	b.n	8003b9c <_printf_i+0x1f4>
 8003a54:	6825      	ldr	r5, [r4, #0]
 8003a56:	6808      	ldr	r0, [r1, #0]
 8003a58:	062e      	lsls	r6, r5, #24
 8003a5a:	f100 0304 	add.w	r3, r0, #4
 8003a5e:	d50a      	bpl.n	8003a76 <_printf_i+0xce>
 8003a60:	6805      	ldr	r5, [r0, #0]
 8003a62:	600b      	str	r3, [r1, #0]
 8003a64:	2d00      	cmp	r5, #0
 8003a66:	da03      	bge.n	8003a70 <_printf_i+0xc8>
 8003a68:	232d      	movs	r3, #45	; 0x2d
 8003a6a:	426d      	negs	r5, r5
 8003a6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a70:	485e      	ldr	r0, [pc, #376]	; (8003bec <_printf_i+0x244>)
 8003a72:	230a      	movs	r3, #10
 8003a74:	e019      	b.n	8003aaa <_printf_i+0x102>
 8003a76:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003a7a:	6805      	ldr	r5, [r0, #0]
 8003a7c:	600b      	str	r3, [r1, #0]
 8003a7e:	bf18      	it	ne
 8003a80:	b22d      	sxthne	r5, r5
 8003a82:	e7ef      	b.n	8003a64 <_printf_i+0xbc>
 8003a84:	680b      	ldr	r3, [r1, #0]
 8003a86:	6825      	ldr	r5, [r4, #0]
 8003a88:	1d18      	adds	r0, r3, #4
 8003a8a:	6008      	str	r0, [r1, #0]
 8003a8c:	0628      	lsls	r0, r5, #24
 8003a8e:	d501      	bpl.n	8003a94 <_printf_i+0xec>
 8003a90:	681d      	ldr	r5, [r3, #0]
 8003a92:	e002      	b.n	8003a9a <_printf_i+0xf2>
 8003a94:	0669      	lsls	r1, r5, #25
 8003a96:	d5fb      	bpl.n	8003a90 <_printf_i+0xe8>
 8003a98:	881d      	ldrh	r5, [r3, #0]
 8003a9a:	4854      	ldr	r0, [pc, #336]	; (8003bec <_printf_i+0x244>)
 8003a9c:	2f6f      	cmp	r7, #111	; 0x6f
 8003a9e:	bf0c      	ite	eq
 8003aa0:	2308      	moveq	r3, #8
 8003aa2:	230a      	movne	r3, #10
 8003aa4:	2100      	movs	r1, #0
 8003aa6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003aaa:	6866      	ldr	r6, [r4, #4]
 8003aac:	60a6      	str	r6, [r4, #8]
 8003aae:	2e00      	cmp	r6, #0
 8003ab0:	bfa2      	ittt	ge
 8003ab2:	6821      	ldrge	r1, [r4, #0]
 8003ab4:	f021 0104 	bicge.w	r1, r1, #4
 8003ab8:	6021      	strge	r1, [r4, #0]
 8003aba:	b90d      	cbnz	r5, 8003ac0 <_printf_i+0x118>
 8003abc:	2e00      	cmp	r6, #0
 8003abe:	d04d      	beq.n	8003b5c <_printf_i+0x1b4>
 8003ac0:	4616      	mov	r6, r2
 8003ac2:	fbb5 f1f3 	udiv	r1, r5, r3
 8003ac6:	fb03 5711 	mls	r7, r3, r1, r5
 8003aca:	5dc7      	ldrb	r7, [r0, r7]
 8003acc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003ad0:	462f      	mov	r7, r5
 8003ad2:	42bb      	cmp	r3, r7
 8003ad4:	460d      	mov	r5, r1
 8003ad6:	d9f4      	bls.n	8003ac2 <_printf_i+0x11a>
 8003ad8:	2b08      	cmp	r3, #8
 8003ada:	d10b      	bne.n	8003af4 <_printf_i+0x14c>
 8003adc:	6823      	ldr	r3, [r4, #0]
 8003ade:	07df      	lsls	r7, r3, #31
 8003ae0:	d508      	bpl.n	8003af4 <_printf_i+0x14c>
 8003ae2:	6923      	ldr	r3, [r4, #16]
 8003ae4:	6861      	ldr	r1, [r4, #4]
 8003ae6:	4299      	cmp	r1, r3
 8003ae8:	bfde      	ittt	le
 8003aea:	2330      	movle	r3, #48	; 0x30
 8003aec:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003af0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8003af4:	1b92      	subs	r2, r2, r6
 8003af6:	6122      	str	r2, [r4, #16]
 8003af8:	f8cd a000 	str.w	sl, [sp]
 8003afc:	464b      	mov	r3, r9
 8003afe:	aa03      	add	r2, sp, #12
 8003b00:	4621      	mov	r1, r4
 8003b02:	4640      	mov	r0, r8
 8003b04:	f7ff fee2 	bl	80038cc <_printf_common>
 8003b08:	3001      	adds	r0, #1
 8003b0a:	d14c      	bne.n	8003ba6 <_printf_i+0x1fe>
 8003b0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b10:	b004      	add	sp, #16
 8003b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b16:	4835      	ldr	r0, [pc, #212]	; (8003bec <_printf_i+0x244>)
 8003b18:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003b1c:	6823      	ldr	r3, [r4, #0]
 8003b1e:	680e      	ldr	r6, [r1, #0]
 8003b20:	061f      	lsls	r7, r3, #24
 8003b22:	f856 5b04 	ldr.w	r5, [r6], #4
 8003b26:	600e      	str	r6, [r1, #0]
 8003b28:	d514      	bpl.n	8003b54 <_printf_i+0x1ac>
 8003b2a:	07d9      	lsls	r1, r3, #31
 8003b2c:	bf44      	itt	mi
 8003b2e:	f043 0320 	orrmi.w	r3, r3, #32
 8003b32:	6023      	strmi	r3, [r4, #0]
 8003b34:	b91d      	cbnz	r5, 8003b3e <_printf_i+0x196>
 8003b36:	6823      	ldr	r3, [r4, #0]
 8003b38:	f023 0320 	bic.w	r3, r3, #32
 8003b3c:	6023      	str	r3, [r4, #0]
 8003b3e:	2310      	movs	r3, #16
 8003b40:	e7b0      	b.n	8003aa4 <_printf_i+0xfc>
 8003b42:	6823      	ldr	r3, [r4, #0]
 8003b44:	f043 0320 	orr.w	r3, r3, #32
 8003b48:	6023      	str	r3, [r4, #0]
 8003b4a:	2378      	movs	r3, #120	; 0x78
 8003b4c:	4828      	ldr	r0, [pc, #160]	; (8003bf0 <_printf_i+0x248>)
 8003b4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b52:	e7e3      	b.n	8003b1c <_printf_i+0x174>
 8003b54:	065e      	lsls	r6, r3, #25
 8003b56:	bf48      	it	mi
 8003b58:	b2ad      	uxthmi	r5, r5
 8003b5a:	e7e6      	b.n	8003b2a <_printf_i+0x182>
 8003b5c:	4616      	mov	r6, r2
 8003b5e:	e7bb      	b.n	8003ad8 <_printf_i+0x130>
 8003b60:	680b      	ldr	r3, [r1, #0]
 8003b62:	6826      	ldr	r6, [r4, #0]
 8003b64:	6960      	ldr	r0, [r4, #20]
 8003b66:	1d1d      	adds	r5, r3, #4
 8003b68:	600d      	str	r5, [r1, #0]
 8003b6a:	0635      	lsls	r5, r6, #24
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	d501      	bpl.n	8003b74 <_printf_i+0x1cc>
 8003b70:	6018      	str	r0, [r3, #0]
 8003b72:	e002      	b.n	8003b7a <_printf_i+0x1d2>
 8003b74:	0671      	lsls	r1, r6, #25
 8003b76:	d5fb      	bpl.n	8003b70 <_printf_i+0x1c8>
 8003b78:	8018      	strh	r0, [r3, #0]
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	6123      	str	r3, [r4, #16]
 8003b7e:	4616      	mov	r6, r2
 8003b80:	e7ba      	b.n	8003af8 <_printf_i+0x150>
 8003b82:	680b      	ldr	r3, [r1, #0]
 8003b84:	1d1a      	adds	r2, r3, #4
 8003b86:	600a      	str	r2, [r1, #0]
 8003b88:	681e      	ldr	r6, [r3, #0]
 8003b8a:	6862      	ldr	r2, [r4, #4]
 8003b8c:	2100      	movs	r1, #0
 8003b8e:	4630      	mov	r0, r6
 8003b90:	f7fc fb26 	bl	80001e0 <memchr>
 8003b94:	b108      	cbz	r0, 8003b9a <_printf_i+0x1f2>
 8003b96:	1b80      	subs	r0, r0, r6
 8003b98:	6060      	str	r0, [r4, #4]
 8003b9a:	6863      	ldr	r3, [r4, #4]
 8003b9c:	6123      	str	r3, [r4, #16]
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ba4:	e7a8      	b.n	8003af8 <_printf_i+0x150>
 8003ba6:	6923      	ldr	r3, [r4, #16]
 8003ba8:	4632      	mov	r2, r6
 8003baa:	4649      	mov	r1, r9
 8003bac:	4640      	mov	r0, r8
 8003bae:	47d0      	blx	sl
 8003bb0:	3001      	adds	r0, #1
 8003bb2:	d0ab      	beq.n	8003b0c <_printf_i+0x164>
 8003bb4:	6823      	ldr	r3, [r4, #0]
 8003bb6:	079b      	lsls	r3, r3, #30
 8003bb8:	d413      	bmi.n	8003be2 <_printf_i+0x23a>
 8003bba:	68e0      	ldr	r0, [r4, #12]
 8003bbc:	9b03      	ldr	r3, [sp, #12]
 8003bbe:	4298      	cmp	r0, r3
 8003bc0:	bfb8      	it	lt
 8003bc2:	4618      	movlt	r0, r3
 8003bc4:	e7a4      	b.n	8003b10 <_printf_i+0x168>
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	4632      	mov	r2, r6
 8003bca:	4649      	mov	r1, r9
 8003bcc:	4640      	mov	r0, r8
 8003bce:	47d0      	blx	sl
 8003bd0:	3001      	adds	r0, #1
 8003bd2:	d09b      	beq.n	8003b0c <_printf_i+0x164>
 8003bd4:	3501      	adds	r5, #1
 8003bd6:	68e3      	ldr	r3, [r4, #12]
 8003bd8:	9903      	ldr	r1, [sp, #12]
 8003bda:	1a5b      	subs	r3, r3, r1
 8003bdc:	42ab      	cmp	r3, r5
 8003bde:	dcf2      	bgt.n	8003bc6 <_printf_i+0x21e>
 8003be0:	e7eb      	b.n	8003bba <_printf_i+0x212>
 8003be2:	2500      	movs	r5, #0
 8003be4:	f104 0619 	add.w	r6, r4, #25
 8003be8:	e7f5      	b.n	8003bd6 <_printf_i+0x22e>
 8003bea:	bf00      	nop
 8003bec:	08004535 	.word	0x08004535
 8003bf0:	08004546 	.word	0x08004546

08003bf4 <memmove>:
 8003bf4:	4288      	cmp	r0, r1
 8003bf6:	b510      	push	{r4, lr}
 8003bf8:	eb01 0402 	add.w	r4, r1, r2
 8003bfc:	d902      	bls.n	8003c04 <memmove+0x10>
 8003bfe:	4284      	cmp	r4, r0
 8003c00:	4623      	mov	r3, r4
 8003c02:	d807      	bhi.n	8003c14 <memmove+0x20>
 8003c04:	1e43      	subs	r3, r0, #1
 8003c06:	42a1      	cmp	r1, r4
 8003c08:	d008      	beq.n	8003c1c <memmove+0x28>
 8003c0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003c12:	e7f8      	b.n	8003c06 <memmove+0x12>
 8003c14:	4402      	add	r2, r0
 8003c16:	4601      	mov	r1, r0
 8003c18:	428a      	cmp	r2, r1
 8003c1a:	d100      	bne.n	8003c1e <memmove+0x2a>
 8003c1c:	bd10      	pop	{r4, pc}
 8003c1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003c26:	e7f7      	b.n	8003c18 <memmove+0x24>

08003c28 <_free_r>:
 8003c28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003c2a:	2900      	cmp	r1, #0
 8003c2c:	d048      	beq.n	8003cc0 <_free_r+0x98>
 8003c2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c32:	9001      	str	r0, [sp, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f1a1 0404 	sub.w	r4, r1, #4
 8003c3a:	bfb8      	it	lt
 8003c3c:	18e4      	addlt	r4, r4, r3
 8003c3e:	f000 f8d3 	bl	8003de8 <__malloc_lock>
 8003c42:	4a20      	ldr	r2, [pc, #128]	; (8003cc4 <_free_r+0x9c>)
 8003c44:	9801      	ldr	r0, [sp, #4]
 8003c46:	6813      	ldr	r3, [r2, #0]
 8003c48:	4615      	mov	r5, r2
 8003c4a:	b933      	cbnz	r3, 8003c5a <_free_r+0x32>
 8003c4c:	6063      	str	r3, [r4, #4]
 8003c4e:	6014      	str	r4, [r2, #0]
 8003c50:	b003      	add	sp, #12
 8003c52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c56:	f000 b8cd 	b.w	8003df4 <__malloc_unlock>
 8003c5a:	42a3      	cmp	r3, r4
 8003c5c:	d90b      	bls.n	8003c76 <_free_r+0x4e>
 8003c5e:	6821      	ldr	r1, [r4, #0]
 8003c60:	1862      	adds	r2, r4, r1
 8003c62:	4293      	cmp	r3, r2
 8003c64:	bf04      	itt	eq
 8003c66:	681a      	ldreq	r2, [r3, #0]
 8003c68:	685b      	ldreq	r3, [r3, #4]
 8003c6a:	6063      	str	r3, [r4, #4]
 8003c6c:	bf04      	itt	eq
 8003c6e:	1852      	addeq	r2, r2, r1
 8003c70:	6022      	streq	r2, [r4, #0]
 8003c72:	602c      	str	r4, [r5, #0]
 8003c74:	e7ec      	b.n	8003c50 <_free_r+0x28>
 8003c76:	461a      	mov	r2, r3
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	b10b      	cbz	r3, 8003c80 <_free_r+0x58>
 8003c7c:	42a3      	cmp	r3, r4
 8003c7e:	d9fa      	bls.n	8003c76 <_free_r+0x4e>
 8003c80:	6811      	ldr	r1, [r2, #0]
 8003c82:	1855      	adds	r5, r2, r1
 8003c84:	42a5      	cmp	r5, r4
 8003c86:	d10b      	bne.n	8003ca0 <_free_r+0x78>
 8003c88:	6824      	ldr	r4, [r4, #0]
 8003c8a:	4421      	add	r1, r4
 8003c8c:	1854      	adds	r4, r2, r1
 8003c8e:	42a3      	cmp	r3, r4
 8003c90:	6011      	str	r1, [r2, #0]
 8003c92:	d1dd      	bne.n	8003c50 <_free_r+0x28>
 8003c94:	681c      	ldr	r4, [r3, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	6053      	str	r3, [r2, #4]
 8003c9a:	4421      	add	r1, r4
 8003c9c:	6011      	str	r1, [r2, #0]
 8003c9e:	e7d7      	b.n	8003c50 <_free_r+0x28>
 8003ca0:	d902      	bls.n	8003ca8 <_free_r+0x80>
 8003ca2:	230c      	movs	r3, #12
 8003ca4:	6003      	str	r3, [r0, #0]
 8003ca6:	e7d3      	b.n	8003c50 <_free_r+0x28>
 8003ca8:	6825      	ldr	r5, [r4, #0]
 8003caa:	1961      	adds	r1, r4, r5
 8003cac:	428b      	cmp	r3, r1
 8003cae:	bf04      	itt	eq
 8003cb0:	6819      	ldreq	r1, [r3, #0]
 8003cb2:	685b      	ldreq	r3, [r3, #4]
 8003cb4:	6063      	str	r3, [r4, #4]
 8003cb6:	bf04      	itt	eq
 8003cb8:	1949      	addeq	r1, r1, r5
 8003cba:	6021      	streq	r1, [r4, #0]
 8003cbc:	6054      	str	r4, [r2, #4]
 8003cbe:	e7c7      	b.n	8003c50 <_free_r+0x28>
 8003cc0:	b003      	add	sp, #12
 8003cc2:	bd30      	pop	{r4, r5, pc}
 8003cc4:	20000198 	.word	0x20000198

08003cc8 <_malloc_r>:
 8003cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cca:	1ccd      	adds	r5, r1, #3
 8003ccc:	f025 0503 	bic.w	r5, r5, #3
 8003cd0:	3508      	adds	r5, #8
 8003cd2:	2d0c      	cmp	r5, #12
 8003cd4:	bf38      	it	cc
 8003cd6:	250c      	movcc	r5, #12
 8003cd8:	2d00      	cmp	r5, #0
 8003cda:	4606      	mov	r6, r0
 8003cdc:	db01      	blt.n	8003ce2 <_malloc_r+0x1a>
 8003cde:	42a9      	cmp	r1, r5
 8003ce0:	d903      	bls.n	8003cea <_malloc_r+0x22>
 8003ce2:	230c      	movs	r3, #12
 8003ce4:	6033      	str	r3, [r6, #0]
 8003ce6:	2000      	movs	r0, #0
 8003ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cea:	f000 f87d 	bl	8003de8 <__malloc_lock>
 8003cee:	4921      	ldr	r1, [pc, #132]	; (8003d74 <_malloc_r+0xac>)
 8003cf0:	680a      	ldr	r2, [r1, #0]
 8003cf2:	4614      	mov	r4, r2
 8003cf4:	b99c      	cbnz	r4, 8003d1e <_malloc_r+0x56>
 8003cf6:	4f20      	ldr	r7, [pc, #128]	; (8003d78 <_malloc_r+0xb0>)
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	b923      	cbnz	r3, 8003d06 <_malloc_r+0x3e>
 8003cfc:	4621      	mov	r1, r4
 8003cfe:	4630      	mov	r0, r6
 8003d00:	f000 f862 	bl	8003dc8 <_sbrk_r>
 8003d04:	6038      	str	r0, [r7, #0]
 8003d06:	4629      	mov	r1, r5
 8003d08:	4630      	mov	r0, r6
 8003d0a:	f000 f85d 	bl	8003dc8 <_sbrk_r>
 8003d0e:	1c43      	adds	r3, r0, #1
 8003d10:	d123      	bne.n	8003d5a <_malloc_r+0x92>
 8003d12:	230c      	movs	r3, #12
 8003d14:	6033      	str	r3, [r6, #0]
 8003d16:	4630      	mov	r0, r6
 8003d18:	f000 f86c 	bl	8003df4 <__malloc_unlock>
 8003d1c:	e7e3      	b.n	8003ce6 <_malloc_r+0x1e>
 8003d1e:	6823      	ldr	r3, [r4, #0]
 8003d20:	1b5b      	subs	r3, r3, r5
 8003d22:	d417      	bmi.n	8003d54 <_malloc_r+0x8c>
 8003d24:	2b0b      	cmp	r3, #11
 8003d26:	d903      	bls.n	8003d30 <_malloc_r+0x68>
 8003d28:	6023      	str	r3, [r4, #0]
 8003d2a:	441c      	add	r4, r3
 8003d2c:	6025      	str	r5, [r4, #0]
 8003d2e:	e004      	b.n	8003d3a <_malloc_r+0x72>
 8003d30:	6863      	ldr	r3, [r4, #4]
 8003d32:	42a2      	cmp	r2, r4
 8003d34:	bf0c      	ite	eq
 8003d36:	600b      	streq	r3, [r1, #0]
 8003d38:	6053      	strne	r3, [r2, #4]
 8003d3a:	4630      	mov	r0, r6
 8003d3c:	f000 f85a 	bl	8003df4 <__malloc_unlock>
 8003d40:	f104 000b 	add.w	r0, r4, #11
 8003d44:	1d23      	adds	r3, r4, #4
 8003d46:	f020 0007 	bic.w	r0, r0, #7
 8003d4a:	1ac2      	subs	r2, r0, r3
 8003d4c:	d0cc      	beq.n	8003ce8 <_malloc_r+0x20>
 8003d4e:	1a1b      	subs	r3, r3, r0
 8003d50:	50a3      	str	r3, [r4, r2]
 8003d52:	e7c9      	b.n	8003ce8 <_malloc_r+0x20>
 8003d54:	4622      	mov	r2, r4
 8003d56:	6864      	ldr	r4, [r4, #4]
 8003d58:	e7cc      	b.n	8003cf4 <_malloc_r+0x2c>
 8003d5a:	1cc4      	adds	r4, r0, #3
 8003d5c:	f024 0403 	bic.w	r4, r4, #3
 8003d60:	42a0      	cmp	r0, r4
 8003d62:	d0e3      	beq.n	8003d2c <_malloc_r+0x64>
 8003d64:	1a21      	subs	r1, r4, r0
 8003d66:	4630      	mov	r0, r6
 8003d68:	f000 f82e 	bl	8003dc8 <_sbrk_r>
 8003d6c:	3001      	adds	r0, #1
 8003d6e:	d1dd      	bne.n	8003d2c <_malloc_r+0x64>
 8003d70:	e7cf      	b.n	8003d12 <_malloc_r+0x4a>
 8003d72:	bf00      	nop
 8003d74:	20000198 	.word	0x20000198
 8003d78:	2000019c 	.word	0x2000019c

08003d7c <_realloc_r>:
 8003d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d7e:	4607      	mov	r7, r0
 8003d80:	4614      	mov	r4, r2
 8003d82:	460e      	mov	r6, r1
 8003d84:	b921      	cbnz	r1, 8003d90 <_realloc_r+0x14>
 8003d86:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003d8a:	4611      	mov	r1, r2
 8003d8c:	f7ff bf9c 	b.w	8003cc8 <_malloc_r>
 8003d90:	b922      	cbnz	r2, 8003d9c <_realloc_r+0x20>
 8003d92:	f7ff ff49 	bl	8003c28 <_free_r>
 8003d96:	4625      	mov	r5, r4
 8003d98:	4628      	mov	r0, r5
 8003d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d9c:	f000 f830 	bl	8003e00 <_malloc_usable_size_r>
 8003da0:	42a0      	cmp	r0, r4
 8003da2:	d20f      	bcs.n	8003dc4 <_realloc_r+0x48>
 8003da4:	4621      	mov	r1, r4
 8003da6:	4638      	mov	r0, r7
 8003da8:	f7ff ff8e 	bl	8003cc8 <_malloc_r>
 8003dac:	4605      	mov	r5, r0
 8003dae:	2800      	cmp	r0, #0
 8003db0:	d0f2      	beq.n	8003d98 <_realloc_r+0x1c>
 8003db2:	4631      	mov	r1, r6
 8003db4:	4622      	mov	r2, r4
 8003db6:	f7ff fbc3 	bl	8003540 <memcpy>
 8003dba:	4631      	mov	r1, r6
 8003dbc:	4638      	mov	r0, r7
 8003dbe:	f7ff ff33 	bl	8003c28 <_free_r>
 8003dc2:	e7e9      	b.n	8003d98 <_realloc_r+0x1c>
 8003dc4:	4635      	mov	r5, r6
 8003dc6:	e7e7      	b.n	8003d98 <_realloc_r+0x1c>

08003dc8 <_sbrk_r>:
 8003dc8:	b538      	push	{r3, r4, r5, lr}
 8003dca:	4d06      	ldr	r5, [pc, #24]	; (8003de4 <_sbrk_r+0x1c>)
 8003dcc:	2300      	movs	r3, #0
 8003dce:	4604      	mov	r4, r0
 8003dd0:	4608      	mov	r0, r1
 8003dd2:	602b      	str	r3, [r5, #0]
 8003dd4:	f7fd fecc 	bl	8001b70 <_sbrk>
 8003dd8:	1c43      	adds	r3, r0, #1
 8003dda:	d102      	bne.n	8003de2 <_sbrk_r+0x1a>
 8003ddc:	682b      	ldr	r3, [r5, #0]
 8003dde:	b103      	cbz	r3, 8003de2 <_sbrk_r+0x1a>
 8003de0:	6023      	str	r3, [r4, #0]
 8003de2:	bd38      	pop	{r3, r4, r5, pc}
 8003de4:	20000374 	.word	0x20000374

08003de8 <__malloc_lock>:
 8003de8:	4801      	ldr	r0, [pc, #4]	; (8003df0 <__malloc_lock+0x8>)
 8003dea:	f000 b811 	b.w	8003e10 <__retarget_lock_acquire_recursive>
 8003dee:	bf00      	nop
 8003df0:	2000037c 	.word	0x2000037c

08003df4 <__malloc_unlock>:
 8003df4:	4801      	ldr	r0, [pc, #4]	; (8003dfc <__malloc_unlock+0x8>)
 8003df6:	f000 b80c 	b.w	8003e12 <__retarget_lock_release_recursive>
 8003dfa:	bf00      	nop
 8003dfc:	2000037c 	.word	0x2000037c

08003e00 <_malloc_usable_size_r>:
 8003e00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e04:	1f18      	subs	r0, r3, #4
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	bfbc      	itt	lt
 8003e0a:	580b      	ldrlt	r3, [r1, r0]
 8003e0c:	18c0      	addlt	r0, r0, r3
 8003e0e:	4770      	bx	lr

08003e10 <__retarget_lock_acquire_recursive>:
 8003e10:	4770      	bx	lr

08003e12 <__retarget_lock_release_recursive>:
 8003e12:	4770      	bx	lr

08003e14 <_init>:
 8003e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e16:	bf00      	nop
 8003e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e1a:	bc08      	pop	{r3}
 8003e1c:	469e      	mov	lr, r3
 8003e1e:	4770      	bx	lr

08003e20 <_fini>:
 8003e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e22:	bf00      	nop
 8003e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e26:	bc08      	pop	{r3}
 8003e28:	469e      	mov	lr, r3
 8003e2a:	4770      	bx	lr
